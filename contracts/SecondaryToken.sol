// SPDX-License-Identifier: MIT
pragma solidity ^0.8.9;

import "@openzeppelin/contracts/access/AccessControl.sol";
import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol";
import "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol";
import "@openzeppelin/contracts/security/ReentrancyGuard.sol";
import "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol";
import "@openzeppelin/contracts/utils/cryptography/ECDSA.sol";
import "./interfaces/ICraftSpiceToken.sol";

/// @title Blast Royale Token - Secondary Token
/// @dev Based on OpenZeppelin Contracts.
contract SecondaryToken is ERC20, ERC20Burnable, ICraftSpiceToken, EIP712, ERC20Pausable, AccessControl, ReentrancyGuard {
    using ECDSA for bytes32;

    bytes32 public constant MINTER_ROLE = keccak256("MINTER_ROLE");
    bytes32 public constant CSTOKEN_TYPEHASH = keccak256("CSToken(address account,uint256 amount,uint256 nonce,uint256 deadline)");

    address private signer;
    mapping(address => uint256) public nonces;

    event Claimed(address user, uint256 amount);

    /// @notice Token constructor
    /// @dev Creates the token and setup the initial supply and the Admin Role.
    /// @param name Name of the Token
    /// @param symbol Symbol of the token
    /// @param _initialSupply Initial Supply
    constructor(
        string memory name,
        string memory symbol,
        uint256 _initialSupply,
        address _signer
    ) ERC20(name, symbol) EIP712("CSToken", "1.0.0") {
        require(_signer != address(0));
        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());
        _setupRole(MINTER_ROLE, _msgSender());
        _mint(_msgSender(), _initialSupply);
        signer = _signer;
    }

    /// @notice Mint new tokens
    /// @param _amount Token Amount
    /// @param _deadline Deadline
    /// @param _signature Generated by admin
    function claimSelf(uint256 _amount, uint256 _deadline, bytes calldata _signature)
        external
        nonReentrant
    {
        require(
            block.timestamp <= _deadline,
            "CS:Signature expired"
        );
        require(_verify(_hash(_msgSender(), _amount, nonces[_msgSender()], _deadline), _signature), "CS:Invalid Signature in claiming");
        nonces[_msgSender()] ++;
        _mint(_msgSender(), _amount);

        emit Claimed(_msgSender(), _amount);
    }

    function _verify(bytes32 digest, bytes memory signature) internal view returns (bool)
    {
        return ECDSA.recover(digest, signature) == signer;
    }

    function _hash(address account, uint256 amount, uint256 nonce, uint256 deadline) internal view returns (bytes32)
    {
        return _hashTypedDataV4(keccak256(abi.encode(
            CSTOKEN_TYPEHASH,
            account,
            amount,
            nonce,
            deadline
        )));
    }

    function getMessageHash(address _to, uint256 _amount, uint256 _nonce, uint256 _deadline)
        internal
        pure
        returns (bytes32)
    {
        return keccak256(
            abi.encodePacked(
                _to,
                _amount,
                _nonce,
                _deadline
            )
        );
    }

    /// @notice Mint new tokens
    /// @param _to Target Address
    /// @param _amount Token Amount
    function claim(address _to, uint256 _amount)
        external
        override
        onlyRole(MINTER_ROLE)
    {
        _mint(_to, _amount);

        emit Claimed(_to, _amount);
    }

    function updateSigner(address _signer) external onlyRole(DEFAULT_ADMIN_ROLE) {
        require(_signer != address(0), "signer can't be zero");
        signer = _signer;
    }

    /// @notice Pauses the contract
    /// @dev It stops transfer from happening. Only Owner can call it.
    function pause() public virtual onlyRole(DEFAULT_ADMIN_ROLE) {
        _pause();
    }

    /// @notice Unpauses the contract
    /// @dev Transfers are possible again. Only Owner can call it.
    function unpause() public virtual onlyRole(DEFAULT_ADMIN_ROLE) {
        _unpause();
    }

    /// @notice Verifications before Token Transfer
    /// @param from Address from
    /// @param from to Address from
    /// @param amount tokens to be transferred
    function _beforeTokenTransfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual override(ERC20, ERC20Pausable) {
        super._beforeTokenTransfer(from, to, amount);
    }
}
