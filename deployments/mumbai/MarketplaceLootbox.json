{
  "address": "0xE1c87b5bB768EF48C8723900A0A32e7cf4EBD57f",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IBlastLootbox",
          "name": "lootboxAddress",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_merkleRoot",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_luckyMerkleRoot",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FailedToSendEther",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidMerkleProof",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoZeroPrice",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotAbleToAdd",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotAbleToBuy",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotActived",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotEnough",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotWhitelisted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReachedMaxLimit",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        }
      ],
      "name": "LootboxDelisted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "payTokenAddress",
          "type": "address"
        }
      ],
      "name": "LootboxListed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "whitelisted",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isLucky",
          "type": "bool"
        }
      ],
      "name": "LootboxSold",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "whitelists",
          "type": "address[]"
        }
      ],
      "name": "WhitelistAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "whitelists",
          "type": "address[]"
        }
      ],
      "name": "WhitelistRemoved",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "activeListingCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20",
          "name": "payTokenAddress",
          "type": "address"
        }
      ],
      "name": "addListing",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes32[]",
          "name": "_merkleProof",
          "type": "bytes32[]"
        }
      ],
      "name": "buy",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "_tokenType",
          "type": "uint8"
        }
      ],
      "name": "getOwnedCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "listings",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isActive",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "luckyMerkleRoot",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "merkleRoot",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "stop",
          "type": "bool"
        }
      ],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "removeListing",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_whitelist",
          "type": "address[]"
        }
      ],
      "name": "removeWhitelistTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "gwbLimit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nbLimit",
              "type": "uint256"
            }
          ],
          "internalType": "struct PurchaseLimit",
          "name": "_limit",
          "type": "tuple"
        }
      ],
      "name": "setNotWhitelistPurchaseLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "gwbLimit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nbLimit",
              "type": "uint256"
            }
          ],
          "internalType": "struct PurchaseLimit",
          "name": "_limit",
          "type": "tuple"
        }
      ],
      "name": "setWhitelistPurchaseLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_whitelist",
          "type": "address[]"
        }
      ],
      "name": "setWhitelistTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_luckyMerkleRoot",
          "type": "bytes32"
        }
      ],
      "name": "updateLuckyMerkleRoot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_merkleRoot",
          "type": "bytes32"
        }
      ],
      "name": "updateMerkleRoot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "whitelistedTokens",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x2313f0fe006ca5d5082ec9c840998574ad50ff6d3a33460fe54ea30d9ee48580",
  "receipt": {
    "to": null,
    "from": "0x7Ac410F4E36873022b57821D7a8EB3D7513C045a",
    "contractAddress": "0xE1c87b5bB768EF48C8723900A0A32e7cf4EBD57f",
    "transactionIndex": 42,
    "gasUsed": "1712201",
    "logsBloom": "0x
    "blockHash": "0xf5ca2b80d26822d90326db408b1da784ea740f5326accd2e4530562699f2ab8f",
    "transactionHash": "0x2313f0fe006ca5d5082ec9c840998574ad50ff6d3a33460fe54ea30d9ee48580",
    "logs": [
      {
        "transactionIndex": 42,
        "blockNumber": 28570186,
        "transactionHash": "0x2313f0fe006ca5d5082ec9c840998574ad50ff6d3a33460fe54ea30d9ee48580",
        "address": "0xE1c87b5bB768EF48C8723900A0A32e7cf4EBD57f",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000007ac410f4e36873022b57821d7a8eb3d7513c045a"
        ],
        "data": "0x",
        "logIndex": 204,
        "blockHash": "0xf5ca2b80d26822d90326db408b1da784ea740f5326accd2e4530562699f2ab8f"
      },
      {
        "transactionIndex": 42,
        "blockNumber": 28570186,
        "transactionHash": "0x2313f0fe006ca5d5082ec9c840998574ad50ff6d3a33460fe54ea30d9ee48580",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000007ac410f4e36873022b57821d7a8eb3d7513c045a",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x000000000000000000000000000000000000000000000000002722cdd9cba5bd000000000000000000000000000000000000000000000000188e5fb4279b05090000000000000000000000000000000000000000000026462e5a154469a474ce00000000000000000000000000000000000000000000000018673ce64dcf5f4c0000000000000000000000000000000000000000000026462e81381243701a8b",
        "logIndex": 205,
        "blockHash": "0xf5ca2b80d26822d90326db408b1da784ea740f5326accd2e4530562699f2ab8f"
      }
    ],
    "blockNumber": 28570186,
    "cumulativeGasUsed": "8050070",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xfABd37a5B1a83f31EAbE1BfB95Bf6bEDd1970CE2",
    "0x3078300000000000000000000000000000000000000000000000000000000000",
    "0x3078300000000000000000000000000000000000000000000000000000000000"
  ],
  "numDeployments": 1,
  "solcInputHash": "b7caf7116d2ec06d392c187715787bdb",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IBlastLootbox\",\"name\":\"lootboxAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_luckyMerkleRoot\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FailedToSendEther\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidMerkleProof\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoZeroPrice\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotAbleToAdd\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotAbleToBuy\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotActived\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnough\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotWhitelisted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReachedMaxLimit\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"}],\"name\":\"LootboxDelisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"payTokenAddress\",\"type\":\"address\"}],\"name\":\"LootboxListed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"whitelisted\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isLucky\",\"type\":\"bool\"}],\"name\":\"LootboxSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"whitelists\",\"type\":\"address[]\"}],\"name\":\"WhitelistAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"whitelists\",\"type\":\"address[]\"}],\"name\":\"WhitelistRemoved\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"activeListingCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"payTokenAddress\",\"type\":\"address\"}],\"name\":\"addListing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"_merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_tokenType\",\"type\":\"uint8\"}],\"name\":\"getOwnedCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"listings\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"luckyMerkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"merkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"stop\",\"type\":\"bool\"}],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"removeListing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_whitelist\",\"type\":\"address[]\"}],\"name\":\"removeWhitelistTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"gwbLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nbLimit\",\"type\":\"uint256\"}],\"internalType\":\"struct PurchaseLimit\",\"name\":\"_limit\",\"type\":\"tuple\"}],\"name\":\"setNotWhitelistPurchaseLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"gwbLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nbLimit\",\"type\":\"uint256\"}],\"internalType\":\"struct PurchaseLimit\",\"name\":\"_limit\",\"type\":\"tuple\"}],\"name\":\"setWhitelistPurchaseLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_whitelist\",\"type\":\"address[]\"}],\"name\":\"setWhitelistTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_luckyMerkleRoot\",\"type\":\"bytes32\"}],\"name\":\"updateLuckyMerkleRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_merkleRoot\",\"type\":\"bytes32\"}],\"name\":\"updateMerkleRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelistedTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Based on OpenZeppelin Contracts.\",\"kind\":\"dev\",\"methods\":{\"addListing(uint256[],uint256,address)\":{\"details\":\"Creates a new entry for a Listing object and transfers the Token to the contract\",\"params\":{\"price\":\"Price in NFTs.\",\"tokenIds\":\"NFT TokenId.\"}},\"buy(uint256,bytes32[])\":{\"details\":\"Transfers both the ERC20 token (price) and the NFT.\",\"params\":{\"_merkleProof\":\"MerkleProof value\",\"_tokenId\":\"NFT Token Id.\"}},\"constructor\":{\"details\":\"Setup the blastlootbox contract\",\"params\":{\"lootboxAddress\":\"Address of the NFT Contract.\"}},\"getOwnedCount(address,uint8)\":{\"details\":\"This function will return purchased count with tokenType\",\"params\":{\"_address\":\"owner Address\",\"_tokenType\":\"Token Type (1 or 2), (1 is NB, 2 is GWB)\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"removeListing(uint256)\":{\"details\":\"Marks Listing as not active object and transfers the Token back\",\"params\":{\"tokenId\":\"NFT Token Id.\"}},\"removeWhitelistTokens(address[])\":{\"details\":\"This will remove whitelisting of stable token for Lootbox trading\",\"params\":{\"_whitelist\":\"whitelist erc20 token array\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setNotWhitelistPurchaseLimit((uint256,uint256))\":{\"details\":\"This will set non-whitelist users limitation for GWB and NB\",\"params\":{\"_limit\":\"gwbLimit & nbLimit\"}},\"setWhitelistPurchaseLimit((uint256,uint256))\":{\"details\":\"This will set whitelist users limitation for GWB and NB\",\"params\":{\"_limit\":\"gwbLimit & nbLimit\"}},\"setWhitelistTokens(address[])\":{\"details\":\"This will create whitelisting of stable token for Lootbox trading\",\"params\":{\"_whitelist\":\"whitelist erc20 token array\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateLuckyMerkleRoot(bytes32)\":{\"details\":\"This function will update _luckyMerkleRoot\",\"params\":{\"_luckyMerkleRoot\":\"root of merkle Tree\"}},\"updateMerkleRoot(bytes32)\":{\"details\":\"This function will update merkleRoot\",\"params\":{\"_merkleRoot\":\"root of merkle Tree\"}}},\"title\":\"Marketplace contract to trade Lootbox\",\"version\":1},\"userdoc\":{\"events\":{\"LootboxDelisted(uint256,address)\":{\"notice\":\"Event Delisted\"},\"LootboxListed(uint256,address,uint256,address)\":{\"notice\":\"Event Listed\"},\"LootboxSold(uint256,address,address,uint256,bool,bool)\":{\"notice\":\"EventItem Sold\"}},\"kind\":\"user\",\"methods\":{\"addListing(uint256[],uint256,address)\":{\"notice\":\"add a Listing to the Marketplace\"},\"buy(uint256,bytes32[])\":{\"notice\":\"Buys a listed NFT\"},\"constructor\":{\"notice\":\"Token constructor\"},\"getOwnedCount(address,uint8)\":{\"notice\":\"Get purchased count\"},\"removeListing(uint256)\":{\"notice\":\"Remove a Listing from the Marketplace\"},\"removeWhitelistTokens(address[])\":{\"notice\":\"Remove whitelist tokens for paying\"},\"setNotWhitelistPurchaseLimit((uint256,uint256))\":{\"notice\":\"Set the limitation for whitelisted and lucky users\"},\"setWhitelistPurchaseLimit((uint256,uint256))\":{\"notice\":\"Set the limitation for whitelist users\"},\"setWhitelistTokens(address[])\":{\"notice\":\"Set whitelist tokens for paying\"},\"updateLuckyMerkleRoot(bytes32)\":{\"notice\":\"Update LuckyMerkleRoot value\"},\"updateMerkleRoot(bytes32)\":{\"notice\":\"Update MerkleRoot value\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MarketplaceLootbox.sol\":\"MarketplaceLootbox\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x0849d93b16c9940beb286a7864ed02724b248b93e0d80ef6355af5ef15c64773\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {verify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function verifyCalldata(\\n        bytes32[] calldata proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProofCalldata(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be proved to be a part of a Merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {multiProofVerify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and the sibling nodes in `proof`,\\n     * consuming from one or the other at each step according to the instructions given by\\n     * `proofFlags`.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processMultiProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x596ed72a251d391b814a4aa19d7acb02ebdcc92ba27d3fff74a6f0c158b12ab7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/MarketplaceLootbox.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\nimport \\\"./interfaces/IBlastLootbox.sol\\\";\\n\\nerror NoZeroAddress();\\nerror NoZeroPrice();\\nerror NotOwner();\\nerror NotActived();\\nerror InvalidParam();\\nerror ReachedMaxLimit();\\nerror NotEnough();\\nerror NotAbleToAdd();\\nerror NotAbleToBuy();\\nerror NotWhitelisted();\\nerror InvalidMerkleProof();\\nerror FailedToSendEther();\\nerror StartTimeInvalid();\\n\\nstruct Listing {\\n    address owner;\\n    bool isActive;\\n    uint256 tokenId;\\n    uint256 price;\\n    IERC20 tokenAddress;\\n}\\n\\nstruct PurchaseLimit {\\n    uint256 gwbLimit;\\n    uint256 nbLimit;\\n}\\n\\n/// @title Marketplace contract to trade Lootbox\\n/// @dev Based on OpenZeppelin Contracts.\\ncontract MarketplaceLootbox is ReentrancyGuard, Ownable, Pausable {\\n    using SafeERC20 for IERC20;\\n\\n    bytes32 public merkleRoot;\\n    bytes32 public luckyMerkleRoot;\\n\\n    PurchaseLimit private whitelistLimit;\\n    PurchaseLimit private luckyUserLimit;\\n    uint256 public activeListingCount;\\n\\n    mapping(address => bool) public whitelistedTokens;\\n    mapping(uint256 => Listing) public listings;\\n    // user => tokenType => count\\n    mapping(address => mapping(uint8 => uint256)) private boughtCount;\\n    IBlastLootbox private lootboxContract;\\n\\n    /// @notice Event Listed\\n    event LootboxListed(\\n        uint256 tokenId,\\n        address seller,\\n        uint256 price,\\n        address payTokenAddress\\n    );\\n\\n    /// @notice Event Delisted\\n    event LootboxDelisted(uint256 tokenId, address seller);\\n\\n    /// @notice EventItem Sold\\n    event LootboxSold(\\n        uint256 tokenId,\\n        address seller,\\n        address buyer,\\n        uint256 price,\\n        bool whitelisted,\\n        bool isLucky\\n    );\\n\\n    event WhitelistAdded(address[] whitelists);\\n\\n    event WhitelistRemoved(address[] whitelists);\\n\\n    /// @notice Token constructor\\n    /// @dev Setup the blastlootbox contract\\n    /// @param lootboxAddress Address of the NFT Contract.\\n    constructor(\\n        IBlastLootbox lootboxAddress,\\n        bytes32 _merkleRoot,\\n        bytes32 _luckyMerkleRoot\\n    ) {\\n        if (address(lootboxAddress) == address(0)) revert NoZeroAddress();\\n        lootboxContract = lootboxAddress;\\n        merkleRoot = _merkleRoot;\\n        luckyMerkleRoot = _luckyMerkleRoot;\\n\\n        whitelistLimit = PurchaseLimit({gwbLimit: 0, nbLimit: 1});\\n        luckyUserLimit = PurchaseLimit({gwbLimit: 1, nbLimit: 0});\\n    }\\n\\n    /// @notice add a Listing to the Marketplace\\n    /// @dev Creates a new entry for a Listing object and transfers the Token to the contract\\n    /// @param tokenIds NFT TokenId.\\n    /// @param price Price in NFTs.\\n    function addListing(\\n        uint256[] memory tokenIds,\\n        uint256 price,\\n        IERC20 payTokenAddress\\n    ) public onlyOwner nonReentrant whenNotPaused {\\n        if (price == 0) revert NoZeroPrice();\\n        if (address(payTokenAddress) != address(0)) {\\n            if (!whitelistedTokens[address(payTokenAddress)])\\n                revert NotWhitelisted();\\n        }\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            if (listings[tokenIds[i]].isActive)\\n                revert NotAbleToAdd();\\n        }\\n\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            uint256 tokenId = tokenIds[i];\\n            listings[tokenId] = Listing({\\n                owner: _msgSender(),\\n                isActive: true,\\n                tokenId: tokenId,\\n                price: price,\\n                tokenAddress: payTokenAddress\\n            });\\n            activeListingCount = activeListingCount + 1;\\n            lootboxContract.transferFrom(_msgSender(), address(this), tokenId);\\n\\n            emit LootboxListed(\\n                tokenId,\\n                _msgSender(),\\n                price,\\n                address(payTokenAddress)\\n            );\\n        }\\n    }\\n\\n    /// @notice Remove a Listing from the Marketplace\\n    /// @dev Marks Listing as not active object and transfers the Token back\\n    /// @param tokenId NFT Token Id.\\n    function removeListing(uint256 tokenId)\\n        public\\n        onlyOwner\\n        nonReentrant\\n        whenNotPaused\\n    {\\n        Listing storage listing = listings[tokenId];\\n        if (listing.owner != _msgSender()) revert NotOwner();\\n        if (!listing.isActive) revert NotActived();\\n        listing.isActive = false;\\n        lootboxContract.transferFrom(address(this), _msgSender(), tokenId);\\n        activeListingCount = activeListingCount - 1;\\n        emit LootboxDelisted(listing.tokenId, _msgSender());\\n    }\\n\\n    /// @notice Buys a listed NFT\\n    /// @dev Transfers both the ERC20 token (price) and the NFT.\\n    /// @param _tokenId NFT Token Id.\\n    /// @param _merkleProof MerkleProof value\\n    function buy(uint256 _tokenId, bytes32[] calldata _merkleProof)\\n        external\\n        payable\\n        nonReentrant\\n        whenNotPaused\\n    {\\n        uint8 tokenType = lootboxContract.getTokenType(_tokenId);\\n        if (tokenType == 0) revert NotAbleToBuy();\\n        if (!listings[_tokenId].isActive) revert NotActived();\\n\\n        bool userWhitelisted = MerkleProof.verify(\\n            _merkleProof,\\n            merkleRoot,\\n            keccak256(abi.encodePacked(_msgSender()))\\n        );\\n        bool isLuckyUser = MerkleProof.verify(\\n            _merkleProof,\\n            luckyMerkleRoot,\\n            keccak256(abi.encodePacked(_msgSender()))\\n        );\\n        if (userWhitelisted) {\\n            if (\\n                boughtCount[_msgSender()][tokenType] >=\\n                getLimit(tokenType, true)\\n            ) revert ReachedMaxLimit();\\n        } else if (isLuckyUser) {\\n            if (\\n                boughtCount[_msgSender()][tokenType] >=\\n                getLimit(tokenType, false)\\n            ) revert ReachedMaxLimit();\\n        } else {\\n            revert InvalidMerkleProof();\\n        }\\n\\n        boughtCount[_msgSender()][tokenType] += 1;\\n        listings[_tokenId].isActive = false;\\n        IERC20 payTokenAddress = listings[_tokenId].tokenAddress;\\n\\n        if (address(payTokenAddress) == address(0)) {\\n            if (msg.value != listings[_tokenId].price) revert NotEnough();\\n            (bool sent, ) = payable(listings[_tokenId].owner).call{\\n                value: msg.value\\n            }(\\\"\\\");\\n            if (!sent) revert FailedToSendEther();\\n        } else {\\n            require(msg.value == 0, \\\"Not allowed to deposit MATIC\\\");\\n            payTokenAddress.safeTransferFrom(\\n                _msgSender(),\\n                listings[_tokenId].owner,\\n                listings[_tokenId].price\\n            );\\n        }\\n        lootboxContract.transferFrom(address(this), _msgSender(), _tokenId);\\n\\n        activeListingCount = activeListingCount - 1;\\n\\n        emit LootboxSold(\\n            listings[_tokenId].tokenId,\\n            listings[_tokenId].owner,\\n            _msgSender(),\\n            listings[_tokenId].price,\\n            userWhitelisted,\\n            isLuckyUser\\n        );\\n    }\\n\\n    /// @notice Get purchased count\\n    /// @dev This function will return purchased count with tokenType\\n    /// @param _address owner Address\\n    /// @param _tokenType Token Type (1 or 2), (1 is NB, 2 is GWB)\\n    function getOwnedCount(address _address, uint8 _tokenType)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return boughtCount[_address][_tokenType];\\n    }\\n\\n    /// @notice Get limitation value\\n    /// @dev This function will return limit value whether whitelisted or not and tokenType\\n    /// @param _tokenType Token Type (1 or 2), (1 is NB, 2 is GWB)\\n    /// @param _whitelist Whitelist or not\\n    function getLimit(uint256 _tokenType, bool _whitelist)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        if (_tokenType == 1) {\\n            if (_whitelist) {\\n                return whitelistLimit.nbLimit;\\n            } else {\\n                return luckyUserLimit.nbLimit;\\n            }\\n        } else if (_tokenType == 2) {\\n            if (_whitelist) {\\n                return whitelistLimit.gwbLimit;\\n            } else {\\n                return luckyUserLimit.gwbLimit;\\n            }\\n        }\\n        return 0;\\n    }\\n\\n    /// @notice Update MerkleRoot value\\n    /// @dev This function will update merkleRoot\\n    /// @param _merkleRoot root of merkle Tree\\n    function updateMerkleRoot(bytes32 _merkleRoot) external onlyOwner {\\n        merkleRoot = _merkleRoot;\\n    }\\n\\n    /// @notice Update LuckyMerkleRoot value\\n    /// @dev This function will update _luckyMerkleRoot\\n    /// @param _luckyMerkleRoot root of merkle Tree\\n    function updateLuckyMerkleRoot(bytes32 _luckyMerkleRoot)\\n        external\\n        onlyOwner\\n    {\\n        luckyMerkleRoot = _luckyMerkleRoot;\\n    }\\n\\n    /// @notice Set the limitation for whitelist users\\n    /// @dev This will set whitelist users limitation for GWB and NB\\n    /// @param _limit gwbLimit & nbLimit\\n    function setWhitelistPurchaseLimit(PurchaseLimit memory _limit)\\n        external\\n        onlyOwner\\n    {\\n        whitelistLimit = _limit;\\n    }\\n\\n    /// @notice Set the limitation for whitelisted and lucky users\\n    /// @dev This will set non-whitelist users limitation for GWB and NB\\n    /// @param _limit gwbLimit & nbLimit\\n    function setNotWhitelistPurchaseLimit(PurchaseLimit memory _limit)\\n        external\\n        onlyOwner\\n    {\\n        luckyUserLimit = _limit;\\n    }\\n\\n    /// @notice Set whitelist tokens for paying\\n    /// @dev This will create whitelisting of stable token for Lootbox trading\\n    /// @param _whitelist whitelist erc20 token array\\n    function setWhitelistTokens(address[] memory _whitelist)\\n        external\\n        onlyOwner\\n    {\\n        for (uint256 i = 0; i < _whitelist.length; i++) {\\n            if (_whitelist[i] == address(0)) revert NoZeroAddress();\\n            whitelistedTokens[_whitelist[i]] = true;\\n        }\\n\\n        emit WhitelistAdded(_whitelist);\\n    }\\n\\n    /// @notice Remove whitelist tokens for paying\\n    /// @dev This will remove whitelisting of stable token for Lootbox trading\\n    /// @param _whitelist whitelist erc20 token array\\n    function removeWhitelistTokens(address[] memory _whitelist)\\n        external\\n        onlyOwner\\n    {\\n        for (uint256 i = 0; i < _whitelist.length; i++) {\\n            if (_whitelist[i] == address(0)) revert NoZeroAddress();\\n            whitelistedTokens[_whitelist[i]] = false;\\n        }\\n\\n        emit WhitelistRemoved(_whitelist);\\n    }\\n\\n    // @notice Pauses/Unpauses the contract\\n    // @dev While paused, addListing, and buy are not allowed\\n    // @param stop whether to pause or unpause the contract.\\n    function pause(bool stop) external onlyOwner {\\n        if (stop) {\\n            _pause();\\n        } else {\\n            _unpause();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf26a64815f5a2bbed5b32d8aa291169022ef1b5b0e0499ecce485042af3291dc\",\"license\":\"MIT\"},\"contracts/interfaces/IBlastLootbox.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\n/**\\n * @dev required interface of an Lootbox NFT.\\n */\\ninterface IBlastLootbox is IERC721 {\\n    event Open(uint lootboxId, uint token0, uint token1, uint token2);\\n\\n    function getTokenType(uint _tokenId) external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xd3720dd7a36458ff503187244c87782a72dc814e3d10c3876d409d4b35731573\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x60806040526004361061011f5760003560e01c8063b25706f3116100a0578063daf9c21011610064578063daf9c210146102f6578063de74e57b14610326578063ec6b5a8a146103b2578063ee5cf8b2146103d2578063f2fde38b146103f257600080fd5b8063b25706f314610260578063b948ecb914610280578063c077db17146102a0578063cf49e50a146102b6578063cfd6fb93146102d657600080fd5b8063479ad4c3116100e7578063479ad4c3146101c55780635a19b4db146101e55780635c975abb146101f8578063715018a6146102235780638da5cb5b1461023857600080fd5b806302329a29146101245780630744bbd8146101465780632eb4a7ab146101665780634681a7c61461018f5780634783f0ef146101a5575b600080fd5b34801561013057600080fd5b5061014461013f3660046115ba565b610412565b005b34801561015257600080fd5b5061014461016136600461161e565b610433565b34801561017257600080fd5b5061017c60025481565b6040519081526020015b60405180910390f35b34801561019b57600080fd5b5061017c60085481565b3480156101b157600080fd5b506101446101c036600461166d565b610449565b3480156101d157600080fd5b506101446101e036600461166d565b610456565b6101446101f3366004611686565b6105c0565b34801561020457600080fd5b50600154600160a01b900460ff165b6040519015158152602001610186565b34801561022f57600080fd5b50610144610aa1565b34801561024457600080fd5b506001546040516001600160a01b039091168152602001610186565b34801561026c57600080fd5b5061014461027b36600461173e565b610ab5565b34801561028c57600080fd5b5061014461029b36600461166d565b610bad565b3480156102ac57600080fd5b5061017c60035481565b3480156102c257600080fd5b506101446102d136600461173e565b610bba565b3480156102e257600080fd5b506101446102f136600461161e565b610ca7565b34801561030257600080fd5b506102136103113660046117d2565b60096020526000908152604090205460ff1681565b34801561033257600080fd5b5061037e61034136600461166d565b600a6020526000908152604090208054600182015460028301546003909301546001600160a01b0380841694600160a01b90940460ff1693911685565b604080516001600160a01b03968716815294151560208601528401929092526060830152909116608082015260a001610186565b3480156103be57600080fd5b506101446103cd3660046117ff565b610cbd565b3480156103de57600080fd5b5061017c6103ed3660046118b8565b610f8f565b3480156103fe57600080fd5b5061014461040d3660046117d2565b610fbd565b61041a611033565b801561042b5761042861108d565b50565b6104286110ed565b61043b611033565b805160045560200151600555565b610451611033565b600255565b61045e611033565b6002600054141561048a5760405162461bcd60e51b8152600401610481906118f1565b60405180910390fd5b6002600055610497611129565b6000818152600a6020526040902080546001600160a01b031633146104cf576040516330cd747160e01b815260040160405180910390fd5b8054600160a01b900460ff166104f85760405163631843a760e11b815260040160405180910390fd5b805460ff60a01b19168155600c546001600160a01b03166323b872dd3033856040518463ffffffff1660e01b815260040161053593929190611928565b600060405180830381600087803b15801561054f57600080fd5b505af1158015610563573d6000803e3d6000fd5b5050505060016008546105769190611962565b60085560018101546040805191825233602083015280517f438e264f935ed95b27ce329685e71e429fb44580d4a578132274855417d0091e9281900390910190a150506001600055565b600260005414156105e35760405162461bcd60e51b8152600401610481906118f1565b60026000556105f0611129565b600c546040516376aed2e160e01b8152600481018590526000916001600160a01b0316906376aed2e19060240160206040518083038186803b15801561063557600080fd5b505afa158015610649573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061066d9190611979565b905060ff811661069057604051633a043ca760e21b815260040160405180910390fd5b6000848152600a6020526040902054600160a01b900460ff166106c65760405163631843a760e11b815260040160405180910390fd5b60006107488484808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152505060025491503390505b60405160200161072d919060609190911b6bffffffffffffffffffffffff1916815260140190565b60405160208183030381529060405280519060200120611176565b9050600061078d858580806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250506003549150339050610705565b905081156107e4576107a38360ff16600161118e565b336000908152600b6020908152604080832060ff88168452909152902054106107df576040516339db9f3160e01b815260040160405180910390fd5b610811565b80156107f8576107a38360ff16600061118e565b60405163582f497d60e11b815260040160405180910390fd5b336000908152600b6020908152604080832060ff87168452909152812080546001929061083f908490611996565b90915550506000868152600a60205260409020805460ff60a01b19168155600301546001600160a01b031680610925576000878152600a602052604090206002015434146108a05760405163342ccafd60e21b815260040160405180910390fd5b6000878152600a60205260408082205490516001600160a01b039091169034908381818185875af1925050503d80600081146108f8576040519150601f19603f3d011682016040523d82523d6000602084013e6108fd565b606091505b505090508061091f57604051630dcf35db60e41b815260040160405180910390fd5b506109a1565b34156109735760405162461bcd60e51b815260206004820152601c60248201527f4e6f7420616c6c6f77656420746f206465706f736974204d41544943000000006044820152606401610481565b6109a1336000898152600a6020526040902080546002909101546001600160a01b03858116939216906111db565b600c546001600160a01b03166323b872dd30338a6040518463ffffffff1660e01b81526004016109d393929190611928565b600060405180830381600087803b1580156109ed57600080fd5b505af1158015610a01573d6000803e3d6000fd5b505050506001600854610a149190611962565b6008556000878152600a60209081526040918290206001810154815460029092015484519182526001600160a01b039092169281019290925233828401526060820152841515608082015283151560a082015290517f996f8e6633112c7506949c439286fcb2791b23e0c93ccd86f2a74bc0ad0775aa9181900360c00190a1505060016000555050505050565b610aa9611033565b610ab36000611239565b565b610abd611033565b60005b8151811015610b725760006001600160a01b0316828281518110610ae657610ae66119ae565b60200260200101516001600160a01b03161415610b165760405163ddbadd5f60e01b815260040160405180910390fd5b600060096000848481518110610b2e57610b2e6119ae565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff191691151591909117905580610b6a816119c4565b915050610ac0565b507f1d474f57a5c483b47a8bf6006e39086f96dd040a00cb348e22f80a4ca2c6f22281604051610ba291906119df565b60405180910390a150565b610bb5611033565b600355565b610bc2611033565b60005b8151811015610c775760006001600160a01b0316828281518110610beb57610beb6119ae565b60200260200101516001600160a01b03161415610c1b5760405163ddbadd5f60e01b815260040160405180910390fd5b600160096000848481518110610c3357610c336119ae565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff191691151591909117905580610c6f816119c4565b915050610bc5565b507ff74f148a4f930a0f67a2c33ba932a14e3e91b4e6468f21e545932fd82511153881604051610ba291906119df565b610caf611033565b805160065560200151600755565b610cc5611033565b60026000541415610ce85760405162461bcd60e51b8152600401610481906118f1565b6002600055610cf5611129565b81610d1357604051636aa5f95d60e11b815260040160405180910390fd5b6001600160a01b03811615610d5b576001600160a01b03811660009081526009602052604090205460ff16610d5b57604051630b094f2760e31b815260040160405180910390fd5b60005b8351811015610dd457600a6000858381518110610d7d57610d7d6119ae565b6020026020010151815260200190815260200160002060000160149054906101000a900460ff1615610dc2576040516333c553b360e01b815260040160405180910390fd5b80610dcc816119c4565b915050610d5e565b5060005b8351811015610f84576000848281518110610df557610df56119ae565b602002602001015190506040518060a00160405280610e113390565b6001600160a01b03908116825260016020808401829052604080850187905260608086018b90528985166080968701526000888152600a845282902087518154948901511515600160a01b026001600160a81b03199095169087161793909317835590860151828401558501516002820155939092015160039093018054939091166001600160a01b03199390931692909217909155600854610eb391611996565b600855600c546001600160a01b03166323b872dd3330846040518463ffffffff1660e01b8152600401610ee893929190611928565b600060405180830381600087803b158015610f0257600080fd5b505af1158015610f16573d6000803e3d6000fd5b505050507f37b7b092d2bfe326e3d50aba074399c185daa05a83d2c17fb19bbeb4640f41b381610f433390565b604080519283526001600160a01b03918216602084015282018790528516606082015260800160405180910390a15080610f7c816119c4565b915050610dd8565b505060016000555050565b6001600160a01b0382166000908152600b6020908152604080832060ff851684529091529020545b92915050565b610fc5611033565b6001600160a01b03811661102a5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610481565b61042881611239565b6001546001600160a01b03163314610ab35760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610481565b611095611129565b6001805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586110d03390565b6040516001600160a01b03909116815260200160405180910390a1565b6110f561128b565b6001805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa336110d0565b600154600160a01b900460ff1615610ab35760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610481565b60008261118385846112db565b1490505b9392505050565b600082600114156111b15781156111a85750600554610fb7565b50600754610fb7565b82600214156111d25781156111c95750600454610fb7565b50600654610fb7565b50600092915050565b611233846323b872dd60e01b8585856040516024016111fc93929190611928565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611328565b50505050565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600154600160a01b900460ff16610ab35760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610481565b600081815b84518110156113205761130c828683815181106112ff576112ff6119ae565b60200260200101516113ff565b915080611318816119c4565b9150506112e0565b509392505050565b600061137d826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661142b9092919063ffffffff16565b8051909150156113fa578080602001905181019061139b9190611a2c565b6113fa5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610481565b505050565b600081831061141b576000828152602084905260409020611187565b5060009182526020526040902090565b606061143a8484600085611442565b949350505050565b6060824710156114a35760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610481565b6001600160a01b0385163b6114fa5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610481565b600080866001600160a01b031685876040516115169190611a75565b60006040518083038185875af1925050503d8060008114611553576040519150601f19603f3d011682016040523d82523d6000602084013e611558565b606091505b5091509150611568828286611573565b979650505050505050565b60608315611582575081611187565b8251156115925782518084602001fd5b8160405162461bcd60e51b81526004016104819190611a91565b801515811461042857600080fd5b6000602082840312156115cc57600080fd5b8135611187816115ac565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715611616576116166115d7565b604052919050565b60006040828403121561163057600080fd5b6040516040810181811067ffffffffffffffff82111715611653576116536115d7565b604052823581526020928301359281019290925250919050565b60006020828403121561167f57600080fd5b5035919050565b60008060006040848603121561169b57600080fd5b83359250602084013567ffffffffffffffff808211156116ba57600080fd5b818601915086601f8301126116ce57600080fd5b8135818111156116dd57600080fd5b8760208260051b85010111156116f257600080fd5b6020830194508093505050509250925092565b600067ffffffffffffffff82111561171f5761171f6115d7565b5060051b60200190565b6001600160a01b038116811461042857600080fd5b6000602080838503121561175157600080fd5b823567ffffffffffffffff81111561176857600080fd5b8301601f8101851361177957600080fd5b803561178c61178782611705565b6115ed565b81815260059190911b820183019083810190878311156117ab57600080fd5b928401925b828410156115685783356117c381611729565b825292840192908401906117b0565b6000602082840312156117e457600080fd5b813561118781611729565b80356117fa81611729565b919050565b60008060006060848603121561181457600080fd5b833567ffffffffffffffff81111561182b57600080fd5b8401601f8101861361183c57600080fd5b8035602061184c61178783611705565b82815260059290921b8301810191818101908984111561186b57600080fd5b938201935b8385101561188957843582529382019390820190611870565b96505086013593506118a0915050604085016117ef565b90509250925092565b60ff8116811461042857600080fd5b600080604083850312156118cb57600080fd5b82356118d681611729565b915060208301356118e6816118a9565b809150509250929050565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b634e487b7160e01b600052601160045260246000fd5b6000828210156119745761197461194c565b500390565b60006020828403121561198b57600080fd5b8151611187816118a9565b600082198211156119a9576119a961194c565b500190565b634e487b7160e01b600052603260045260246000fd5b60006000198214156119d8576119d861194c565b5060010190565b6020808252825182820181905260009190848201906040850190845b81811015611a205783516001600160a01b0316835292840192918401916001016119fb565b50909695505050505050565b600060208284031215611a3e57600080fd5b8151611187816115ac565b60005b83811015611a64578181015183820152602001611a4c565b838111156112335750506000910152565b60008251611a87818460208701611a49565b9190910192915050565b6020815260008251806020840152611ab0816040850160208701611a49565b601f01601f1916919091016040019291505056fea26469706673582212204df125f8cca70a0c2a478cf1526ebf7979b9e7aabbe20f54384962c6d4117a8b64736f6c63430008090033",
  "devdoc": {
    "details": "Based on OpenZeppelin Contracts.",
    "kind": "dev",
    "methods": {
      "addListing(uint256[],uint256,address)": {
        "details": "Creates a new entry for a Listing object and transfers the Token to the contract",
        "params": {
          "price": "Price in NFTs.",
          "tokenIds": "NFT TokenId."
        }
      },
      "buy(uint256,bytes32[])": {
        "details": "Transfers both the ERC20 token (price) and the NFT.",
        "params": {
          "_merkleProof": "MerkleProof value",
          "_tokenId": "NFT Token Id."
        }
      },
      "constructor": {
        "details": "Setup the blastlootbox contract",
        "params": {
          "lootboxAddress": "Address of the NFT Contract."
        }
      },
      "getOwnedCount(address,uint8)": {
        "details": "This function will return purchased count with tokenType",
        "params": {
          "_address": "owner Address",
          "_tokenType": "Token Type (1 or 2), (1 is NB, 2 is GWB)"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "removeListing(uint256)": {
        "details": "Marks Listing as not active object and transfers the Token back",
        "params": {
          "tokenId": "NFT Token Id."
        }
      },
      "removeWhitelistTokens(address[])": {
        "details": "This will remove whitelisting of stable token for Lootbox trading",
        "params": {
          "_whitelist": "whitelist erc20 token array"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setNotWhitelistPurchaseLimit((uint256,uint256))": {
        "details": "This will set non-whitelist users limitation for GWB and NB",
        "params": {
          "_limit": "gwbLimit & nbLimit"
        }
      },
      "setWhitelistPurchaseLimit((uint256,uint256))": {
        "details": "This will set whitelist users limitation for GWB and NB",
        "params": {
          "_limit": "gwbLimit & nbLimit"
        }
      },
      "setWhitelistTokens(address[])": {
        "details": "This will create whitelisting of stable token for Lootbox trading",
        "params": {
          "_whitelist": "whitelist erc20 token array"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateLuckyMerkleRoot(bytes32)": {
        "details": "This function will update _luckyMerkleRoot",
        "params": {
          "_luckyMerkleRoot": "root of merkle Tree"
        }
      },
      "updateMerkleRoot(bytes32)": {
        "details": "This function will update merkleRoot",
        "params": {
          "_merkleRoot": "root of merkle Tree"
        }
      }
    },
    "title": "Marketplace contract to trade Lootbox",
    "version": 1
  },
  "userdoc": {
    "events": {
      "LootboxDelisted(uint256,address)": {
        "notice": "Event Delisted"
      },
      "LootboxListed(uint256,address,uint256,address)": {
        "notice": "Event Listed"
      },
      "LootboxSold(uint256,address,address,uint256,bool,bool)": {
        "notice": "EventItem Sold"
      }
    },
    "kind": "user",
    "methods": {
      "addListing(uint256[],uint256,address)": {
        "notice": "add a Listing to the Marketplace"
      },
      "buy(uint256,bytes32[])": {
        "notice": "Buys a listed NFT"
      },
      "constructor": {
        "notice": "Token constructor"
      },
      "getOwnedCount(address,uint8)": {
        "notice": "Get purchased count"
      },
      "removeListing(uint256)": {
        "notice": "Remove a Listing from the Marketplace"
      },
      "removeWhitelistTokens(address[])": {
        "notice": "Remove whitelist tokens for paying"
      },
      "setNotWhitelistPurchaseLimit((uint256,uint256))": {
        "notice": "Set the limitation for whitelisted and lucky users"
      },
      "setWhitelistPurchaseLimit((uint256,uint256))": {
        "notice": "Set the limitation for whitelist users"
      },
      "setWhitelistTokens(address[])": {
        "notice": "Set whitelist tokens for paying"
      },
      "updateLuckyMerkleRoot(bytes32)": {
        "notice": "Update LuckyMerkleRoot value"
      },
      "updateMerkleRoot(bytes32)": {
        "notice": "Update MerkleRoot value"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 670,
        "contract": "contracts/MarketplaceLootbox.sol:MarketplaceLootbox",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 446,
        "contract": "contracts/MarketplaceLootbox.sol:MarketplaceLootbox",
        "label": "_owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 569,
        "contract": "contracts/MarketplaceLootbox.sol:MarketplaceLootbox",
        "label": "_paused",
        "offset": 20,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 9340,
        "contract": "contracts/MarketplaceLootbox.sol:MarketplaceLootbox",
        "label": "merkleRoot",
        "offset": 0,
        "slot": "2",
        "type": "t_bytes32"
      },
      {
        "astId": 9342,
        "contract": "contracts/MarketplaceLootbox.sol:MarketplaceLootbox",
        "label": "luckyMerkleRoot",
        "offset": 0,
        "slot": "3",
        "type": "t_bytes32"
      },
      {
        "astId": 9345,
        "contract": "contracts/MarketplaceLootbox.sol:MarketplaceLootbox",
        "label": "whitelistLimit",
        "offset": 0,
        "slot": "4",
        "type": "t_struct(PurchaseLimit)9327_storage"
      },
      {
        "astId": 9348,
        "contract": "contracts/MarketplaceLootbox.sol:MarketplaceLootbox",
        "label": "luckyUserLimit",
        "offset": 0,
        "slot": "6",
        "type": "t_struct(PurchaseLimit)9327_storage"
      },
      {
        "astId": 9350,
        "contract": "contracts/MarketplaceLootbox.sol:MarketplaceLootbox",
        "label": "activeListingCount",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 9354,
        "contract": "contracts/MarketplaceLootbox.sol:MarketplaceLootbox",
        "label": "whitelistedTokens",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 9359,
        "contract": "contracts/MarketplaceLootbox.sol:MarketplaceLootbox",
        "label": "listings",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_struct(Listing)9322_storage)"
      },
      {
        "astId": 9365,
        "contract": "contracts/MarketplaceLootbox.sol:MarketplaceLootbox",
        "label": "boughtCount",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_mapping(t_uint8,t_uint256))"
      },
      {
        "astId": 9368,
        "contract": "contracts/MarketplaceLootbox.sol:MarketplaceLootbox",
        "label": "lootboxContract",
        "offset": 0,
        "slot": "12",
        "type": "t_contract(IBlastLootbox)15273"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IBlastLootbox)15273": {
        "encoding": "inplace",
        "label": "contract IBlastLootbox",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)1363": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_uint8,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint8 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint8,t_uint256)"
      },
      "t_mapping(t_uint256,t_struct(Listing)9322_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Listing)",
        "numberOfBytes": "32",
        "value": "t_struct(Listing)9322_storage"
      },
      "t_mapping(t_uint8,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Listing)9322_storage": {
        "encoding": "inplace",
        "label": "struct Listing",
        "members": [
          {
            "astId": 9312,
            "contract": "contracts/MarketplaceLootbox.sol:MarketplaceLootbox",
            "label": "owner",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 9314,
            "contract": "contracts/MarketplaceLootbox.sol:MarketplaceLootbox",
            "label": "isActive",
            "offset": 20,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 9316,
            "contract": "contracts/MarketplaceLootbox.sol:MarketplaceLootbox",
            "label": "tokenId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 9318,
            "contract": "contracts/MarketplaceLootbox.sol:MarketplaceLootbox",
            "label": "price",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 9321,
            "contract": "contracts/MarketplaceLootbox.sol:MarketplaceLootbox",
            "label": "tokenAddress",
            "offset": 0,
            "slot": "3",
            "type": "t_contract(IERC20)1363"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(PurchaseLimit)9327_storage": {
        "encoding": "inplace",
        "label": "struct PurchaseLimit",
        "members": [
          {
            "astId": 9324,
            "contract": "contracts/MarketplaceLootbox.sol:MarketplaceLootbox",
            "label": "gwbLimit",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 9326,
            "contract": "contracts/MarketplaceLootbox.sol:MarketplaceLootbox",
            "label": "nbLimit",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}