{
  "address": "0x6a062edB6008D02699BfB354C6BB4eb4B52B77a4",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "locker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenContract",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "ERC1155Locked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "burner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenContract",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "ERC721Burnt",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "withdrawer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenContract",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "NFTWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenContract",
          "type": "address"
        }
      ],
      "name": "WhitelistedBurnableContractAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenContract",
          "type": "address"
        }
      ],
      "name": "WhitelistedBurnableContractRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenContract",
          "type": "address"
        }
      ],
      "name": "WhitelistedContractAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenContract",
          "type": "address"
        }
      ],
      "name": "WhitelistedContractRemoved",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WITHDRAW_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenContract",
          "type": "address"
        }
      ],
      "name": "addWhitelistedBurnableContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenContract",
          "type": "address"
        }
      ],
      "name": "addWhitelistedContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenContract",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "burnERC721",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenContract",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "lockERC1155",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "lockedERC1155Tokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "lockedERC721Tokens",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenContract",
          "type": "address"
        }
      ],
      "name": "removeWhitelistedBurnableContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenContract",
          "type": "address"
        }
      ],
      "name": "removeWhitelistedContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "whitelistedBurnableContracts",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "whitelistedContracts",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "withdrawer",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "withdrawERC1155",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x0b4e9759f056fae6cb78d50608259bbfefa3a25eddc851fc59a9ef30c05ba617",
  "receipt": {
    "to": null,
    "from": "0x7Ac410F4E36873022b57821D7a8EB3D7513C045a",
    "contractAddress": "0x6a062edB6008D02699BfB354C6BB4eb4B52B77a4",
    "transactionIndex": 14,
    "gasUsed": "1567470",
    "logsBloom": "0x
    "blockHash": "0x5b87cce04869962f58452f291c346d4fc0ef99be20ab6797d648569848ee40e9",
    "transactionHash": "0x0b4e9759f056fae6cb78d50608259bbfefa3a25eddc851fc59a9ef30c05ba617",
    "logs": [
      {
        "transactionIndex": 14,
        "blockNumber": 38141188,
        "transactionHash": "0x0b4e9759f056fae6cb78d50608259bbfefa3a25eddc851fc59a9ef30c05ba617",
        "address": "0x6a062edB6008D02699BfB354C6BB4eb4B52B77a4",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000007ac410f4e36873022b57821d7a8eb3d7513c045a",
          "0x0000000000000000000000007ac410f4e36873022b57821d7a8eb3d7513c045a"
        ],
        "data": "0x",
        "logIndex": 50,
        "blockHash": "0x5b87cce04869962f58452f291c346d4fc0ef99be20ab6797d648569848ee40e9"
      },
      {
        "transactionIndex": 14,
        "blockNumber": 38141188,
        "transactionHash": "0x0b4e9759f056fae6cb78d50608259bbfefa3a25eddc851fc59a9ef30c05ba617",
        "address": "0x6a062edB6008D02699BfB354C6BB4eb4B52B77a4",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x5d8e12c39142ff96d79d04d15d1ba1269e4fe57bb9d26f43523628b34ba108ec",
          "0x0000000000000000000000007ac410f4e36873022b57821d7a8eb3d7513c045a",
          "0x0000000000000000000000007ac410f4e36873022b57821d7a8eb3d7513c045a"
        ],
        "data": "0x",
        "logIndex": 51,
        "blockHash": "0x5b87cce04869962f58452f291c346d4fc0ef99be20ab6797d648569848ee40e9"
      },
      {
        "transactionIndex": 14,
        "blockNumber": 38141188,
        "transactionHash": "0x0b4e9759f056fae6cb78d50608259bbfefa3a25eddc851fc59a9ef30c05ba617",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000007ac410f4e36873022b57821d7a8eb3d7513c045a",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000085a6892d1b20000000000000000000000000000000000000000000000008ad07d6e3737b13db900000000000000000000000000000000000000000000332588229a827cfc6b6500000000000000000000000000000000000000000000008ad07513cea4df8bb9000000000000000000000000000000000000000000003325882af4eb0fce1d65",
        "logIndex": 52,
        "blockHash": "0x5b87cce04869962f58452f291c346d4fc0ef99be20ab6797d648569848ee40e9"
      }
    ],
    "blockNumber": 38141188,
    "cumulativeGasUsed": "8183606",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "4da6953ee668730e59e27e2dd0e307a6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"locker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"ERC1155Locked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"ERC721Burnt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"withdrawer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"NFTWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"}],\"name\":\"WhitelistedBurnableContractAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"}],\"name\":\"WhitelistedBurnableContractRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"}],\"name\":\"WhitelistedContractAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"}],\"name\":\"WhitelistedContractRemoved\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WITHDRAW_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"}],\"name\":\"addWhitelistedBurnableContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"}],\"name\":\"addWhitelistedContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"burnERC721\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"lockERC1155\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lockedERC1155Tokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lockedERC721Tokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"}],\"name\":\"removeWhitelistedBurnableContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"}],\"name\":\"removeWhitelistedContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelistedBurnableContracts\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelistedContracts\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"withdrawer\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"withdrawERC1155\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LockContract.sol\":\"LockContract\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4a1a0ba12bf1a33f10d9fe226278cf59675c0b929d29e4da99658a079b27fb84\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xe68ed7fb8766ed1e888291f881e36b616037f852b37d96877045319ad298ba87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x8e93de94c9062ebc94fb7e2e3929b0781ac6a2b7772e2f7a59045861c93e5be9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/utils/ERC1155Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC1155Receiver.sol\\\";\\n\\n/**\\n * Simple implementation of `ERC1155Receiver` that will allow a contract to hold ERC1155 tokens.\\n *\\n * IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be\\n * stuck.\\n *\\n * @dev _Available since v3.1._\\n */\\ncontract ERC1155Holder is ERC1155Receiver {\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] memory,\\n        uint256[] memory,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x2e024ca51ce5abe16c0d34e6992a1104f356e2244eb4ccbec970435e8b3405e3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Receiver.sol\\\";\\nimport \\\"../../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x3dd5e1a66a56f30302108a1da97d677a42b1daa60e503696b2bcbbf3e4c95bcb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/utils/ERC721Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Receiver.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC721Receiver} interface.\\n *\\n * Accepts all token transfers.\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n */\\ncontract ERC721Holder is IERC721Receiver {\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x0108bf6a6ebd5f96678bed33a35947537263f96766131ee91461fb6485805028\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/LockContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"./interfaces/IERC721Burnable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\ncontract LockContract is\\n    AccessControl,\\n    ERC1155Holder,\\n    ERC721Holder,\\n    Pausable,\\n    ReentrancyGuard\\n{\\n    bytes32 public constant WITHDRAW_ROLE = keccak256(\\\"WITHDRAW_ROLE\\\");\\n\\n    mapping(address => bool) public whitelistedContracts;\\n    mapping(address => bool) public whitelistedBurnableContracts;\\n    mapping(address => mapping(uint256 => uint256)) public lockedERC1155Tokens;\\n    mapping(address => mapping(uint256 => bool)) public lockedERC721Tokens;\\n\\n    modifier onlyWhitelisted(address tokenContract) {\\n        require(\\n            whitelistedContracts[tokenContract],\\n            \\\"Token contract is not whitelisted\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyBurnableWhitelisted(address tokenContract) {\\n        require(\\n            whitelistedBurnableContracts[tokenContract],\\n            \\\"Token contract is not whitelisted\\\"\\n        );\\n        _;\\n    }\\n\\n    event WhitelistedBurnableContractAdded(address tokenContract);\\n    event WhitelistedBurnableContractRemoved(address tokenContract);\\n\\n    event WhitelistedContractAdded(address tokenContract);\\n\\n    event WhitelistedContractRemoved(address tokenContract);\\n\\n    event ERC1155Locked(\\n        address locker,\\n        address tokenContract,\\n        uint256[] tokenIds,\\n        uint256[] amounts\\n    );\\n\\n    event ERC721Burnt(\\n        address burner,\\n        address tokenContract,\\n        uint256[] tokenIds\\n    );\\n\\n    event NFTWithdraw(\\n        address withdrawer,\\n        address tokenContract,\\n        uint256[] tokenIds,\\n        uint256[] amounts\\n    );\\n\\n    constructor() {\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _grantRole(WITHDRAW_ROLE, msg.sender);\\n    }\\n\\n    function addWhitelistedBurnableContract(\\n        address tokenContract\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        whitelistedBurnableContracts[tokenContract] = true;\\n        emit WhitelistedBurnableContractAdded(tokenContract);\\n    }\\n\\n    function removeWhitelistedBurnableContract(\\n        address tokenContract\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        delete whitelistedBurnableContracts[tokenContract];\\n        emit WhitelistedBurnableContractRemoved(tokenContract);\\n    }\\n\\n    function addWhitelistedContract(\\n        address tokenContract\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        whitelistedContracts[tokenContract] = true;\\n        emit WhitelistedContractAdded(tokenContract);\\n    }\\n\\n    function removeWhitelistedContract(\\n        address tokenContract\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        delete whitelistedContracts[tokenContract];\\n        emit WhitelistedContractRemoved(tokenContract);\\n    }\\n\\n    function lockERC1155(\\n        address tokenContract,\\n        uint256[] calldata tokenIds,\\n        uint256[] calldata amounts\\n    ) external onlyWhitelisted(tokenContract) nonReentrant whenNotPaused {\\n        require(\\n            tokenIds.length == amounts.length,\\n            \\\"tokenIds length does not match amounts length\\\"\\n        );\\n        IERC1155(tokenContract).safeBatchTransferFrom(\\n            msg.sender,\\n            address(this),\\n            tokenIds,\\n            amounts,\\n            \\\"0x00\\\"\\n        );\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            lockedERC1155Tokens[tokenContract][tokenIds[i]] =\\n                lockedERC1155Tokens[tokenContract][tokenIds[i]] +\\n                amounts[i];\\n        }\\n        emit ERC1155Locked(msg.sender, tokenContract, tokenIds, amounts);\\n    }\\n\\n    function burnERC721(\\n        address tokenContract,\\n        uint256[] calldata tokenIds\\n    )\\n        external\\n        onlyBurnableWhitelisted(tokenContract)\\n        nonReentrant\\n        whenNotPaused\\n    {\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            IERC721(tokenContract).burn(tokenIds[i]);\\n        }\\n        emit ERC721Burnt(msg.sender, tokenContract, tokenIds);\\n    }\\n\\n    function withdrawERC1155(\\n        address tokenContract,\\n        address withdrawer,\\n        uint256[] calldata tokenIds,\\n        uint256[] calldata amounts\\n    ) external nonReentrant whenNotPaused onlyRole(WITHDRAW_ROLE) {\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            require(\\n                lockedERC1155Tokens[tokenContract][tokenIds[i]] >= amounts[i],\\n                \\\"Token is not locked\\\"\\n            );\\n        }\\n        //add lazy mint here\\n        IERC1155(tokenContract).safeBatchTransferFrom(\\n            address(this),\\n            msg.sender,\\n            tokenIds,\\n            amounts,\\n            \\\"0x00\\\"\\n        );\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            lockedERC1155Tokens[tokenContract][tokenIds[i]] - amounts[i];\\n        }\\n        emit NFTWithdraw(withdrawer, tokenContract, tokenIds, amounts);\\n    }\\n\\n    function pause() public onlyRole(DEFAULT_ADMIN_ROLE) {\\n        _pause();\\n    }\\n\\n    function unpause() public onlyRole(DEFAULT_ADMIN_ROLE) {\\n        _unpause();\\n    }\\n\\n    // The following functions are overrides required by Solidity.\\n\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view override(AccessControl, ERC1155Receiver) returns (bool) {\\n        return super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x04aea6d0356e167211b49fca185882922f4030217180e2c3c19b054e5d4117d4\",\"license\":\"MIT\"},\"contracts/interfaces/IERC721Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(\\n        address indexed from,\\n        address indexed to,\\n        uint256 indexed tokenId\\n    );\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed approved,\\n        uint256 indexed tokenId\\n    );\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(\\n        address indexed owner,\\n        address indexed operator,\\n        bool approved\\n    );\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(\\n        uint256 tokenId\\n    ) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(\\n        address owner,\\n        address operator\\n    ) external view returns (bool);\\n\\n    function burn(uint256) external;\\n}\\n\",\"keccak256\":\"0xa3206b93bc96ae5176169a538ea3d72cefd8f04101ac99b45eb3110dba9a0fff\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506001805460ff19168155600255610029600033610058565b6100537f5d8e12c39142ff96d79d04d15d1ba1269e4fe57bb9d26f43523628b34ba108ec33610058565b6100f7565b6000828152602081815260408083206001600160a01b038516845290915290205460ff166100f3576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556100b23390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b611a0080620001076000396000f3fe608060405234801561001057600080fd5b50600436106101735760003560e01c80634020c27e116100de578063a217fddf11610097578063d547741f11610071578063d547741f14610396578063d8cb0d66146103a9578063e02023a1146103bc578063f23a6e61146103e357600080fd5b8063a217fddf14610344578063ad6400831461034c578063bc197c811461037757600080fd5b80634020c27e146102d5578063450bf77b146102e857806346704adb1461030b5780635c975abb1461031e5780638456cb591461032957806391d148541461033157600080fd5b8063248a9ca311610130578063248a9ca3146102405780632f2ff15d1461027157806336568abe14610284578063391feebb146102975780633f4ba83a146102ba5780633ff65e8f146102c257600080fd5b806301ffc9a71461017857806303a72905146101a05780630ff24ee2146101b5578063140069d7146101c8578063150b7a02146101f65780631903cebe1461022d575b600080fd5b61018b61018636600461114f565b610402565b60405190151581526020015b60405180910390f35b6101b36101ae366004611195565b610413565b005b6101b36101c3366004611195565b61047b565b61018b6101d63660046111b0565b600660209081526000928352604080842090915290825290205460ff1681565b610214610204366004611291565b630a85bd0160e11b949350505050565b6040516001600160e01b03199091168152602001610197565b6101b361023b366004611345565b6104d8565b61026361024e3660046113c6565b60009081526020819052604090206001015490565b604051908152602001610197565b6101b361027f3660046113df565b610754565b6101b36102923660046113df565b61077f565b61018b6102a5366004611195565b60036020526000908152604090205460ff1681565b6101b36107fd565b6101b36102d036600461140b565b610814565b6101b36102e3366004611195565b610976565b61018b6102f6366004611195565b60046020526000908152604090205460ff1681565b6101b3610319366004611195565b6109d3565b60015460ff1661018b565b6101b3610a33565b61018b61033f3660046113df565b610a47565b610263600081565b61026361035a3660046111b0565b600560209081526000928352604080842090915290825290205481565b6102146103853660046114de565b63bc197c8160e01b95945050505050565b6101b36103a43660046113df565b610a70565b6101b36103b7366004611588565b610a96565b6102637f5d8e12c39142ff96d79d04d15d1ba1269e4fe57bb9d26f43523628b34ba108ec81565b6102146103f1366004611619565b63f23a6e6160e01b95945050505050565b600061040d82610d1c565b92915050565b600061041f8133610d41565b6001600160a01b038216600081815260046020908152604091829020805460ff1916600117905590519182527f1458213685e4372cd5aadbda4e8eb6a98be58be71fd476d8895e2da92566e14991015b60405180910390a15050565b60006104878133610d41565b6001600160a01b038216600081815260036020908152604091829020805460ff1916905590519182527fbf4ebb78df053fc7d1820e52893293ea77b46e98bdb1707c4fec4e9ed6661cc1910161046f565b6001600160a01b038516600090815260036020526040902054859060ff1661051b5760405162461bcd60e51b81526004016105129061167e565b60405180910390fd5b60028054141561053d5760405162461bcd60e51b8152600401610512906116bf565b6002805560015460ff16156105645760405162461bcd60e51b8152600401610512906116f6565b8382146105c95760405162461bcd60e51b815260206004820152602d60248201527f746f6b656e496473206c656e67746820646f6573206e6f74206d61746368206160448201526c0dadeeadce8e640d8cadccee8d609b1b6064820152608401610512565b604051631759616b60e11b81526001600160a01b03871690632eb2c2d6906105ff90339030908a908a908a908a90600401611756565b600060405180830381600087803b15801561061957600080fd5b505af115801561062d573d6000803e3d6000fd5b5050505060005b848110156107055783838281811061064e5761064e6117c2565b9050602002013560056000896001600160a01b03166001600160a01b03168152602001908152602001600020600088888581811061068e5761068e6117c2565b905060200201358152602001908152602001600020546106ae91906117ee565b6001600160a01b0388166000908152600560205260408120908888858181106106d9576106d96117c2565b9050602002013581526020019081526020016000208190555080806106fd90611806565b915050610634565b507ffabdcd61126603f10488ba795e93324bf59e0774af55c980ba65e2ced898d7e833878787878760405161073f96959493929190611821565b60405180910390a15050600160025550505050565b6000828152602081905260409020600101546107708133610d41565b61077a8383610da5565b505050565b6001600160a01b03811633146107ef5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610512565b6107f98282610e29565b5050565b60006108098133610d41565b610811610e8e565b50565b6001600160a01b038316600090815260046020526040902054839060ff1661084e5760405162461bcd60e51b81526004016105129061167e565b6002805414156108705760405162461bcd60e51b8152600401610512906116bf565b6002805560015460ff16156108975760405162461bcd60e51b8152600401610512906116f6565b60005b8281101561092d57846001600160a01b03166342966c688585848181106108c3576108c36117c2565b905060200201356040518263ffffffff1660e01b81526004016108e891815260200190565b600060405180830381600087803b15801561090257600080fd5b505af1158015610916573d6000803e3d6000fd5b50505050808061092590611806565b91505061089a565b507f6a0d8d37d244d4de822392609592091835f073b5f7e425c3102a20f048e64d7a33858585604051610963949392919061186e565b60405180910390a1505060016002555050565b60006109828133610d41565b6001600160a01b038216600081815260046020908152604091829020805460ff1916905590519182527f8d872e011acd709bd27f4ce404a9f04f39544fa053c37d6ce358ac1ac8358ea3910161046f565b60006109df8133610d41565b6001600160a01b038216600081815260036020908152604091829020805460ff1916600117905590519182527f56135cb92f507d24c4d85542876eb1dabb1db58e6f7ef6cbd0193d57f2428188910161046f565b6000610a3f8133610d41565b610811610f21565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b600082815260208190526040902060010154610a8c8133610d41565b61077a8383610e29565b600280541415610ab85760405162461bcd60e51b8152600401610512906116bf565b6002805560015460ff1615610adf5760405162461bcd60e51b8152600401610512906116f6565b7f5d8e12c39142ff96d79d04d15d1ba1269e4fe57bb9d26f43523628b34ba108ec610b0a8133610d41565b60005b84811015610bd357838382818110610b2757610b276117c2565b90506020020135600560008a6001600160a01b03166001600160a01b031681526020019081526020016000206000888885818110610b6757610b676117c2565b905060200201358152602001908152602001600020541015610bc15760405162461bcd60e51b8152602060048201526013602482015272151bdad95b881a5cc81b9bdd081b1bd8dad959606a1b6044820152606401610512565b80610bcb81611806565b915050610b0d565b50604051631759616b60e11b81526001600160a01b03881690632eb2c2d690610c0a90309033908a908a908a908a90600401611756565b600060405180830381600087803b158015610c2457600080fd5b505af1158015610c38573d6000803e3d6000fd5b5050505060005b84811015610ccc57838382818110610c5957610c596117c2565b90506020020135600560008a6001600160a01b03166001600160a01b031681526020019081526020016000206000888885818110610c9957610c996117c2565b90506020020135815260200190815260200160002054610cb991906118a5565b5080610cc481611806565b915050610c3f565b507f6832a963e4ce0fdb5b8a88923d2cbb595121250663714b42ada84d8230e4a1d6868887878787604051610d0696959493929190611821565b60405180910390a1505060016002555050505050565b60006001600160e01b03198216630271189760e51b148061040d575061040d82610f77565b610d4b8282610a47565b6107f957610d63816001600160a01b03166014610fac565b610d6e836020610fac565b604051602001610d7f9291906118ec565b60408051601f198184030181529082905262461bcd60e51b825261051291600401611961565b610daf8282610a47565b6107f9576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055610de53390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b610e338282610a47565b156107f9576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60015460ff16610ed75760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610512565b6001805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b60015460ff1615610f445760405162461bcd60e51b8152600401610512906116f6565b6001805460ff1916811790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25833610f04565b60006001600160e01b03198216637965db0b60e01b148061040d57506301ffc9a760e01b6001600160e01b031983161461040d565b60606000610fbb836002611994565b610fc69060026117ee565b67ffffffffffffffff811115610fde57610fde6111da565b6040519080825280601f01601f191660200182016040528015611008576020820181803683370190505b509050600360fc1b81600081518110611023576110236117c2565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611052576110526117c2565b60200101906001600160f81b031916908160001a9053506000611076846002611994565b6110819060016117ee565b90505b60018111156110f9576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106110b5576110b56117c2565b1a60f81b8282815181106110cb576110cb6117c2565b60200101906001600160f81b031916908160001a90535060049490941c936110f2816119b3565b9050611084565b5083156111485760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610512565b9392505050565b60006020828403121561116157600080fd5b81356001600160e01b03198116811461114857600080fd5b80356001600160a01b038116811461119057600080fd5b919050565b6000602082840312156111a757600080fd5b61114882611179565b600080604083850312156111c357600080fd5b6111cc83611179565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715611219576112196111da565b604052919050565b600082601f83011261123257600080fd5b813567ffffffffffffffff81111561124c5761124c6111da565b61125f601f8201601f19166020016111f0565b81815284602083860101111561127457600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080608085870312156112a757600080fd5b6112b085611179565b93506112be60208601611179565b925060408501359150606085013567ffffffffffffffff8111156112e157600080fd5b6112ed87828801611221565b91505092959194509250565b60008083601f84011261130b57600080fd5b50813567ffffffffffffffff81111561132357600080fd5b6020830191508360208260051b850101111561133e57600080fd5b9250929050565b60008060008060006060868803121561135d57600080fd5b61136686611179565b9450602086013567ffffffffffffffff8082111561138357600080fd5b61138f89838a016112f9565b909650945060408801359150808211156113a857600080fd5b506113b5888289016112f9565b969995985093965092949392505050565b6000602082840312156113d857600080fd5b5035919050565b600080604083850312156113f257600080fd5b8235915061140260208401611179565b90509250929050565b60008060006040848603121561142057600080fd5b61142984611179565b9250602084013567ffffffffffffffff81111561144557600080fd5b611451868287016112f9565b9497909650939450505050565b600082601f83011261146f57600080fd5b8135602067ffffffffffffffff82111561148b5761148b6111da565b8160051b61149a8282016111f0565b92835284810182019282810190878511156114b457600080fd5b83870192505b848310156114d3578235825291830191908301906114ba565b979650505050505050565b600080600080600060a086880312156114f657600080fd5b6114ff86611179565b945061150d60208701611179565b9350604086013567ffffffffffffffff8082111561152a57600080fd5b61153689838a0161145e565b9450606088013591508082111561154c57600080fd5b61155889838a0161145e565b9350608088013591508082111561156e57600080fd5b5061157b88828901611221565b9150509295509295909350565b600080600080600080608087890312156115a157600080fd5b6115aa87611179565b95506115b860208801611179565b9450604087013567ffffffffffffffff808211156115d557600080fd5b6115e18a838b016112f9565b909650945060608901359150808211156115fa57600080fd5b5061160789828a016112f9565b979a9699509497509295939492505050565b600080600080600060a0868803121561163157600080fd5b61163a86611179565b945061164860208701611179565b93506040860135925060608601359150608086013567ffffffffffffffff81111561167257600080fd5b61157b88828901611221565b60208082526021908201527f546f6b656e20636f6e7472616374206973206e6f742077686974656c697374656040820152601960fa1b606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b81835260006001600160fb1b0383111561173957600080fd5b8260051b8083602087013760009401602001938452509192915050565b6001600160a01b0387811682528616602082015260a0604082018190526000906117839083018688611720565b8281036060840152611796818587611720565b838103608090940193909352505060048152630307830360e41b60208201526040019695505050505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60008219821115611801576118016117d8565b500190565b600060001982141561181a5761181a6117d8565b5060010190565b6001600160a01b0387811682528616602082015260806040820181905260009061184e9083018688611720565b8281036060840152611861818587611720565b9998505050505050505050565b6001600160a01b0385811682528416602082015260606040820181905260009061189b9083018486611720565b9695505050505050565b6000828210156118b7576118b76117d8565b500390565b60005b838110156118d75781810151838201526020016118bf565b838111156118e6576000848401525b50505050565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516119248160178501602088016118bc565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516119558160288401602088016118bc565b01602801949350505050565b60208152600082518060208401526119808160408501602087016118bc565b601f01601f19169190910160400192915050565b60008160001904831182151516156119ae576119ae6117d8565b500290565b6000816119c2576119c26117d8565b50600019019056fea264697066735822122048777ecf9c6401de7fdabc139b4021681d437ab66c19155b0841d711be655ecf64736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101735760003560e01c80634020c27e116100de578063a217fddf11610097578063d547741f11610071578063d547741f14610396578063d8cb0d66146103a9578063e02023a1146103bc578063f23a6e61146103e357600080fd5b8063a217fddf14610344578063ad6400831461034c578063bc197c811461037757600080fd5b80634020c27e146102d5578063450bf77b146102e857806346704adb1461030b5780635c975abb1461031e5780638456cb591461032957806391d148541461033157600080fd5b8063248a9ca311610130578063248a9ca3146102405780632f2ff15d1461027157806336568abe14610284578063391feebb146102975780633f4ba83a146102ba5780633ff65e8f146102c257600080fd5b806301ffc9a71461017857806303a72905146101a05780630ff24ee2146101b5578063140069d7146101c8578063150b7a02146101f65780631903cebe1461022d575b600080fd5b61018b61018636600461114f565b610402565b60405190151581526020015b60405180910390f35b6101b36101ae366004611195565b610413565b005b6101b36101c3366004611195565b61047b565b61018b6101d63660046111b0565b600660209081526000928352604080842090915290825290205460ff1681565b610214610204366004611291565b630a85bd0160e11b949350505050565b6040516001600160e01b03199091168152602001610197565b6101b361023b366004611345565b6104d8565b61026361024e3660046113c6565b60009081526020819052604090206001015490565b604051908152602001610197565b6101b361027f3660046113df565b610754565b6101b36102923660046113df565b61077f565b61018b6102a5366004611195565b60036020526000908152604090205460ff1681565b6101b36107fd565b6101b36102d036600461140b565b610814565b6101b36102e3366004611195565b610976565b61018b6102f6366004611195565b60046020526000908152604090205460ff1681565b6101b3610319366004611195565b6109d3565b60015460ff1661018b565b6101b3610a33565b61018b61033f3660046113df565b610a47565b610263600081565b61026361035a3660046111b0565b600560209081526000928352604080842090915290825290205481565b6102146103853660046114de565b63bc197c8160e01b95945050505050565b6101b36103a43660046113df565b610a70565b6101b36103b7366004611588565b610a96565b6102637f5d8e12c39142ff96d79d04d15d1ba1269e4fe57bb9d26f43523628b34ba108ec81565b6102146103f1366004611619565b63f23a6e6160e01b95945050505050565b600061040d82610d1c565b92915050565b600061041f8133610d41565b6001600160a01b038216600081815260046020908152604091829020805460ff1916600117905590519182527f1458213685e4372cd5aadbda4e8eb6a98be58be71fd476d8895e2da92566e14991015b60405180910390a15050565b60006104878133610d41565b6001600160a01b038216600081815260036020908152604091829020805460ff1916905590519182527fbf4ebb78df053fc7d1820e52893293ea77b46e98bdb1707c4fec4e9ed6661cc1910161046f565b6001600160a01b038516600090815260036020526040902054859060ff1661051b5760405162461bcd60e51b81526004016105129061167e565b60405180910390fd5b60028054141561053d5760405162461bcd60e51b8152600401610512906116bf565b6002805560015460ff16156105645760405162461bcd60e51b8152600401610512906116f6565b8382146105c95760405162461bcd60e51b815260206004820152602d60248201527f746f6b656e496473206c656e67746820646f6573206e6f74206d61746368206160448201526c0dadeeadce8e640d8cadccee8d609b1b6064820152608401610512565b604051631759616b60e11b81526001600160a01b03871690632eb2c2d6906105ff90339030908a908a908a908a90600401611756565b600060405180830381600087803b15801561061957600080fd5b505af115801561062d573d6000803e3d6000fd5b5050505060005b848110156107055783838281811061064e5761064e6117c2565b9050602002013560056000896001600160a01b03166001600160a01b03168152602001908152602001600020600088888581811061068e5761068e6117c2565b905060200201358152602001908152602001600020546106ae91906117ee565b6001600160a01b0388166000908152600560205260408120908888858181106106d9576106d96117c2565b9050602002013581526020019081526020016000208190555080806106fd90611806565b915050610634565b507ffabdcd61126603f10488ba795e93324bf59e0774af55c980ba65e2ced898d7e833878787878760405161073f96959493929190611821565b60405180910390a15050600160025550505050565b6000828152602081905260409020600101546107708133610d41565b61077a8383610da5565b505050565b6001600160a01b03811633146107ef5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610512565b6107f98282610e29565b5050565b60006108098133610d41565b610811610e8e565b50565b6001600160a01b038316600090815260046020526040902054839060ff1661084e5760405162461bcd60e51b81526004016105129061167e565b6002805414156108705760405162461bcd60e51b8152600401610512906116bf565b6002805560015460ff16156108975760405162461bcd60e51b8152600401610512906116f6565b60005b8281101561092d57846001600160a01b03166342966c688585848181106108c3576108c36117c2565b905060200201356040518263ffffffff1660e01b81526004016108e891815260200190565b600060405180830381600087803b15801561090257600080fd5b505af1158015610916573d6000803e3d6000fd5b50505050808061092590611806565b91505061089a565b507f6a0d8d37d244d4de822392609592091835f073b5f7e425c3102a20f048e64d7a33858585604051610963949392919061186e565b60405180910390a1505060016002555050565b60006109828133610d41565b6001600160a01b038216600081815260046020908152604091829020805460ff1916905590519182527f8d872e011acd709bd27f4ce404a9f04f39544fa053c37d6ce358ac1ac8358ea3910161046f565b60006109df8133610d41565b6001600160a01b038216600081815260036020908152604091829020805460ff1916600117905590519182527f56135cb92f507d24c4d85542876eb1dabb1db58e6f7ef6cbd0193d57f2428188910161046f565b6000610a3f8133610d41565b610811610f21565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b600082815260208190526040902060010154610a8c8133610d41565b61077a8383610e29565b600280541415610ab85760405162461bcd60e51b8152600401610512906116bf565b6002805560015460ff1615610adf5760405162461bcd60e51b8152600401610512906116f6565b7f5d8e12c39142ff96d79d04d15d1ba1269e4fe57bb9d26f43523628b34ba108ec610b0a8133610d41565b60005b84811015610bd357838382818110610b2757610b276117c2565b90506020020135600560008a6001600160a01b03166001600160a01b031681526020019081526020016000206000888885818110610b6757610b676117c2565b905060200201358152602001908152602001600020541015610bc15760405162461bcd60e51b8152602060048201526013602482015272151bdad95b881a5cc81b9bdd081b1bd8dad959606a1b6044820152606401610512565b80610bcb81611806565b915050610b0d565b50604051631759616b60e11b81526001600160a01b03881690632eb2c2d690610c0a90309033908a908a908a908a90600401611756565b600060405180830381600087803b158015610c2457600080fd5b505af1158015610c38573d6000803e3d6000fd5b5050505060005b84811015610ccc57838382818110610c5957610c596117c2565b90506020020135600560008a6001600160a01b03166001600160a01b031681526020019081526020016000206000888885818110610c9957610c996117c2565b90506020020135815260200190815260200160002054610cb991906118a5565b5080610cc481611806565b915050610c3f565b507f6832a963e4ce0fdb5b8a88923d2cbb595121250663714b42ada84d8230e4a1d6868887878787604051610d0696959493929190611821565b60405180910390a1505060016002555050505050565b60006001600160e01b03198216630271189760e51b148061040d575061040d82610f77565b610d4b8282610a47565b6107f957610d63816001600160a01b03166014610fac565b610d6e836020610fac565b604051602001610d7f9291906118ec565b60408051601f198184030181529082905262461bcd60e51b825261051291600401611961565b610daf8282610a47565b6107f9576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055610de53390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b610e338282610a47565b156107f9576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60015460ff16610ed75760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610512565b6001805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b60015460ff1615610f445760405162461bcd60e51b8152600401610512906116f6565b6001805460ff1916811790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25833610f04565b60006001600160e01b03198216637965db0b60e01b148061040d57506301ffc9a760e01b6001600160e01b031983161461040d565b60606000610fbb836002611994565b610fc69060026117ee565b67ffffffffffffffff811115610fde57610fde6111da565b6040519080825280601f01601f191660200182016040528015611008576020820181803683370190505b509050600360fc1b81600081518110611023576110236117c2565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611052576110526117c2565b60200101906001600160f81b031916908160001a9053506000611076846002611994565b6110819060016117ee565b90505b60018111156110f9576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106110b5576110b56117c2565b1a60f81b8282815181106110cb576110cb6117c2565b60200101906001600160f81b031916908160001a90535060049490941c936110f2816119b3565b9050611084565b5083156111485760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610512565b9392505050565b60006020828403121561116157600080fd5b81356001600160e01b03198116811461114857600080fd5b80356001600160a01b038116811461119057600080fd5b919050565b6000602082840312156111a757600080fd5b61114882611179565b600080604083850312156111c357600080fd5b6111cc83611179565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715611219576112196111da565b604052919050565b600082601f83011261123257600080fd5b813567ffffffffffffffff81111561124c5761124c6111da565b61125f601f8201601f19166020016111f0565b81815284602083860101111561127457600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080608085870312156112a757600080fd5b6112b085611179565b93506112be60208601611179565b925060408501359150606085013567ffffffffffffffff8111156112e157600080fd5b6112ed87828801611221565b91505092959194509250565b60008083601f84011261130b57600080fd5b50813567ffffffffffffffff81111561132357600080fd5b6020830191508360208260051b850101111561133e57600080fd5b9250929050565b60008060008060006060868803121561135d57600080fd5b61136686611179565b9450602086013567ffffffffffffffff8082111561138357600080fd5b61138f89838a016112f9565b909650945060408801359150808211156113a857600080fd5b506113b5888289016112f9565b969995985093965092949392505050565b6000602082840312156113d857600080fd5b5035919050565b600080604083850312156113f257600080fd5b8235915061140260208401611179565b90509250929050565b60008060006040848603121561142057600080fd5b61142984611179565b9250602084013567ffffffffffffffff81111561144557600080fd5b611451868287016112f9565b9497909650939450505050565b600082601f83011261146f57600080fd5b8135602067ffffffffffffffff82111561148b5761148b6111da565b8160051b61149a8282016111f0565b92835284810182019282810190878511156114b457600080fd5b83870192505b848310156114d3578235825291830191908301906114ba565b979650505050505050565b600080600080600060a086880312156114f657600080fd5b6114ff86611179565b945061150d60208701611179565b9350604086013567ffffffffffffffff8082111561152a57600080fd5b61153689838a0161145e565b9450606088013591508082111561154c57600080fd5b61155889838a0161145e565b9350608088013591508082111561156e57600080fd5b5061157b88828901611221565b9150509295509295909350565b600080600080600080608087890312156115a157600080fd5b6115aa87611179565b95506115b860208801611179565b9450604087013567ffffffffffffffff808211156115d557600080fd5b6115e18a838b016112f9565b909650945060608901359150808211156115fa57600080fd5b5061160789828a016112f9565b979a9699509497509295939492505050565b600080600080600060a0868803121561163157600080fd5b61163a86611179565b945061164860208701611179565b93506040860135925060608601359150608086013567ffffffffffffffff81111561167257600080fd5b61157b88828901611221565b60208082526021908201527f546f6b656e20636f6e7472616374206973206e6f742077686974656c697374656040820152601960fa1b606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b81835260006001600160fb1b0383111561173957600080fd5b8260051b8083602087013760009401602001938452509192915050565b6001600160a01b0387811682528616602082015260a0604082018190526000906117839083018688611720565b8281036060840152611796818587611720565b838103608090940193909352505060048152630307830360e41b60208201526040019695505050505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60008219821115611801576118016117d8565b500190565b600060001982141561181a5761181a6117d8565b5060010190565b6001600160a01b0387811682528616602082015260806040820181905260009061184e9083018688611720565b8281036060840152611861818587611720565b9998505050505050505050565b6001600160a01b0385811682528416602082015260606040820181905260009061189b9083018486611720565b9695505050505050565b6000828210156118b7576118b76117d8565b500390565b60005b838110156118d75781810151838201526020016118bf565b838111156118e6576000848401525b50505050565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516119248160178501602088016118bc565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516119558160288401602088016118bc565b01602801949350505050565b60208152600082518060208401526119808160408501602087016118bc565b601f01601f19169190910160400192915050565b60008160001904831182151516156119ae576119ae6117d8565b500290565b6000816119c2576119c26117d8565b50600019019056fea264697066735822122048777ecf9c6401de7fdabc139b4021681d437ab66c19155b0841d711be655ecf64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "onERC721Received(address,address,uint256,bytes)": {
        "details": "See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 70,
        "contract": "contracts/LockContract.sol:LockContract",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)65_storage)"
      },
      {
        "astId": 550,
        "contract": "contracts/LockContract.sol:LockContract",
        "label": "_paused",
        "offset": 0,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 635,
        "contract": "contracts/LockContract.sol:LockContract",
        "label": "_status",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 11187,
        "contract": "contracts/LockContract.sol:LockContract",
        "label": "whitelistedContracts",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 11191,
        "contract": "contracts/LockContract.sol:LockContract",
        "label": "whitelistedBurnableContracts",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 11197,
        "contract": "contracts/LockContract.sol:LockContract",
        "label": "lockedERC1155Tokens",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 11203,
        "contract": "contracts/LockContract.sol:LockContract",
        "label": "lockedERC721Tokens",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)65_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)65_storage"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(RoleData)65_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 62,
            "contract": "contracts/LockContract.sol:LockContract",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 64,
            "contract": "contracts/LockContract.sol:LockContract",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}