{
  "address": "0x8f84a8FE7A749e3Ff714b1B45088f4de0bB5F512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IERC721",
          "name": "erc721Address",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee1",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "treasury1",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee2",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "treasury2",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "changedBy",
          "type": "address"
        }
      ],
      "name": "FeesChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "listingId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        }
      ],
      "name": "ItemDelisted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "listingId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "payTokenAddress",
          "type": "address"
        }
      ],
      "name": "ItemListed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "listingId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee1",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee2",
          "type": "uint256"
        }
      ],
      "name": "ItemSold",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "whitelists",
          "type": "address[]"
        }
      ],
      "name": "WhitelistAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "whitelists",
          "type": "address[]"
        }
      ],
      "name": "WhitelistRemoved",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DECIMAL_FACTOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "activeListingCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20",
          "name": "payTokenAddress",
          "type": "address"
        }
      ],
      "name": "addListing",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "listingId",
          "type": "uint256"
        }
      ],
      "name": "buy",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "erc721Contract",
      "outputs": [
        {
          "internalType": "contract IERC721",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fee1",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fee2",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "flipIsUsingMatic",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isUsingMatic",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "listingCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "listings",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isActive",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "stop",
          "type": "bool"
        }
      ],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "listingId",
          "type": "uint256"
        }
      ],
      "name": "removeListing",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_whitelist",
          "type": "address[]"
        }
      ],
      "name": "removeWhitelistTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_fee1",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_treasury1",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_fee2",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_treasury2",
          "type": "address"
        }
      ],
      "name": "setFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_whitelist",
          "type": "address[]"
        }
      ],
      "name": "setWhitelistTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury1",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury2",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "whitelistedTokens",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xfed0d93e15f68876d8fcdfc901195976527fcb6c884009b3cbf4adc0a7374ac3",
  "receipt": {
    "to": null,
    "from": "0x7Ac410F4E36873022b57821D7a8EB3D7513C045a",
    "contractAddress": "0xE0CA7619f25035DdB3e9BE9407FBd89c4dDf035f",
    "transactionIndex": 53,
    "gasUsed": "1527262",
    "logsBloom": "0x
    "blockHash": "0x1b27e26353de75e9bc58ab01bcea394dd2ba5f5bbc31b0025e08fd05862c7aa7",
    "transactionHash": "0xfed0d93e15f68876d8fcdfc901195976527fcb6c884009b3cbf4adc0a7374ac3",
    "logs": [
      {
        "transactionIndex": 53,
        "blockNumber": 28790212,
        "transactionHash": "0xfed0d93e15f68876d8fcdfc901195976527fcb6c884009b3cbf4adc0a7374ac3",
        "address": "0xE0CA7619f25035DdB3e9BE9407FBd89c4dDf035f",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000007ac410f4e36873022b57821d7a8eb3d7513c045a"
        ],
        "data": "0x",
        "logIndex": 176,
        "blockHash": "0x1b27e26353de75e9bc58ab01bcea394dd2ba5f5bbc31b0025e08fd05862c7aa7"
      },
      {
        "transactionIndex": 53,
        "blockNumber": 28790212,
        "transactionHash": "0xfed0d93e15f68876d8fcdfc901195976527fcb6c884009b3cbf4adc0a7374ac3",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000007ac410f4e36873022b57821d7a8eb3d7513c045a",
          "0x0000000000000000000000003a22c8bc68e98b0faf40f349dd2b2890fae01484"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000008238e177bc20000000000000000000000000000000000000000000000000a30a274feeeacfabd0000000000000000000000000000000000000000000000002f98b1cfb60e06cb00000000000000000000000000000000000000000000000a309a5170d73138bd0000000000000000000000000000000000000000000000002fa0d55dcd89c8cb",
        "logIndex": 177,
        "blockHash": "0x1b27e26353de75e9bc58ab01bcea394dd2ba5f5bbc31b0025e08fd05862c7aa7"
      }
    ],
    "blockNumber": 28790212,
    "cumulativeGasUsed": "10069459",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x03eA885Ec4cb6100707EB4bE74DD83a7DDf856B1"
  ],
  "numDeployments": 2,
  "solcInputHash": "2332990a58a3073c19b972c7ad60524d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"erc721Address\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"treasury1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee2\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"treasury2\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"changedBy\",\"type\":\"address\"}],\"name\":\"FeesChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"listingId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"}],\"name\":\"ItemDelisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"listingId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"payTokenAddress\",\"type\":\"address\"}],\"name\":\"ItemListed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"listingId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee2\",\"type\":\"uint256\"}],\"name\":\"ItemSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"whitelists\",\"type\":\"address[]\"}],\"name\":\"WhitelistAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"whitelists\",\"type\":\"address[]\"}],\"name\":\"WhitelistRemoved\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DECIMAL_FACTOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activeListingCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"payTokenAddress\",\"type\":\"address\"}],\"name\":\"addListing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"listingId\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flipIsUsingMatic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isUsingMatic\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listingCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"listings\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"stop\",\"type\":\"bool\"}],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"listingId\",\"type\":\"uint256\"}],\"name\":\"removeListing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_whitelist\",\"type\":\"address[]\"}],\"name\":\"removeWhitelistTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee1\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_treasury1\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fee2\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_treasury2\",\"type\":\"address\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_whitelist\",\"type\":\"address[]\"}],\"name\":\"setWhitelistTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelistedTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Based on OpenZeppelin Contracts.\",\"kind\":\"dev\",\"methods\":{\"addListing(uint256,uint256,address)\":{\"details\":\"Creates a new entry for a Listing object and transfers the Token to the contract\",\"params\":{\"price\":\"Price in NFTs.\",\"tokenId\":\"NFT TokenId.\"}},\"buy(uint256)\":{\"details\":\"Trabsfers both the ERC20 token (price) and the NFT.\",\"params\":{\"listingId\":\"NFT Listing Id.\"}},\"constructor\":{\"details\":\"Setup the two contracts it will interact with : ERC721 and ERC20\",\"params\":{\"erc721Address\":\"Address of the NFT Contract.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"removeListing(uint256)\":{\"details\":\"Marks Listing as not active object and transfers the Token back\",\"params\":{\"listingId\":\"NFT Listing Id.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setFee(uint256,address,uint256,address)\":{\"params\":{\"_fee1\":\"new Fee1.\",\"_fee2\":\"new Fee2.\",\"_treasury1\":\"New treasury1 address.\",\"_treasury2\":\"New treasury2 address.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"Blast Royale Token - $BLT\",\"version\":1},\"userdoc\":{\"events\":{\"FeesChanged(uint256,address,uint256,address,address)\":{\"notice\":\"Event Fee changed\"},\"ItemDelisted(uint256,uint256,address)\":{\"notice\":\"Event Delisted\"},\"ItemListed(uint256,uint256,address,uint256,address)\":{\"notice\":\"Event Listed\"},\"ItemSold(uint256,uint256,address,address,uint256,uint256,uint256)\":{\"notice\":\"EventItem Sold\"}},\"kind\":\"user\",\"methods\":{\"addListing(uint256,uint256,address)\":{\"notice\":\"add a Listing to the Marketplace\"},\"buy(uint256)\":{\"notice\":\"Buys a listed NFT\"},\"constructor\":{\"notice\":\"Token constructor\"},\"removeListing(uint256)\":{\"notice\":\"Remove a Listing from the Marketplace\"},\"setFee(uint256,address,uint256,address)\":{\"notice\":\"Sets a new Fee\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Marketplace.sol\":\"Marketplace\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x0849d93b16c9940beb286a7864ed02724b248b93e0d80ef6355af5ef15c64773\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/Marketplace.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport { Errors } from \\\"./libraries/Errors.sol\\\";\\n\\nstruct Listing {\\n  address owner;\\n  bool isActive;\\n  uint256 tokenId;\\n  uint256 price;\\n  IERC20 tokenAddress;\\n}\\n\\n/// @title Blast Royale Token - $BLT\\n/// @dev Based on OpenZeppelin Contracts.\\ncontract Marketplace is ReentrancyGuard, Ownable, Pausable {\\n  using SafeERC20 for IERC20;\\n\\n  uint public constant DECIMAL_FACTOR = 100_00;\\n\\n  uint256 public listingCount;\\n  uint256 public activeListingCount;\\n  uint256 private fee1;\\n  address private treasury1;\\n  uint256 private fee2;\\n  address private treasury2;\\n  bool public isUsingMatic;\\n\\n  mapping (address => bool) public whitelistedTokens;\\n  mapping (uint256 => Listing) public listings;\\n  IERC721 private erc721Contract;\\n\\n  /// @notice Event Listed\\n  event ItemListed(\\n    uint256 listingId,\\n    uint256 tokenId,\\n    address seller,\\n    uint256 price,\\n    address payTokenAddress\\n  );\\n\\n  /// @notice Event Delisted\\n  event ItemDelisted(\\n    uint256 listingId,\\n    uint256 tokenId,\\n    address seller\\n  );\\n\\n  /// @notice EventItem Sold\\n  event ItemSold(\\n    uint256 listingId,\\n    uint256 tokenId,\\n    address seller,\\n    address buyer,\\n    uint256 price,\\n    uint256 fee1,\\n    uint256 fee2\\n  );\\n\\n  /// @notice Event Fee changed\\n  event FeesChanged(\\n    uint256 fee1,\\n    address treasury1,\\n    uint256 fee2,\\n    address treasury2,\\n    address changedBy\\n  );\\n\\n  event WhitelistAdded(address[] whitelists);\\n\\n  event WhitelistRemoved(address[] whitelists);\\n\\n  /// @notice Token constructor\\n  /// @dev Setup the two contracts it will interact with : ERC721 and ERC20\\n  /// @param erc721Address Address of the NFT Contract.\\n  constructor(IERC721 erc721Address) {\\n    require(address(erc721Address) != address(0), Errors.NO_ZERO_ADDRESS);\\n    erc721Contract = erc721Address;\\n  }\\n\\n  /// @notice add a Listing to the Marketplace\\n  /// @dev Creates a new entry for a Listing object and transfers the Token to the contract\\n  /// @param tokenId NFT TokenId.\\n  /// @param price Price in NFTs.\\n  function addListing(uint256 tokenId, uint256 price, IERC20 payTokenAddress) public nonReentrant whenNotPaused\\n  {\\n    require(price != 0, Errors.NO_ZERO_VALUE);\\n    if (address(payTokenAddress) != address(0)) {\\n      require(whitelistedTokens[address(payTokenAddress)], Errors.TOKEN_NOT_WHITELISTED);\\n    }\\n\\n    uint256 listingId = listingCount;\\n    listings[listingId] = Listing({\\n      owner: _msgSender(),\\n      isActive: true,\\n      tokenId: tokenId,\\n      price: price,\\n      tokenAddress: payTokenAddress\\n    });\\n    listingCount = listingCount + 1;\\n    activeListingCount = activeListingCount + 1;\\n    erc721Contract.transferFrom(\\n      _msgSender(),\\n      address(this),\\n      tokenId\\n    );\\n\\n    emit ItemListed(listingId, tokenId, _msgSender(), price, address(payTokenAddress));\\n  }\\n\\n  /// @notice Remove a Listing from the Marketplace\\n  /// @dev Marks Listing as not active object and transfers the Token back\\n  /// @param listingId NFT Listing Id.\\n  function removeListing(uint256 listingId) public nonReentrant\\n  {\\n    Listing storage listing = listings[listingId];\\n    require(listing.owner == _msgSender(), Errors.NOT_OWNER);\\n    require(listing.isActive, Errors.LISTING_IS_NOT_ACTIVED);\\n    listing.isActive = false;\\n    erc721Contract.transferFrom(\\n      address(this),\\n      _msgSender(),\\n      listing.tokenId\\n    );\\n    activeListingCount = activeListingCount - 1;\\n    emit ItemDelisted(listingId, listing.tokenId, _msgSender() );\\n  }\\n\\n  /// @notice Buys a listed NFT\\n  /// @dev Trabsfers both the ERC20 token (price) and the NFT.\\n  /// @param listingId NFT Listing Id.\\n  function buy(uint256 listingId) public payable nonReentrant whenNotPaused\\n  {\\n    require(listings[listingId].isActive, Errors.LISTING_IS_NOT_ACTIVED);\\n\\n    listings[listingId].isActive = false;\\n    IERC20 payTokenAddress = listings[listingId].tokenAddress;\\n    uint listedPrice = listings[listingId].price;\\n    uint256 buyingFee1 = (fee1 * listedPrice / DECIMAL_FACTOR);\\n    uint256 buyingFee2 = (fee2 * listedPrice / DECIMAL_FACTOR);\\n\\n    if (isUsingMatic) {\\n      require(msg.value == listedPrice, Errors.INVALID_AMOUNT);\\n      if (buyingFee1 > 0) {\\n        (bool sent1, ) = payable(treasury1).call{value: buyingFee1}(\\\"\\\");\\n        require(sent1, Errors.FAILED_TO_SEND_ETHER_TREASURY);\\n      }\\n      if (buyingFee2 > 0) {\\n        (bool sent2, ) = payable(treasury2).call{value: buyingFee2}(\\\"\\\");\\n        require(sent2, Errors.FAILED_TO_SEND_ETHER_COMPANY);\\n      }\\n      (bool sent, ) = payable(listings[listingId].owner).call{value: listedPrice - buyingFee1 - buyingFee2}(\\\"\\\");\\n      require(sent, Errors.FAILED_TO_SEND_ETHER_USER);\\n    } else {\\n      require(msg.value == 0, Errors.INVALID_AMOUNT);\\n      if (buyingFee1 > 0) {\\n        payTokenAddress.safeTransferFrom(\\n          _msgSender(),\\n          treasury1,\\n          buyingFee1\\n        );\\n      }\\n      if (buyingFee2 > 0) {\\n        payTokenAddress.safeTransferFrom(\\n          _msgSender(),\\n          treasury2,\\n          buyingFee2\\n        );\\n      }\\n      payTokenAddress.safeTransferFrom(\\n        _msgSender(),\\n        listings[listingId].owner,\\n        listedPrice - buyingFee1 - buyingFee2\\n      );\\n    }\\n    erc721Contract.transferFrom(\\n      address(this),\\n      _msgSender(),\\n      listings[listingId].tokenId\\n    );\\n    activeListingCount = activeListingCount - 1;\\n\\n    emit ItemSold(\\n      listingId,\\n      listings[listingId].tokenId,\\n      listings[listingId].owner,\\n      _msgSender(),\\n      listedPrice,\\n      buyingFee1,\\n      buyingFee2\\n    );\\n  }\\n\\n  /// @notice Sets a new Fee\\n  /// @param _fee1 new Fee1.\\n  /// @param _treasury1 New treasury1 address.\\n  /// @param _fee2 new Fee2.\\n  /// @param _treasury2 New treasury2 address.\\n  function setFee(uint256 _fee1, address _treasury1, uint256 _fee2, address _treasury2) public onlyOwner\\n  {\\n    require(_fee1 + _fee2 < DECIMAL_FACTOR, Errors.INVALID_PARAM);\\n    require(_treasury1 != address(0), Errors.NO_ZERO_ADDRESS);\\n    require(_treasury2 != address(0), Errors.NO_ZERO_ADDRESS);\\n\\n    fee1 = _fee1;\\n    treasury1 = _treasury1;\\n    fee2 = _fee2;\\n    treasury2 = _treasury2;\\n\\n    emit FeesChanged(\\n      fee1,\\n      treasury1,\\n      fee2,\\n      treasury2,\\n      _msgSender()\\n    );\\n  }\\n\\n  function setWhitelistTokens(address[] calldata _whitelist) external onlyOwner {\\n    for (uint i = 0; i < _whitelist.length; i++) {\\n      require(_whitelist[i] != address(0), Errors.NO_ZERO_ADDRESS);\\n      whitelistedTokens[_whitelist[i]] = true;\\n    }\\n\\n    emit WhitelistAdded(_whitelist);\\n  }\\n\\n  function removeWhitelistTokens(address[] calldata _whitelist) external onlyOwner {\\n    for (uint i = 0; i < _whitelist.length; i++) {\\n      require(_whitelist[i] != address(0), Errors.NO_ZERO_ADDRESS);\\n      whitelistedTokens[_whitelist[i]] = false;\\n    }\\n\\n    emit WhitelistRemoved(_whitelist);\\n  }\\n\\n  function flipIsUsingMatic() external onlyOwner {\\n    isUsingMatic = !isUsingMatic;\\n  }\\n\\n  // @notice Pauses/Unpauses the contract\\n  // @dev While paused, addListing, and buy are not allowed\\n  // @param stop whether to pause or unpause the contract.\\n  function pause(bool stop) external onlyOwner {\\n    if (stop) {\\n      _pause();\\n    } else {\\n      _unpause();\\n    }\\n  }\\n}\\n\\n\",\"keccak256\":\"0xa579cb557c16f5523c5ba79968bef3d804f70aebc7a2fbdffdac9df2127dc72d\",\"license\":\"MIT\"},\"contracts/libraries/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/**\\n * @title Errors library\\n * @author JensonCollins\\n * @notice Defines the error messages emitted by the different contracts of the Aave protocol\\n * @dev Error messages prefix glossary:\\n *  - VL = ValidationLogic\\n *  - MATH = Math libraries\\n *  - CT = Common errors between tokens (AToken, VariableDebtToken and StableDebtToken)\\n *  - AT = AToken\\n *  - SDT = StableDebtToken\\n *  - VDT = VariableDebtToken\\n *  - LP = LendingPool\\n *  - LPAPR = LendingPoolAddressesProviderRegistry\\n *  - LPC = LendingPoolConfiguration\\n *  - RL = ReserveLogic\\n *  - LPCM = LendingPoolCollateralManager\\n *  - P = Pausable\\n */\\n\\nlibrary Errors {\\n    //common errors\\n    string public constant NO_ZERO_ADDRESS = \\\"1\\\"; // Address cannot be zero\\n    string public constant NO_ZERO_VALUE = \\\"2\\\"; // Value cannot be zero\\n    string public constant NOT_OWNER = \\\"3\\\"; // Caller is not owner\\n    string public constant NOT_EXIST_TOKEN_ID = \\\"4\\\"; // Token ID does not exist\\n    string public constant INVALID_PARAM = \\\"5\\\"; // Invalid parameter\\n    string public constant INVALID_AMOUNT = \\\"6\\\"; // In case msg.value amount is different as expected\\n    string public constant FAILED_TO_SEND_ETHER_TREASURY = \\\"7\\\"; // Failed to send ether to treasury\\n    string public constant FAILED_TO_SEND_ETHER_COMPANY = \\\"8\\\"; // Failed to send ether to company\\n    string public constant USING_MATIC_NOW = \\\"9\\\"; // Using MATIC now\\n    string public constant NOT_USING_MATIC_NOW = \\\"10\\\"; // Not using MATIC now\\n\\n    // AccessControl\\n    string public constant MISSING_GAME_ROLE = \\\"11\\\"; // Caller does not have the GAME_ROLE role\\n\\n    // BlastEquipmentNFT contract\\n    string public constant MAX_LEVEL_REACHED = \\\"12\\\"; // Max level reached\\n\\n    // Marektplace contract\\n    string public constant TOKEN_NOT_WHITELISTED = \\\"13\\\"; // Caller is not whitelisted\\n    string public constant LISTING_IS_NOT_ACTIVED = \\\"14\\\"; // Listing is not actived\\n    string public constant FAILED_TO_SEND_ETHER_USER = \\\"15\\\"; // Failed to send ether to user\\n\\n    // MarketplaceLootbox contract\\n    string public constant MAX_LIMIT_REACHED = \\\"16\\\"; // Reached max limit\\n    string public constant INVALID_MERKLE_PROOF = \\\"17\\\"; // Invalid merkle proof\\n\\n    // Lootbox contract\\n    string public constant NOT_AVAILABLE_TO_OPEN = \\\"18\\\"; // Lootbox is not available to open\\n\\n    // CS contract\\n    string public constant CS_EXPIRED_DEADLINE = \\\"19\\\"; // Invalid signature\\n    string public constant CS_INVALID_SIGNATURE = \\\"20\\\"; // Invalid signature\\n\\n    // Replicator contract\\n    string public constant NOT_READY_REPLICATE = \\\"21\\\"; // Not ready to replicate\\n    string public constant NOT_READY_MORPH = \\\"22\\\"; // Not ready to morph\\n    string public constant INVALID_HEX_CHARACTER = \\\"23\\\"; // Not ready to morph\\n}\\n\",\"keccak256\":\"0xaeb98ec3fa04644f2d4ee95edc1b2c81ca9ad71f4d2332f856cfb473621182ee\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162001afc38038062001afc833981016040819052620000349162000114565b60016000556200004433620000c2565b6001805460ff60a01b1916815560408051808201909152908152603160f81b60208201526001600160a01b0382166200009b5760405162461bcd60e51b815260040162000092919062000146565b60405180910390fd5b50600a80546001600160a01b0319166001600160a01b03929092169190911790556200019e565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000602082840312156200012757600080fd5b81516001600160a01b03811681146200013f57600080fd5b9392505050565b600060208083528351808285015260005b81811015620001755785810183015185820160400152820162000157565b8181111562000188576000604083870101525b50601f01601f1916929092016040019392505050565b61194e80620001ae6000396000f3fe6080604052600436106101095760003560e01c80638da5cb5b11610095578063d96a094a11610064578063d96a094a146102a2578063daf9c210146102b5578063de74e57b146102e5578063df8de16314610371578063f2fde38b1461039257600080fd5b80638da5cb5b14610224578063a9b07c261461024c578063b25706f314610262578063cf49e50a1461028257600080fd5b806333fdbbe5116100dc57806333fdbbe5146101855780634681a7c6146101ae578063479ad4c3146101c45780635c975abb146101e4578063715018a61461020f57600080fd5b8063021946fd1461010e57806302329a291461012557806326c0eb1714610145578063278b407714610165575b600080fd5b34801561011a57600080fd5b506101236103b2565b005b34801561013157600080fd5b506101236101403660046115c0565b6103db565b34801561015157600080fd5b506101236101603660046115f2565b6103fc565b34801561017157600080fd5b5061012361018036600461162b565b61065a565b34801561019157600080fd5b5061019b61271081565b6040519081526020015b60405180910390f35b3480156101ba57600080fd5b5061019b60035481565b3480156101d057600080fd5b506101236101df366004611675565b6107cb565b3480156101f057600080fd5b50600154600160a01b900460ff165b60405190151581526020016101a5565b34801561021b57600080fd5b50610123610960565b34801561023057600080fd5b506001546040516001600160a01b0390911681526020016101a5565b34801561025857600080fd5b5061019b60025481565b34801561026e57600080fd5b5061012361027d36600461168e565b610974565b34801561028e57600080fd5b5061012361029d36600461168e565b610a99565b6101236102b0366004611675565b610bb2565b3480156102c157600080fd5b506101ff6102d0366004611703565b60086020526000908152604090205460ff1681565b3480156102f157600080fd5b5061033d610300366004611675565b60096020526000908152604090208054600182015460028301546003909301546001600160a01b0380841694600160a01b90940460ff1693911685565b604080516001600160a01b03968716815294151560208601528401929092526060830152909116608082015260a0016101a5565b34801561037d57600080fd5b506007546101ff90600160a01b900460ff1681565b34801561039e57600080fd5b506101236103ad366004611703565b61109f565b6103ba611115565b6007805460ff60a01b198116600160a01b9182900460ff1615909102179055565b6103e3611115565b80156103f4576103f161116f565b50565b6103f16111cf565b600260005414156104285760405162461bcd60e51b815260040161041f90611720565b60405180910390fd5b600260005561043561120b565b6040805180820190915260018152601960f91b60208201528261046b5760405162461bcd60e51b815260040161041f9190611783565b506001600160a01b038116156104d3576001600160a01b0381166000908152600860209081526040918290205482518084019093526002835261313360f01b9183019190915260ff166104d15760405162461bcd60e51b815260040161041f9190611783565b505b600280546040805160a081018252338152600160208083018281528385018a8152606085018a81526001600160a01b038a81166080880190815260008a81526009909652979094209551865493511515600160a01b026001600160a81b03199094169085161792909217855551848401555183870155925160039092018054929093166001600160a01b0319909216919091179091559154909161057791906117cc565b6002556003546105889060016117cc565b600355600a546001600160a01b03166323b872dd3330876040518463ffffffff1660e01b81526004016105bd939291906117e4565b600060405180830381600087803b1580156105d757600080fd5b505af11580156105eb573d6000803e3d6000fd5b505050507fdf1244428a7b48d2acd17fb49cd78f241dcef1479d83339825675596eddf98be81856106193390565b6040805193845260208401929092526001600160a01b03908116838301526060830187905285166080830152519081900360a00190a1505060016000555050565b610662611115565b61271061066f83866117cc565b10604051806040016040528060018152602001603560f81b815250906106a85760405162461bcd60e51b815260040161041f9190611783565b506040805180820190915260018152603160f81b60208201526001600160a01b0384166106e85760405162461bcd60e51b815260040161041f9190611783565b506040805180820190915260018152603160f81b60208201526001600160a01b0382166107285760405162461bcd60e51b815260040161041f9190611783565b506004849055600580546001600160a01b038086166001600160a01b031992831681179093556006859055600780549185169190921681179091557f411e041470d4dfedf5a73fbf6f67504194747ee8253ff0c2761da0c9e4e53b5791869185906107903390565b604080519586526001600160a01b0394851660208701528501929092528216606084015216608082015260a00160405180910390a150505050565b600260005414156107ee5760405162461bcd60e51b815260040161041f90611720565b600260009081558181526009602052604090203381546040805180820190915260018152603360f81b6020820152916001600160a01b039182169116146108485760405162461bcd60e51b815260040161041f9190611783565b5080546040805180820190915260028152610c4d60f21b602082015290600160a01b900460ff1661088c5760405162461bcd60e51b815260040161041f9190611783565b50805460ff60a01b19168155600a5460018201546040516323b872dd60e01b81526001600160a01b03909216916323b872dd916108cf91309133916004016117e4565b600060405180830381600087803b1580156108e957600080fd5b505af11580156108fd573d6000803e3d6000fd5b5050505060016003546109109190611808565b60035560018101546040805184815260208101929092523382820152517f30411792a34feb0f32a6be64e1996fa803c4505bbf6314f391f3d63c24ae52d59181900360600190a150506001600055565b610968611115565b6109726000611258565b565b61097c611115565b60005b81811015610a5b57600083838381811061099b5761099b61181f565b90506020020160208101906109b09190611703565b6001600160a01b03161415604051806040016040528060018152602001603160f81b815250906109f35760405162461bcd60e51b815260040161041f9190611783565b50600060086000858585818110610a0c57610a0c61181f565b9050602002016020810190610a219190611703565b6001600160a01b031681526020810191909152604001600020805460ff191691151591909117905580610a5381611835565b91505061097f565b507f1d474f57a5c483b47a8bf6006e39086f96dd040a00cb348e22f80a4ca2c6f2228282604051610a8d929190611850565b60405180910390a15050565b610aa1611115565b60005b81811015610b80576000838383818110610ac057610ac061181f565b9050602002016020810190610ad59190611703565b6001600160a01b03161415604051806040016040528060018152602001603160f81b81525090610b185760405162461bcd60e51b815260040161041f9190611783565b50600160086000858585818110610b3157610b3161181f565b9050602002016020810190610b469190611703565b6001600160a01b031681526020810191909152604001600020805460ff191691151591909117905580610b7881611835565b915050610aa4565b507ff74f148a4f930a0f67a2c33ba932a14e3e91b4e6468f21e545932fd8251115388282604051610a8d929190611850565b60026000541415610bd55760405162461bcd60e51b815260040161041f90611720565b6002600055610be261120b565b60008181526009602090815260409182902054825180840190935260028352610c4d60f21b91830191909152600160a01b900460ff16610c355760405162461bcd60e51b815260040161041f9190611783565b506000818152600960205260408120805460ff60a01b1916815560038101546002909101546004546001600160a01b0390921692909161271090610c7a90849061189e565b610c8491906118bd565b9050600061271083600654610c99919061189e565b610ca391906118bd565b600754909150600160a01b900460ff1615610ed4576040805180820190915260018152601b60f91b6020820152348414610cf05760405162461bcd60e51b815260040161041f9190611783565b508115610d89576005546040516000916001600160a01b03169084908381818185875af1925050503d8060008114610d44576040519150601f19603f3d011682016040523d82523d6000602084013e610d49565b606091505b5050905080604051806040016040528060018152602001603760f81b81525090610d865760405162461bcd60e51b815260040161041f9190611783565b50505b8015610e21576007546040516000916001600160a01b03169083908381818185875af1925050503d8060008114610ddc576040519150601f19603f3d011682016040523d82523d6000602084013e610de1565b606091505b5050905080604051806040016040528060018152602001600760fb1b81525090610e1e5760405162461bcd60e51b815260040161041f9190611783565b50505b6000858152600960205260408120546001600160a01b031682610e448587611808565b610e4e9190611808565b604051600081818185875af1925050503d8060008114610e8a576040519150601f19603f3d011682016040523d82523d6000602084013e610e8f565b606091505b505090508060405180604001604052806002815260200161313560f01b81525090610ecd5760405162461bcd60e51b815260040161041f9190611783565b5050610f91565b6040805180820190915260018152601b60f91b60208201523415610f0b5760405162461bcd60e51b815260040161041f9190611783565b508115610f2d57610f2d336005546001600160a01b03878116929116856112aa565b8015610f4e57610f4e336007546001600160a01b03878116929116846112aa565b610f91336000878152600960205260409020546001600160a01b031683610f758688611808565b610f7f9190611808565b6001600160a01b0388169291906112aa565b600a54600086815260096020526040908190206001015490516323b872dd60e01b81526001600160a01b03909216916323b872dd91610fd691309133916004016117e4565b600060405180830381600087803b158015610ff057600080fd5b505af1158015611004573d6000803e3d6000fd5b5050505060016003546110179190611808565b600355600085815260096020908152604091829020600181015490548351898152928301919091526001600160a01b0316818301523360608201526080810185905260a0810184905260c0810183905290517fc9141a3ddac52db2f53a95c9610152ab9e2145dedee43277af213c5e2a7d39919181900360e00190a150506001600055505050565b6110a7611115565b6001600160a01b03811661110c5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161041f565b6103f181611258565b6001546001600160a01b031633146109725760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161041f565b61117761120b565b6001805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586111b23390565b6040516001600160a01b03909116815260200160405180910390a1565b6111d7611308565b6001805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa336111b2565b600154600160a01b900460ff16156109725760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015260640161041f565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b611302846323b872dd60e01b8585856040516024016112cb939291906117e4565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611358565b50505050565b600154600160a01b900460ff166109725760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015260640161041f565b60006113ad826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661142f9092919063ffffffff16565b80519091501561142a57808060200190518101906113cb91906118df565b61142a5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161041f565b505050565b606061143e8484600085611448565b90505b9392505050565b6060824710156114a95760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161041f565b6001600160a01b0385163b6115005760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161041f565b600080866001600160a01b0316858760405161151c91906118fc565b60006040518083038185875af1925050503d8060008114611559576040519150601f19603f3d011682016040523d82523d6000602084013e61155e565b606091505b509150915061156e828286611579565b979650505050505050565b60608315611588575081611441565b8251156115985782518084602001fd5b8160405162461bcd60e51b815260040161041f9190611783565b80151581146103f157600080fd5b6000602082840312156115d257600080fd5b8135611441816115b2565b6001600160a01b03811681146103f157600080fd5b60008060006060848603121561160757600080fd5b83359250602084013591506040840135611620816115dd565b809150509250925092565b6000806000806080858703121561164157600080fd5b843593506020850135611653816115dd565b925060408501359150606085013561166a816115dd565b939692955090935050565b60006020828403121561168757600080fd5b5035919050565b600080602083850312156116a157600080fd5b823567ffffffffffffffff808211156116b957600080fd5b818501915085601f8301126116cd57600080fd5b8135818111156116dc57600080fd5b8660208260051b85010111156116f157600080fd5b60209290920196919550909350505050565b60006020828403121561171557600080fd5b8135611441816115dd565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60005b8381101561177257818101518382015260200161175a565b838111156113025750506000910152565b60208152600082518060208401526117a2816040850160208701611757565b601f01601f19169190910160400192915050565b634e487b7160e01b600052601160045260246000fd5b600082198211156117df576117df6117b6565b500190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b60008282101561181a5761181a6117b6565b500390565b634e487b7160e01b600052603260045260246000fd5b6000600019821415611849576118496117b6565b5060010190565b60208082528181018390526000908460408401835b86811015611893578235611878816115dd565b6001600160a01b031682529183019190830190600101611865565b509695505050505050565b60008160001904831182151516156118b8576118b86117b6565b500290565b6000826118da57634e487b7160e01b600052601260045260246000fd5b500490565b6000602082840312156118f157600080fd5b8151611441816115b2565b6000825161190e818460208701611757565b919091019291505056fea2646970667358221220ff0185d66d7951ebdc704dc494d1636c27738d59aec11fb00ad4e9c0c898340064736f6c63430008090033",
  "deployedBytecode": "",
  "devdoc": {
    "details": "Based on OpenZeppelin Contracts.",
    "kind": "dev",
    "methods": {
      "addListing(uint256,uint256,address)": {
        "details": "Creates a new entry for a Listing object and transfers the Token to the contract",
        "params": {
          "price": "Price in NFTs.",
          "tokenId": "NFT TokenId."
        }
      },
      "buy(uint256)": {
        "details": "Trabsfers both the ERC20 token (price) and the NFT.",
        "params": {
          "listingId": "NFT Listing Id."
        }
      },
      "constructor": {
        "details": "Setup the two contracts it will interact with : ERC721 and ERC20",
        "params": {
          "erc721Address": "Address of the NFT Contract."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "removeListing(uint256)": {
        "details": "Marks Listing as not active object and transfers the Token back",
        "params": {
          "listingId": "NFT Listing Id."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setFee(uint256,address,uint256,address)": {
        "params": {
          "_fee1": "new Fee1.",
          "_fee2": "new Fee2.",
          "_treasury1": "New treasury1 address.",
          "_treasury2": "New treasury2 address."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "Blast Royale Token - $BLT",
    "version": 1
  },
  "userdoc": {
    "events": {
      "FeesChanged(uint256,address,uint256,address,address)": {
        "notice": "Event Fee changed"
      },
      "ItemDelisted(uint256,uint256,address)": {
        "notice": "Event Delisted"
      },
      "ItemListed(uint256,uint256,address,uint256,address)": {
        "notice": "Event Listed"
      },
      "ItemSold(uint256,uint256,address,address,uint256,uint256,uint256)": {
        "notice": "EventItem Sold"
      }
    },
    "kind": "user",
    "methods": {
      "addListing(uint256,uint256,address)": {
        "notice": "add a Listing to the Marketplace"
      },
      "buy(uint256)": {
        "notice": "Buys a listed NFT"
      },
      "constructor": {
        "notice": "Token constructor"
      },
      "removeListing(uint256)": {
        "notice": "Remove a Listing from the Marketplace"
      },
      "setFee(uint256,address,uint256,address)": {
        "notice": "Sets a new Fee"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 231,
        "contract": "contracts/Marketplace.sol:Marketplace",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 7,
        "contract": "contracts/Marketplace.sol:Marketplace",
        "label": "_owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 130,
        "contract": "contracts/Marketplace.sol:Marketplace",
        "label": "_paused",
        "offset": 20,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 1138,
        "contract": "contracts/Marketplace.sol:Marketplace",
        "label": "listingCount",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 1140,
        "contract": "contracts/Marketplace.sol:Marketplace",
        "label": "activeListingCount",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 1142,
        "contract": "contracts/Marketplace.sol:Marketplace",
        "label": "fee1",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 1144,
        "contract": "contracts/Marketplace.sol:Marketplace",
        "label": "treasury1",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 1146,
        "contract": "contracts/Marketplace.sol:Marketplace",
        "label": "fee2",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 1148,
        "contract": "contracts/Marketplace.sol:Marketplace",
        "label": "treasury2",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 1150,
        "contract": "contracts/Marketplace.sol:Marketplace",
        "label": "isUsingMatic",
        "offset": 20,
        "slot": "7",
        "type": "t_bool"
      },
      {
        "astId": 1154,
        "contract": "contracts/Marketplace.sol:Marketplace",
        "label": "whitelistedTokens",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 1159,
        "contract": "contracts/Marketplace.sol:Marketplace",
        "label": "listings",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_struct(Listing)1122_storage)"
      },
      {
        "astId": 1162,
        "contract": "contracts/Marketplace.sol:Marketplace",
        "label": "erc721Contract",
        "offset": 0,
        "slot": "10",
        "type": "t_contract(IERC721)771"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)338": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IERC721)771": {
        "encoding": "inplace",
        "label": "contract IERC721",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_struct(Listing)1122_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Listing)",
        "numberOfBytes": "32",
        "value": "t_struct(Listing)1122_storage"
      },
      "t_struct(Listing)1122_storage": {
        "encoding": "inplace",
        "label": "struct Listing",
        "members": [
          {
            "astId": 1112,
            "contract": "contracts/Marketplace.sol:Marketplace",
            "label": "owner",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1114,
            "contract": "contracts/Marketplace.sol:Marketplace",
            "label": "isActive",
            "offset": 20,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 1116,
            "contract": "contracts/Marketplace.sol:Marketplace",
            "label": "tokenId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1118,
            "contract": "contracts/Marketplace.sol:Marketplace",
            "label": "price",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1121,
            "contract": "contracts/Marketplace.sol:Marketplace",
            "label": "tokenAddress",
            "offset": 0,
            "slot": "3",
            "type": "t_contract(IERC20)338"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}