{
  "address": "0x1Bb68c22F79c25F2C4F337eC6D8B54D4a0b80741",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "contract IBlastEquipmentNFT",
          "name": "_blastEquipmentNFT",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lootboxId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "token0",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "token1",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "token2",
          "type": "uint256"
        }
      ],
      "name": "Open",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "GAME_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_tokenIdCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "blastEquipmentNFT",
      "outputs": [
        {
          "internalType": "contract IBlastEquipmentNFT",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getTokenType",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "open",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "openAvailable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "openTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "stop",
          "type": "bool"
        }
      ],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_to",
          "type": "address[]"
        },
        {
          "internalType": "string[]",
          "name": "_uri",
          "type": "string[]"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "token0",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "token1",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "token2",
              "type": "uint256"
            }
          ],
          "internalType": "struct BlastLootBox.LootBox[]",
          "name": "_eqtIds",
          "type": "tuple[]"
        },
        {
          "internalType": "uint8",
          "name": "_tokenType",
          "type": "uint8"
        }
      ],
      "name": "safeMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_status",
          "type": "bool"
        }
      ],
      "name": "setOpenAvailableStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x8345dd94ff92b7c22bbbb7e013c4d6f525348bd8e1604cdc48a898fbda5de30d",
  "receipt": {
    "to": null,
    "from": "0x7Ac410F4E36873022b57821D7a8EB3D7513C045a",
    "contractAddress": "0x1Bb68c22F79c25F2C4F337eC6D8B54D4a0b80741",
    "transactionIndex": 29,
    "gasUsed": "2390738",
    "logsBloom": "0x
    "blockHash": "0xab81255b3296d70cc3fc811fe18ba7cc7f36e56d373d1ce04e964ad0c2af1caa",
    "transactionHash": "0x8345dd94ff92b7c22bbbb7e013c4d6f525348bd8e1604cdc48a898fbda5de30d",
    "logs": [
      {
        "transactionIndex": 29,
        "blockNumber": 28680315,
        "transactionHash": "0x8345dd94ff92b7c22bbbb7e013c4d6f525348bd8e1604cdc48a898fbda5de30d",
        "address": "0x1Bb68c22F79c25F2C4F337eC6D8B54D4a0b80741",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000007ac410f4e36873022b57821d7a8eb3d7513c045a",
          "0x0000000000000000000000007ac410f4e36873022b57821d7a8eb3d7513c045a"
        ],
        "data": "0x",
        "logIndex": 129,
        "blockHash": "0xab81255b3296d70cc3fc811fe18ba7cc7f36e56d373d1ce04e964ad0c2af1caa"
      },
      {
        "transactionIndex": 29,
        "blockNumber": 28680315,
        "transactionHash": "0x8345dd94ff92b7c22bbbb7e013c4d6f525348bd8e1604cdc48a898fbda5de30d",
        "address": "0x1Bb68c22F79c25F2C4F337eC6D8B54D4a0b80741",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x6a64baf327d646d1bca72653e2a075d15fd6ac6d8cbd7f6ee03fc55875e0fa88",
          "0x0000000000000000000000007ac410f4e36873022b57821d7a8eb3d7513c045a",
          "0x0000000000000000000000007ac410f4e36873022b57821d7a8eb3d7513c045a"
        ],
        "data": "0x",
        "logIndex": 130,
        "blockHash": "0xab81255b3296d70cc3fc811fe18ba7cc7f36e56d373d1ce04e964ad0c2af1caa"
      },
      {
        "transactionIndex": 29,
        "blockNumber": 28680315,
        "transactionHash": "0x8345dd94ff92b7c22bbbb7e013c4d6f525348bd8e1604cdc48a898fbda5de30d",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000007ac410f4e36873022b57821d7a8eb3d7513c045a",
          "0x000000000000000000000000c275dc8be39f50d12f66b6a63629c39da5bae5bd"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000cbd8b9a0108d200000000000000000000000000000000000000000000004a908b5f794962eca0000000000000000000000000000000000000000000000a2a31e37ca338c06a1d00000000000000000000000000000000000000000000004a907ea1edaf61e3ce000000000000000000000000000000000000000000000a2a31f03a2ed2c172ef",
        "logIndex": 131,
        "blockHash": "0xab81255b3296d70cc3fc811fe18ba7cc7f36e56d373d1ce04e964ad0c2af1caa"
      }
    ],
    "blockNumber": 28680315,
    "cumulativeGasUsed": "9791813",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "Test Blast Lootbox",
    "TestBLX",
    "0xb1e2ba7D374e3A9B4EefbF8Df49516B277459b78"
  ],
  "numDeployments": 1,
  "solcInputHash": "9679bf2be07d0d5ae98ab346fabce69b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"contract IBlastEquipmentNFT\",\"name\":\"_blastEquipmentNFT\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lootboxId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"token0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"token1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"token2\",\"type\":\"uint256\"}],\"name\":\"Open\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GAME_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_tokenIdCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blastEquipmentNFT\",\"outputs\":[{\"internalType\":\"contract IBlastEquipmentNFT\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getTokenType\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"open\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openAvailable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"openTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"stop\",\"type\":\"bool\"}],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_to\",\"type\":\"address[]\"},{\"internalType\":\"string[]\",\"name\":\"_uri\",\"type\":\"string[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"token0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token2\",\"type\":\"uint256\"}],\"internalType\":\"struct BlastLootBox.LootBox[]\",\"name\":\"_eqtIds\",\"type\":\"tuple[]\"},{\"internalType\":\"uint8\",\"name\":\"_tokenType\",\"type\":\"uint8\"}],\"name\":\"safeMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setOpenAvailableStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"BlastLootBox ERC721 token\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"constructor\":{\"params\":{\"name\":\"Name of the contract\",\"symbol\":\"Symbol of the contract\"}},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getTokenType(uint256)\":{\"details\":\"Returned value should be 1 or 2\",\"params\":{\"_tokenId\":\"Token ID.\"}},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"safeMint(address[],string[],(uint256,uint256,uint256)[],uint8)\":{\"details\":\"The caller must have the `DEFAULT_ADMIN_ROLE`. _tokenType should be 1 or 2 (In case of 1, it's normal box. In case of 2, it's gw box)\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\",\"params\":{\"interfaceId\":\"Interface ID.\"}},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"params\":{\"tokenId\":\"Token ID.\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"title\":\"Blast LootBox NFT\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getTokenType(uint256)\":{\"notice\":\"Get Token Type. (GWB or NB)\"},\"safeMint(address[],string[],(uint256,uint256,uint256)[],uint8)\":{\"notice\":\"Creates a new token for `_to`. Its token ID will be automatically\"},\"tokenURI(uint256)\":{\"notice\":\"Returns the TokenURI.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BlastLootBox.sol\":\"BlastLootBox\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5b35d8e68aeaccc685239bd9dd79b9ba01a0357930f8a3307ab85511733d9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x0849d93b16c9940beb286a7864ed02724b248b93e0d80ef6355af5ef15c64773\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x0b606994df12f0ce35f6d2f6dcdde7e55e6899cdef7e00f180980caa81e3844e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is ERC721 {\\n    using Strings for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_burn}. This override additionally checks to see if a\\n     * token-specific URI was set for the token, and if so, it deletes the token URI from\\n     * the storage mapping.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5c3501c1b70fcfc64417e9da5cc6a3597191baa354781e508e1e14cc0e50a038\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/utils/ERC721Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Receiver.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC721Receiver} interface.\\n *\\n * Accepts all token transfers.\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n */\\ncontract ERC721Holder is IERC721Receiver {\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x0108bf6a6ebd5f96678bed33a35947537263f96766131ee91461fb6485805028\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/BlastLootBox.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"./interfaces/IBlastLootbox.sol\\\";\\nimport \\\"./interfaces/IBlastEquipmentNFT.sol\\\";\\nimport { Errors } from \\\"./libraries/Errors.sol\\\";\\n\\n/// @title Blast LootBox NFT\\n/// @dev BlastLootBox ERC721 token\\ncontract BlastLootBox is\\n    IBlastLootbox,\\n    ERC721,\\n    ERC721URIStorage,\\n    ERC721Holder,\\n    Pausable,\\n    AccessControl\\n{\\n    using Counters for Counters.Counter;\\n\\n    struct LootBox {\\n        uint256 token0;\\n        uint256 token1;\\n        uint256 token2;\\n    }\\n\\n    bytes32 public constant GAME_ROLE = keccak256(\\\"GAME_ROLE\\\");\\n\\n    Counters.Counter public _tokenIdCounter;\\n    mapping(uint256 => LootBox) private lootboxDetails;\\n    mapping(uint256 => uint8) private tokenTypes;\\n    IBlastEquipmentNFT public blastEquipmentNFT;\\n    bool public openAvailable;\\n\\n    /// @param name Name of the contract\\n    /// @param symbol Symbol of the contract\\n    constructor(\\n        string memory name,\\n        string memory symbol,\\n        IBlastEquipmentNFT _blastEquipmentNFT\\n    ) ERC721(name, symbol) {\\n        require(address(_blastEquipmentNFT) != address(0), Errors.NO_ZERO_ADDRESS);\\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n        _setupRole(GAME_ROLE, _msgSender());\\n        blastEquipmentNFT = _blastEquipmentNFT;\\n    }\\n\\n    /// @notice Creates a new token for `_to`. Its token ID will be automatically\\n    /// @dev The caller must have the `DEFAULT_ADMIN_ROLE`.\\n    /// _tokenType should be 1 or 2 (In case of 1, it's normal box. In case of 2, it's gw box)\\n    function safeMint(\\n        address[] calldata _to,\\n        string[] calldata _uri,\\n        LootBox[] calldata _eqtIds,\\n        uint8 _tokenType\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        require(_to.length == _uri.length && _to.length == _eqtIds.length, Errors.INVALID_PARAM);\\n        require(_tokenType == 1 || _tokenType == 2, Errors.INVALID_PARAM);\\n\\n        for (uint256 i = 0; i < _to.length; i++) {\\n            uint256 tokenId = _tokenIdCounter.current();\\n            _tokenIdCounter.increment();\\n            lootboxDetails[tokenId] = _eqtIds[i];\\n            tokenTypes[tokenId] = _tokenType;\\n            _mint(_to[i], tokenId);\\n            _setTokenURI(tokenId, _uri[i]);\\n        }\\n    }\\n\\n    function open(uint256 _tokenId) external {\\n        require(_exists(_tokenId), Errors.NOT_EXIST_TOKEN_ID);\\n        require(_msgSender() == ownerOf(_tokenId), Errors.NOT_OWNER);\\n        require(openAvailable, Errors.NOT_AVAILABLE_TO_OPEN);\\n\\n        _open(_tokenId, _msgSender());\\n    }\\n\\n    function openTo(uint256 _tokenId, address _to)\\n        external\\n        onlyRole(GAME_ROLE)\\n    {\\n        require(_exists(_tokenId), Errors.NOT_EXIST_TOKEN_ID);\\n        require(_to == ownerOf(_tokenId), Errors.NOT_OWNER);\\n        require(openAvailable, Errors.NOT_AVAILABLE_TO_OPEN);\\n\\n        _open(_tokenId, _to);\\n    }\\n\\n    function _open(uint256 _tokenId, address _to) internal {\\n        LootBox memory _eqtIds = lootboxDetails[_tokenId];\\n\\n        blastEquipmentNFT.transferFrom(address(this), _to, _eqtIds.token0);\\n        blastEquipmentNFT.transferFrom(address(this), _to, _eqtIds.token1);\\n        blastEquipmentNFT.transferFrom(address(this), _to, _eqtIds.token2);\\n\\n        blastEquipmentNFT.revealRealTokenURI(_eqtIds.token0);\\n        blastEquipmentNFT.revealRealTokenURI(_eqtIds.token1);\\n        blastEquipmentNFT.revealRealTokenURI(_eqtIds.token2);\\n\\n        emit Open(_tokenId, _eqtIds.token0, _eqtIds.token1, _eqtIds.token2);\\n        _burn(_tokenId);\\n    }\\n\\n    /// @notice Get Token Type. (GWB or NB)\\n    /// @dev Returned value should be 1 or 2\\n    /// @param _tokenId Token ID.\\n    function getTokenType(uint256 _tokenId)\\n        external\\n        view\\n        override\\n        returns (uint8)\\n    {\\n        return tokenTypes[_tokenId];\\n    }\\n\\n    function setOpenAvailableStatus(bool _status)\\n        public\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        openAvailable = _status;\\n    }\\n\\n    /// @notice Unpauses all token transfers.\\n    /// @dev The caller must be the Owner (or have approval) of the Token.\\n    /// @param tokenId Token ID.\\n    function _burn(uint256 tokenId)\\n        internal\\n        override(ERC721, ERC721URIStorage)\\n    {\\n        super._burn(tokenId);\\n    }\\n\\n    /// @notice Returns the TokenURI.\\n    /// @param tokenId Token ID.\\n    function tokenURI(uint256 tokenId)\\n        public\\n        view\\n        override(ERC721, ERC721URIStorage)\\n        returns (string memory)\\n    {\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    // @notice Pauses/Unpauses the contract\\n    // @dev While paused, actions are not allowed\\n    // @param stop whether to pause or unpause the contract.\\n    function pause(bool stop) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (stop) {\\n            _pause();\\n        } else {\\n            _unpause();\\n        }\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override whenNotPaused {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /// @dev See {IERC165-supportsInterface}.\\n    /// @param interfaceId Interface ID.\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(AccessControl, IERC165, ERC721)\\n        returns (bool)\\n    {\\n        return super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xd48ea36d5d05f39c0cf35eb5bf19d2c6ce613b9f3b19a31bffa9a61df15eaaf3\",\"license\":\"MIT\"},\"contracts/interfaces/IBlastEquipmentNFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\nstruct StaticAttributes {\\n    uint8 maxLevel;\\n    uint8 maxDurability;\\n    uint8 adjective;\\n    uint8 rarity;\\n    uint8 grade;\\n}\\n\\n/**\\n * @dev required interface of an Equipment NFT.\\n */\\ninterface IBlastEquipmentNFT is IERC721 {\\n    /// @notice Event Attribute Updated\\n    event AttributeUpdated(\\n        uint256 tokenId,\\n        uint256 level,\\n        uint256 durabilityRestored,\\n        uint256 durability,\\n        uint256 lastRepairTime,\\n        uint256 repairCount,\\n        uint256 replicationCount\\n    );\\n\\n    /// @notice Event Revealed TokenURI\\n    event PermanentURI(string _value, uint256 indexed _id);\\n\\n    function safeMintReplicator(address _to, string calldata _uri, bytes32 _hash, string calldata _realUri, StaticAttributes calldata _staticAttribute) external returns (uint);\\n\\n    function revealRealTokenURI(uint _tokenId) external;\\n\\n    function setRealTokenURI(uint _tokenId, string calldata _realUri) external;\\n\\n    function setLevel(uint256 _tokenId, uint256 _newLevel) external;\\n\\n    function setRepairCount(uint256 _tokenId, uint256 _newRepairCount) external;\\n\\n    function setReplicationCount(uint256 _tokenId, uint256 _newReplicationCount)\\n        external;\\n\\n    function scrap(uint256 _tokenId) external;\\n\\n    function getAttributes(uint256 _tokenId) external view returns (uint256, uint256, uint256, uint256, uint256, uint256);\\n\\n    function getStaticAttributes(uint256 _tokenId) external view returns (uint8, uint8, uint8, uint8, uint8);\\n}\\n\",\"keccak256\":\"0xfea10b0d20efacae0c7aa274befefaa4ea6f7b01b85e48d88524af6a215b362d\",\"license\":\"MIT\"},\"contracts/interfaces/IBlastLootbox.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\n/**\\n * @dev required interface of an Lootbox NFT.\\n */\\ninterface IBlastLootbox is IERC721 {\\n    event Open(uint lootboxId, uint token0, uint token1, uint token2);\\n\\n    function getTokenType(uint _tokenId) external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xd3720dd7a36458ff503187244c87782a72dc814e3d10c3876d409d4b35731573\",\"license\":\"MIT\"},\"contracts/libraries/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/**\\n * @title Errors library\\n * @author JensonCollins\\n * @notice Defines the error messages emitted by the different contracts of the Aave protocol\\n * @dev Error messages prefix glossary:\\n *  - VL = ValidationLogic\\n *  - MATH = Math libraries\\n *  - CT = Common errors between tokens (AToken, VariableDebtToken and StableDebtToken)\\n *  - AT = AToken\\n *  - SDT = StableDebtToken\\n *  - VDT = VariableDebtToken\\n *  - LP = LendingPool\\n *  - LPAPR = LendingPoolAddressesProviderRegistry\\n *  - LPC = LendingPoolConfiguration\\n *  - RL = ReserveLogic\\n *  - LPCM = LendingPoolCollateralManager\\n *  - P = Pausable\\n */\\n\\nlibrary Errors {\\n    //common errors\\n    string public constant NO_ZERO_ADDRESS = \\\"1\\\"; // Address cannot be zero\\n    string public constant NO_ZERO_VALUE = \\\"2\\\"; // Value cannot be zero\\n    string public constant NOT_OWNER = \\\"3\\\"; // Caller is not owner\\n    string public constant NOT_EXIST_TOKEN_ID = \\\"4\\\"; // Token ID does not exist\\n    string public constant INVALID_PARAM = \\\"5\\\"; // Invalid parameter\\n    string public constant INVALID_AMOUNT = \\\"6\\\"; // In case msg.value amount is different as expected\\n    string public constant FAILED_TO_SEND_ETHER_TREASURY = \\\"7\\\"; // Failed to send ether to treasury\\n    string public constant FAILED_TO_SEND_ETHER_COMPANY = \\\"8\\\"; // Failed to send ether to company\\n    string public constant USING_MATIC_NOW = \\\"9\\\"; // Using MATIC now\\n    string public constant NOT_USING_MATIC_NOW = \\\"10\\\"; // Not using MATIC now\\n\\n    // AccessControl\\n    string public constant MISSING_GAME_ROLE = \\\"11\\\"; // Caller does not have the GAME_ROLE role\\n\\n    // BlastEquipmentNFT contract\\n    string public constant MAX_LEVEL_REACHED = \\\"12\\\"; // Max level reached\\n\\n    // Marektplace contract\\n    string public constant TOKEN_NOT_WHITELISTED = \\\"13\\\"; // Caller is not whitelisted\\n    string public constant LISTING_IS_NOT_ACTIVED = \\\"14\\\"; // Listing is not actived\\n    string public constant FAILED_TO_SEND_ETHER_USER = \\\"15\\\"; // Failed to send ether to user\\n\\n    // MarketplaceLootbox contract\\n    string public constant MAX_LIMIT_REACHED = \\\"16\\\"; // Reached max limit\\n    string public constant INVALID_MERKLE_PROOF = \\\"17\\\"; // Invalid merkle proof\\n\\n    // Lootbox contract\\n    string public constant NOT_AVAILABLE_TO_OPEN = \\\"18\\\"; // Lootbox is not available to open\\n\\n    // CS contract\\n    string public constant CS_EXPIRED_DEADLINE = \\\"19\\\"; // Invalid signature\\n    string public constant CS_INVALID_SIGNATURE = \\\"20\\\"; // Invalid signature\\n\\n    // Replicator contract\\n    string public constant NOT_READY_REPLICATE = \\\"21\\\"; // Not ready to replicate\\n    string public constant NOT_READY_MORPH = \\\"22\\\"; // Not ready to morph\\n    string public constant INVALID_HEX_CHARACTER = \\\"23\\\"; // Not ready to morph\\n}\\n\",\"keccak256\":\"0xaeb98ec3fa04644f2d4ee95edc1b2c81ca9ad71f4d2332f856cfb473621182ee\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162002c2b38038062002c2b833981016040819052620000349162000352565b8251839083906200004d906000906020850190620001d2565b50805162000063906001906020840190620001d2565b50506007805460ff19169055506040805180820190915260018152603160f81b60208201526001600160a01b038216620000bb5760405162461bcd60e51b8152600401620000b29190620003df565b60405180910390fd5b50620000c96000336200011e565b620000f57f6a64baf327d646d1bca72653e2a075d15fd6ac6d8cbd7f6ee03fc55875e0fa88336200011e565b600c80546001600160a01b0319166001600160a01b039290921691909117905550620004519050565b6200012a82826200012e565b5050565b60008281526008602090815260408083206001600160a01b038516845290915290205460ff166200012a5760008281526008602090815260408083206001600160a01b03851684529091529020805460ff191660011790556200018e3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b828054620001e09062000414565b90600052602060002090601f0160209004810192826200020457600085556200024f565b82601f106200021f57805160ff19168380011785556200024f565b828001600101855582156200024f579182015b828111156200024f57825182559160200191906001019062000232565b506200025d92915062000261565b5090565b5b808211156200025d576000815560010162000262565b634e487b7160e01b600052604160045260246000fd5b60005b83811015620002ab57818101518382015260200162000291565b83811115620002bb576000848401525b50505050565b600082601f830112620002d357600080fd5b81516001600160401b0380821115620002f057620002f062000278565b604051601f8301601f19908116603f011681019082821181831017156200031b576200031b62000278565b816040528381528660208588010111156200033557600080fd5b620003488460208301602089016200028e565b9695505050505050565b6000806000606084860312156200036857600080fd5b83516001600160401b03808211156200038057600080fd5b6200038e87838801620002c1565b94506020860151915080821115620003a557600080fd5b50620003b486828701620002c1565b604086015190935090506001600160a01b0381168114620003d457600080fd5b809150509250925092565b6020815260008251806020840152620004008160408501602087016200028e565b601f01601f19169190910160400192915050565b600181811c908216806200042957607f821691505b602082108114156200044b57634e487b7160e01b600052602260045260246000fd5b50919050565b6127ca80620004616000396000f3fe608060405234801561001057600080fd5b50600436106101e55760003560e01c806370a082311161010f578063a217fddf116100a2578063c15b712c11610071578063c15b712c14610463578063c87b56dd14610476578063d547741f14610489578063e985e9c51461049c57600080fd5b8063a217fddf1461040e578063a22cb46514610416578063ab40070614610429578063b88d4fde1461045057600080fd5b806384c4bd4b116100de57806384c4bd4b146103d65780638d2a703e146103e057806391d14854146103f357806395d89b411461040657600080fd5b806370a082311461036857806372c6239a1461037b57806376aed2e11461038e5780637edee2b3146103c357600080fd5b8063248a9ca31161018757806342842e0e1161015657806342842e0e146103245780635c975abb146103375780636352211e14610342578063690e7c091461035557600080fd5b8063248a9ca3146102b95780632f2ff15d146102ea57806336568abe146102fd5780633bfca2f91461031057600080fd5b8063081812fc116101c3578063081812fc1461023c578063095ea7b314610267578063150b7a021461027a57806323b872dd146102a657600080fd5b806301ffc9a7146101ea57806302329a291461021257806306fdde0314610227575b600080fd5b6101fd6101f8366004612077565b6104d8565b60405190151581526020015b60405180910390f35b6102256102203660046120a9565b6104e9565b005b61022f61050e565b604051610209919061211c565b61024f61024a36600461212f565b6105a0565b6040516001600160a01b039091168152602001610209565b61022561027536600461215f565b6105c7565b61028d61028836600461219f565b6106e2565b6040516001600160e01b03199091168152602001610209565b6102256102b436600461227b565b6106f3565b6102dc6102c736600461212f565b60009081526008602052604090206001015490565b604051908152602001610209565b6102256102f83660046122b7565b610724565b61022561030b3660046122b7565b610749565b600c546101fd90600160a01b900460ff1681565b61022561033236600461227b565b6107c3565b60075460ff166101fd565b61024f61035036600461212f565b6107de565b61022561036336600461212f565b61083e565b6102dc6103763660046122e3565b610939565b600c5461024f906001600160a01b031681565b6103b161039c36600461212f565b6000908152600b602052604090205460ff1690565b60405160ff9091168152602001610209565b6102256103d136600461235b565b6109bf565b6009546102dc9081565b6102256103ee3660046122b7565b610b96565b6101fd6104013660046122b7565b610cb8565b61022f610ce3565b6102dc600081565b610225610424366004612436565b610cf2565b6102dc7f6a64baf327d646d1bca72653e2a075d15fd6ac6d8cbd7f6ee03fc55875e0fa8881565b61022561045e36600461219f565b610cfd565b6102256104713660046120a9565b610d35565b61022f61048436600461212f565b610d5f565b6102256104973660046122b7565b610d6a565b6101fd6104aa366004612460565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b60006104e382610d8f565b92915050565b60006104f481610db4565b811561050657610502610dbe565b5050565b610502610e18565b60606000805461051d9061248a565b80601f01602080910402602001604051908101604052809291908181526020018280546105499061248a565b80156105965780601f1061056b57610100808354040283529160200191610596565b820191906000526020600020905b81548152906001019060200180831161057957829003601f168201915b5050505050905090565b60006105ab82610e51565b506000908152600460205260409020546001600160a01b031690565b60006105d2826107de565b9050806001600160a01b0316836001600160a01b031614156106455760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b336001600160a01b0382161480610661575061066181336104aa565b6106d35760405162461bcd60e51b815260206004820152603e60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c0000606482015260840161063c565b6106dd8383610eb0565b505050565b630a85bd0160e11b5b949350505050565b6106fd3382610f1e565b6107195760405162461bcd60e51b815260040161063c906124c5565b6106dd838383610f9c565b60008281526008602052604090206001015461073f81610db4565b6106dd8383611143565b6001600160a01b03811633146107b95760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b606482015260840161063c565b61050282826111c9565b6106dd83838360405180602001604052806000815250610cfd565b6000818152600260205260408120546001600160a01b0316806104e35760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b604482015260640161063c565b6000818152600260205260409020546001600160a01b03161515604051806040016040528060018152602001600d60fa1b815250906108905760405162461bcd60e51b815260040161063c919061211c565b5061089a816107de565b6001600160a01b0316336001600160a01b031614604051806040016040528060018152602001603360f81b815250906108e65760405162461bcd60e51b815260040161063c919061211c565b50600c54604080518082019091526002815261062760f31b602082015290600160a01b900460ff1661092b5760405162461bcd60e51b815260040161063c919061211c565b506109368133611230565b50565b60006001600160a01b0382166109a35760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b606482015260840161063c565b506001600160a01b031660009081526003602052604090205490565b60006109ca81610db4565b86851480156109d857508683145b604051806040016040528060018152602001603560f81b81525090610a105760405162461bcd60e51b815260040161063c919061211c565b508160ff1660011480610a2657508160ff166002145b604051806040016040528060018152602001603560f81b81525090610a5e5760405162461bcd60e51b815260040161063c919061211c565b5060005b87811015610b8b576000610a7560095490565b9050610a85600980546001019055565b858583818110610a9757610a97612513565b6000848152600a6020908152604091829020606090930294909401803583559384013560018301558301356002820155905050506000818152600b60205260409020805460ff191660ff8616179055610b168a8a84818110610afb57610afb612513565b9050602002016020810190610b1091906122e3565b8261154a565b610b7881898985818110610b2c57610b2c612513565b9050602002810190610b3e9190612529565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061169892505050565b5080610b8381612586565b915050610a62565b505050505050505050565b7f6a64baf327d646d1bca72653e2a075d15fd6ac6d8cbd7f6ee03fc55875e0fa88610bc081610db4565b6000838152600260205260409020546001600160a01b03161515604051806040016040528060018152602001600d60fa1b81525090610c125760405162461bcd60e51b815260040161063c919061211c565b50610c1c836107de565b6001600160a01b0316826001600160a01b031614604051806040016040528060018152602001603360f81b81525090610c685760405162461bcd60e51b815260040161063c919061211c565b50600c54604080518082019091526002815261062760f31b602082015290600160a01b900460ff16610cad5760405162461bcd60e51b815260040161063c919061211c565b506106dd8383611230565b60009182526008602090815260408084206001600160a01b0393909316845291905290205460ff1690565b60606001805461051d9061248a565b610502338383611732565b610d073383610f1e565b610d235760405162461bcd60e51b815260040161063c906124c5565b610d2f84848484611801565b50505050565b6000610d4081610db4565b50600c8054911515600160a01b0260ff60a01b19909216919091179055565b60606104e382611834565b600082815260086020526040902060010154610d8581610db4565b6106dd83836111c9565b60006001600160e01b03198216637965db0b60e01b14806104e357506104e38261193d565b610936813361198d565b610dc66119f1565b6007805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258610dfb3390565b6040516001600160a01b03909116815260200160405180910390a1565b610e20611a39565b6007805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa33610dfb565b6000818152600260205260409020546001600160a01b03166109365760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b604482015260640161063c565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190610ee5826107de565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600080610f2a836107de565b9050806001600160a01b0316846001600160a01b03161480610f7157506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b806106eb5750836001600160a01b0316610f8a846105a0565b6001600160a01b031614949350505050565b826001600160a01b0316610faf826107de565b6001600160a01b0316146110135760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b606482015260840161063c565b6001600160a01b0382166110755760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b606482015260840161063c565b611080838383611a82565b61108b600082610eb0565b6001600160a01b03831660009081526003602052604081208054600192906110b49084906125a1565b90915550506001600160a01b03821660009081526003602052604081208054600192906110e29084906125b8565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b61114d8282610cb8565b6105025760008281526008602090815260408083206001600160a01b03851684529091529020805460ff191660011790556111853390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6111d38282610cb8565b156105025760008281526008602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000828152600a60209081526040918290208251606081018452815480825260018301549382019390935260029091015481840152600c5492516323b872dd60e01b81523060048201526001600160a01b0385811660248301526044820193909352909291909116906323b872dd90606401600060405180830381600087803b1580156112bc57600080fd5b505af11580156112d0573d6000803e3d6000fd5b5050600c5460208401516040516323b872dd60e01b81523060048201526001600160a01b0387811660248301526044820192909252911692506323b872dd9150606401600060405180830381600087803b15801561132d57600080fd5b505af1158015611341573d6000803e3d6000fd5b5050600c5460408481015190516323b872dd60e01b81523060048201526001600160a01b0387811660248301526044820192909252911692506323b872dd9150606401600060405180830381600087803b15801561139e57600080fd5b505af11580156113b2573d6000803e3d6000fd5b5050600c54835160405163058169e360e51b81526001600160a01b03909216935063b02d3c6092506113ea9160040190815260200190565b600060405180830381600087803b15801561140457600080fd5b505af1158015611418573d6000803e3d6000fd5b5050600c54602084015160405163058169e360e51b81526001600160a01b03909216935063b02d3c6092506114539160040190815260200190565b600060405180830381600087803b15801561146d57600080fd5b505af1158015611481573d6000803e3d6000fd5b5050600c54604080850151905163058169e360e51b81526001600160a01b03909216935063b02d3c6092506114bc9160040190815260200190565b600060405180830381600087803b1580156114d657600080fd5b505af11580156114ea573d6000803e3d6000fd5b5050825160208085015160408087015181518a81529384019490945282015260608101919091527f02fb9daf56c977530f60990eb8cd0510bc01218fd6376151dd4e91b660e579219250608001905060405180910390a16106dd83611a8a565b6001600160a01b0382166115a05760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604482015260640161063c565b6000818152600260205260409020546001600160a01b0316156116055760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604482015260640161063c565b61161160008383611a82565b6001600160a01b038216600090815260036020526040812080546001929061163a9084906125b8565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6000828152600260205260409020546001600160a01b03166117135760405162461bcd60e51b815260206004820152602e60248201527f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60448201526d32bc34b9ba32b73a103a37b5b2b760911b606482015260840161063c565b600082815260066020908152604090912082516106dd92840190611f92565b816001600160a01b0316836001600160a01b031614156117945760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604482015260640161063c565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b61180c848484610f9c565b61181884848484611a93565b610d2f5760405162461bcd60e51b815260040161063c906125d0565b606061183f82610e51565b600082815260066020526040812080546118589061248a565b80601f01602080910402602001604051908101604052809291908181526020018280546118849061248a565b80156118d15780601f106118a6576101008083540402835291602001916118d1565b820191906000526020600020905b8154815290600101906020018083116118b457829003601f168201915b5050505050905060006118ef60408051602081019091526000815290565b9050805160001415611902575092915050565b81511561193457808260405160200161191c929190612622565b60405160208183030381529060405292505050919050565b6106eb84611b9d565b60006001600160e01b031982166380ac58cd60e01b148061196e57506001600160e01b03198216635b5e139f60e01b145b806104e357506301ffc9a760e01b6001600160e01b03198316146104e3565b6119978282610cb8565b610502576119af816001600160a01b03166014611c11565b6119ba836020611c11565b6040516020016119cb929190612651565b60408051601f198184030181529082905262461bcd60e51b825261063c9160040161211c565b60075460ff1615611a375760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015260640161063c565b565b60075460ff16611a375760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015260640161063c565b6106dd6119f1565b61093681611dad565b60006001600160a01b0384163b15611b9557604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290611ad79033908990889088906004016126c6565b602060405180830381600087803b158015611af157600080fd5b505af1925050508015611b21575060408051601f3d908101601f19168201909252611b1e91810190612703565b60015b611b7b573d808015611b4f576040519150601f19603f3d011682016040523d82523d6000602084013e611b54565b606091505b508051611b735760405162461bcd60e51b815260040161063c906125d0565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506106eb565b5060016106eb565b6060611ba882610e51565b6000611bbf60408051602081019091526000815290565b90506000815111611bdf5760405180602001604052806000815250611c0a565b80611be984611ded565b604051602001611bfa929190612622565b6040516020818303038152906040525b9392505050565b60606000611c20836002612720565b611c2b9060026125b8565b67ffffffffffffffff811115611c4357611c43612189565b6040519080825280601f01601f191660200182016040528015611c6d576020820181803683370190505b509050600360fc1b81600081518110611c8857611c88612513565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611cb757611cb7612513565b60200101906001600160f81b031916908160001a9053506000611cdb846002612720565b611ce69060016125b8565b90505b6001811115611d5e576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110611d1a57611d1a612513565b1a60f81b828281518110611d3057611d30612513565b60200101906001600160f81b031916908160001a90535060049490941c93611d578161273f565b9050611ce9565b508315611c0a5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161063c565b611db681611eeb565b60008181526006602052604090208054611dcf9061248a565b15905061093657600081815260066020526040812061093691612016565b606081611e115750506040805180820190915260018152600360fc1b602082015290565b8160005b8115611e3b5780611e2581612586565b9150611e349050600a8361276c565b9150611e15565b60008167ffffffffffffffff811115611e5657611e56612189565b6040519080825280601f01601f191660200182016040528015611e80576020820181803683370190505b5090505b84156106eb57611e956001836125a1565b9150611ea2600a86612780565b611ead9060306125b8565b60f81b818381518110611ec257611ec2612513565b60200101906001600160f81b031916908160001a905350611ee4600a8661276c565b9450611e84565b6000611ef6826107de565b9050611f0481600084611a82565b611f0f600083610eb0565b6001600160a01b0381166000908152600360205260408120805460019290611f389084906125a1565b909155505060008281526002602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b828054611f9e9061248a565b90600052602060002090601f016020900481019282611fc05760008555612006565b82601f10611fd957805160ff1916838001178555612006565b82800160010185558215612006579182015b82811115612006578251825591602001919060010190611feb565b5061201292915061204c565b5090565b5080546120229061248a565b6000825580601f10612032575050565b601f01602090049060005260206000209081019061093691905b5b80821115612012576000815560010161204d565b6001600160e01b03198116811461093657600080fd5b60006020828403121561208957600080fd5b8135611c0a81612061565b803580151581146120a457600080fd5b919050565b6000602082840312156120bb57600080fd5b611c0a82612094565b60005b838110156120df5781810151838201526020016120c7565b83811115610d2f5750506000910152565b600081518084526121088160208601602086016120c4565b601f01601f19169290920160200192915050565b602081526000611c0a60208301846120f0565b60006020828403121561214157600080fd5b5035919050565b80356001600160a01b03811681146120a457600080fd5b6000806040838503121561217257600080fd5b61217b83612148565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b600080600080608085870312156121b557600080fd5b6121be85612148565b93506121cc60208601612148565b925060408501359150606085013567ffffffffffffffff808211156121f057600080fd5b818701915087601f83011261220457600080fd5b81358181111561221657612216612189565b604051601f8201601f19908116603f0116810190838211818310171561223e5761223e612189565b816040528281528a602084870101111561225757600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b60008060006060848603121561229057600080fd5b61229984612148565b92506122a760208501612148565b9150604084013590509250925092565b600080604083850312156122ca57600080fd5b823591506122da60208401612148565b90509250929050565b6000602082840312156122f557600080fd5b611c0a82612148565b60008083601f84011261231057600080fd5b50813567ffffffffffffffff81111561232857600080fd5b6020830191508360208260051b850101111561234357600080fd5b9250929050565b803560ff811681146120a457600080fd5b60008060008060008060006080888a03121561237657600080fd5b873567ffffffffffffffff8082111561238e57600080fd5b61239a8b838c016122fe565b909950975060208a01359150808211156123b357600080fd5b6123bf8b838c016122fe565b909750955060408a01359150808211156123d857600080fd5b818a0191508a601f8301126123ec57600080fd5b8135818111156123fb57600080fd5b8b602060608302850101111561241057600080fd5b6020830195508094505050506124286060890161234a565b905092959891949750929550565b6000806040838503121561244957600080fd5b61245283612148565b91506122da60208401612094565b6000806040838503121561247357600080fd5b61247c83612148565b91506122da60208401612148565b600181811c9082168061249e57607f821691505b602082108114156124bf57634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252602e908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526d1c881b9bdc88185c1c1c9bdd995960921b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b6000808335601e1984360301811261254057600080fd5b83018035915067ffffffffffffffff82111561255b57600080fd5b60200191503681900382131561234357600080fd5b634e487b7160e01b600052601160045260246000fd5b600060001982141561259a5761259a612570565b5060010190565b6000828210156125b3576125b3612570565b500390565b600082198211156125cb576125cb612570565b500190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b600083516126348184602088016120c4565b8351908301906126488183602088016120c4565b01949350505050565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516126898160178501602088016120c4565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516126ba8160288401602088016120c4565b01602801949350505050565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906126f9908301846120f0565b9695505050505050565b60006020828403121561271557600080fd5b8151611c0a81612061565b600081600019048311821515161561273a5761273a612570565b500290565b60008161274e5761274e612570565b506000190190565b634e487b7160e01b600052601260045260246000fd5b60008261277b5761277b612756565b500490565b60008261278f5761278f612756565b50069056fea26469706673582212208a28f6bb695705086a42ddaca4943750c04ee29dc9ae7784ce049b7a2f1b528264736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101e55760003560e01c806370a082311161010f578063a217fddf116100a2578063c15b712c11610071578063c15b712c14610463578063c87b56dd14610476578063d547741f14610489578063e985e9c51461049c57600080fd5b8063a217fddf1461040e578063a22cb46514610416578063ab40070614610429578063b88d4fde1461045057600080fd5b806384c4bd4b116100de57806384c4bd4b146103d65780638d2a703e146103e057806391d14854146103f357806395d89b411461040657600080fd5b806370a082311461036857806372c6239a1461037b57806376aed2e11461038e5780637edee2b3146103c357600080fd5b8063248a9ca31161018757806342842e0e1161015657806342842e0e146103245780635c975abb146103375780636352211e14610342578063690e7c091461035557600080fd5b8063248a9ca3146102b95780632f2ff15d146102ea57806336568abe146102fd5780633bfca2f91461031057600080fd5b8063081812fc116101c3578063081812fc1461023c578063095ea7b314610267578063150b7a021461027a57806323b872dd146102a657600080fd5b806301ffc9a7146101ea57806302329a291461021257806306fdde0314610227575b600080fd5b6101fd6101f8366004612077565b6104d8565b60405190151581526020015b60405180910390f35b6102256102203660046120a9565b6104e9565b005b61022f61050e565b604051610209919061211c565b61024f61024a36600461212f565b6105a0565b6040516001600160a01b039091168152602001610209565b61022561027536600461215f565b6105c7565b61028d61028836600461219f565b6106e2565b6040516001600160e01b03199091168152602001610209565b6102256102b436600461227b565b6106f3565b6102dc6102c736600461212f565b60009081526008602052604090206001015490565b604051908152602001610209565b6102256102f83660046122b7565b610724565b61022561030b3660046122b7565b610749565b600c546101fd90600160a01b900460ff1681565b61022561033236600461227b565b6107c3565b60075460ff166101fd565b61024f61035036600461212f565b6107de565b61022561036336600461212f565b61083e565b6102dc6103763660046122e3565b610939565b600c5461024f906001600160a01b031681565b6103b161039c36600461212f565b6000908152600b602052604090205460ff1690565b60405160ff9091168152602001610209565b6102256103d136600461235b565b6109bf565b6009546102dc9081565b6102256103ee3660046122b7565b610b96565b6101fd6104013660046122b7565b610cb8565b61022f610ce3565b6102dc600081565b610225610424366004612436565b610cf2565b6102dc7f6a64baf327d646d1bca72653e2a075d15fd6ac6d8cbd7f6ee03fc55875e0fa8881565b61022561045e36600461219f565b610cfd565b6102256104713660046120a9565b610d35565b61022f61048436600461212f565b610d5f565b6102256104973660046122b7565b610d6a565b6101fd6104aa366004612460565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b60006104e382610d8f565b92915050565b60006104f481610db4565b811561050657610502610dbe565b5050565b610502610e18565b60606000805461051d9061248a565b80601f01602080910402602001604051908101604052809291908181526020018280546105499061248a565b80156105965780601f1061056b57610100808354040283529160200191610596565b820191906000526020600020905b81548152906001019060200180831161057957829003601f168201915b5050505050905090565b60006105ab82610e51565b506000908152600460205260409020546001600160a01b031690565b60006105d2826107de565b9050806001600160a01b0316836001600160a01b031614156106455760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b336001600160a01b0382161480610661575061066181336104aa565b6106d35760405162461bcd60e51b815260206004820152603e60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c0000606482015260840161063c565b6106dd8383610eb0565b505050565b630a85bd0160e11b5b949350505050565b6106fd3382610f1e565b6107195760405162461bcd60e51b815260040161063c906124c5565b6106dd838383610f9c565b60008281526008602052604090206001015461073f81610db4565b6106dd8383611143565b6001600160a01b03811633146107b95760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b606482015260840161063c565b61050282826111c9565b6106dd83838360405180602001604052806000815250610cfd565b6000818152600260205260408120546001600160a01b0316806104e35760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b604482015260640161063c565b6000818152600260205260409020546001600160a01b03161515604051806040016040528060018152602001600d60fa1b815250906108905760405162461bcd60e51b815260040161063c919061211c565b5061089a816107de565b6001600160a01b0316336001600160a01b031614604051806040016040528060018152602001603360f81b815250906108e65760405162461bcd60e51b815260040161063c919061211c565b50600c54604080518082019091526002815261062760f31b602082015290600160a01b900460ff1661092b5760405162461bcd60e51b815260040161063c919061211c565b506109368133611230565b50565b60006001600160a01b0382166109a35760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b606482015260840161063c565b506001600160a01b031660009081526003602052604090205490565b60006109ca81610db4565b86851480156109d857508683145b604051806040016040528060018152602001603560f81b81525090610a105760405162461bcd60e51b815260040161063c919061211c565b508160ff1660011480610a2657508160ff166002145b604051806040016040528060018152602001603560f81b81525090610a5e5760405162461bcd60e51b815260040161063c919061211c565b5060005b87811015610b8b576000610a7560095490565b9050610a85600980546001019055565b858583818110610a9757610a97612513565b6000848152600a6020908152604091829020606090930294909401803583559384013560018301558301356002820155905050506000818152600b60205260409020805460ff191660ff8616179055610b168a8a84818110610afb57610afb612513565b9050602002016020810190610b1091906122e3565b8261154a565b610b7881898985818110610b2c57610b2c612513565b9050602002810190610b3e9190612529565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061169892505050565b5080610b8381612586565b915050610a62565b505050505050505050565b7f6a64baf327d646d1bca72653e2a075d15fd6ac6d8cbd7f6ee03fc55875e0fa88610bc081610db4565b6000838152600260205260409020546001600160a01b03161515604051806040016040528060018152602001600d60fa1b81525090610c125760405162461bcd60e51b815260040161063c919061211c565b50610c1c836107de565b6001600160a01b0316826001600160a01b031614604051806040016040528060018152602001603360f81b81525090610c685760405162461bcd60e51b815260040161063c919061211c565b50600c54604080518082019091526002815261062760f31b602082015290600160a01b900460ff16610cad5760405162461bcd60e51b815260040161063c919061211c565b506106dd8383611230565b60009182526008602090815260408084206001600160a01b0393909316845291905290205460ff1690565b60606001805461051d9061248a565b610502338383611732565b610d073383610f1e565b610d235760405162461bcd60e51b815260040161063c906124c5565b610d2f84848484611801565b50505050565b6000610d4081610db4565b50600c8054911515600160a01b0260ff60a01b19909216919091179055565b60606104e382611834565b600082815260086020526040902060010154610d8581610db4565b6106dd83836111c9565b60006001600160e01b03198216637965db0b60e01b14806104e357506104e38261193d565b610936813361198d565b610dc66119f1565b6007805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258610dfb3390565b6040516001600160a01b03909116815260200160405180910390a1565b610e20611a39565b6007805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa33610dfb565b6000818152600260205260409020546001600160a01b03166109365760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b604482015260640161063c565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190610ee5826107de565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600080610f2a836107de565b9050806001600160a01b0316846001600160a01b03161480610f7157506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b806106eb5750836001600160a01b0316610f8a846105a0565b6001600160a01b031614949350505050565b826001600160a01b0316610faf826107de565b6001600160a01b0316146110135760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b606482015260840161063c565b6001600160a01b0382166110755760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b606482015260840161063c565b611080838383611a82565b61108b600082610eb0565b6001600160a01b03831660009081526003602052604081208054600192906110b49084906125a1565b90915550506001600160a01b03821660009081526003602052604081208054600192906110e29084906125b8565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b61114d8282610cb8565b6105025760008281526008602090815260408083206001600160a01b03851684529091529020805460ff191660011790556111853390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6111d38282610cb8565b156105025760008281526008602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000828152600a60209081526040918290208251606081018452815480825260018301549382019390935260029091015481840152600c5492516323b872dd60e01b81523060048201526001600160a01b0385811660248301526044820193909352909291909116906323b872dd90606401600060405180830381600087803b1580156112bc57600080fd5b505af11580156112d0573d6000803e3d6000fd5b5050600c5460208401516040516323b872dd60e01b81523060048201526001600160a01b0387811660248301526044820192909252911692506323b872dd9150606401600060405180830381600087803b15801561132d57600080fd5b505af1158015611341573d6000803e3d6000fd5b5050600c5460408481015190516323b872dd60e01b81523060048201526001600160a01b0387811660248301526044820192909252911692506323b872dd9150606401600060405180830381600087803b15801561139e57600080fd5b505af11580156113b2573d6000803e3d6000fd5b5050600c54835160405163058169e360e51b81526001600160a01b03909216935063b02d3c6092506113ea9160040190815260200190565b600060405180830381600087803b15801561140457600080fd5b505af1158015611418573d6000803e3d6000fd5b5050600c54602084015160405163058169e360e51b81526001600160a01b03909216935063b02d3c6092506114539160040190815260200190565b600060405180830381600087803b15801561146d57600080fd5b505af1158015611481573d6000803e3d6000fd5b5050600c54604080850151905163058169e360e51b81526001600160a01b03909216935063b02d3c6092506114bc9160040190815260200190565b600060405180830381600087803b1580156114d657600080fd5b505af11580156114ea573d6000803e3d6000fd5b5050825160208085015160408087015181518a81529384019490945282015260608101919091527f02fb9daf56c977530f60990eb8cd0510bc01218fd6376151dd4e91b660e579219250608001905060405180910390a16106dd83611a8a565b6001600160a01b0382166115a05760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604482015260640161063c565b6000818152600260205260409020546001600160a01b0316156116055760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604482015260640161063c565b61161160008383611a82565b6001600160a01b038216600090815260036020526040812080546001929061163a9084906125b8565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6000828152600260205260409020546001600160a01b03166117135760405162461bcd60e51b815260206004820152602e60248201527f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60448201526d32bc34b9ba32b73a103a37b5b2b760911b606482015260840161063c565b600082815260066020908152604090912082516106dd92840190611f92565b816001600160a01b0316836001600160a01b031614156117945760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604482015260640161063c565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b61180c848484610f9c565b61181884848484611a93565b610d2f5760405162461bcd60e51b815260040161063c906125d0565b606061183f82610e51565b600082815260066020526040812080546118589061248a565b80601f01602080910402602001604051908101604052809291908181526020018280546118849061248a565b80156118d15780601f106118a6576101008083540402835291602001916118d1565b820191906000526020600020905b8154815290600101906020018083116118b457829003601f168201915b5050505050905060006118ef60408051602081019091526000815290565b9050805160001415611902575092915050565b81511561193457808260405160200161191c929190612622565b60405160208183030381529060405292505050919050565b6106eb84611b9d565b60006001600160e01b031982166380ac58cd60e01b148061196e57506001600160e01b03198216635b5e139f60e01b145b806104e357506301ffc9a760e01b6001600160e01b03198316146104e3565b6119978282610cb8565b610502576119af816001600160a01b03166014611c11565b6119ba836020611c11565b6040516020016119cb929190612651565b60408051601f198184030181529082905262461bcd60e51b825261063c9160040161211c565b60075460ff1615611a375760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015260640161063c565b565b60075460ff16611a375760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015260640161063c565b6106dd6119f1565b61093681611dad565b60006001600160a01b0384163b15611b9557604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290611ad79033908990889088906004016126c6565b602060405180830381600087803b158015611af157600080fd5b505af1925050508015611b21575060408051601f3d908101601f19168201909252611b1e91810190612703565b60015b611b7b573d808015611b4f576040519150601f19603f3d011682016040523d82523d6000602084013e611b54565b606091505b508051611b735760405162461bcd60e51b815260040161063c906125d0565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506106eb565b5060016106eb565b6060611ba882610e51565b6000611bbf60408051602081019091526000815290565b90506000815111611bdf5760405180602001604052806000815250611c0a565b80611be984611ded565b604051602001611bfa929190612622565b6040516020818303038152906040525b9392505050565b60606000611c20836002612720565b611c2b9060026125b8565b67ffffffffffffffff811115611c4357611c43612189565b6040519080825280601f01601f191660200182016040528015611c6d576020820181803683370190505b509050600360fc1b81600081518110611c8857611c88612513565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611cb757611cb7612513565b60200101906001600160f81b031916908160001a9053506000611cdb846002612720565b611ce69060016125b8565b90505b6001811115611d5e576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110611d1a57611d1a612513565b1a60f81b828281518110611d3057611d30612513565b60200101906001600160f81b031916908160001a90535060049490941c93611d578161273f565b9050611ce9565b508315611c0a5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161063c565b611db681611eeb565b60008181526006602052604090208054611dcf9061248a565b15905061093657600081815260066020526040812061093691612016565b606081611e115750506040805180820190915260018152600360fc1b602082015290565b8160005b8115611e3b5780611e2581612586565b9150611e349050600a8361276c565b9150611e15565b60008167ffffffffffffffff811115611e5657611e56612189565b6040519080825280601f01601f191660200182016040528015611e80576020820181803683370190505b5090505b84156106eb57611e956001836125a1565b9150611ea2600a86612780565b611ead9060306125b8565b60f81b818381518110611ec257611ec2612513565b60200101906001600160f81b031916908160001a905350611ee4600a8661276c565b9450611e84565b6000611ef6826107de565b9050611f0481600084611a82565b611f0f600083610eb0565b6001600160a01b0381166000908152600360205260408120805460019290611f389084906125a1565b909155505060008281526002602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b828054611f9e9061248a565b90600052602060002090601f016020900481019282611fc05760008555612006565b82601f10611fd957805160ff1916838001178555612006565b82800160010185558215612006579182015b82811115612006578251825591602001919060010190611feb565b5061201292915061204c565b5090565b5080546120229061248a565b6000825580601f10612032575050565b601f01602090049060005260206000209081019061093691905b5b80821115612012576000815560010161204d565b6001600160e01b03198116811461093657600080fd5b60006020828403121561208957600080fd5b8135611c0a81612061565b803580151581146120a457600080fd5b919050565b6000602082840312156120bb57600080fd5b611c0a82612094565b60005b838110156120df5781810151838201526020016120c7565b83811115610d2f5750506000910152565b600081518084526121088160208601602086016120c4565b601f01601f19169290920160200192915050565b602081526000611c0a60208301846120f0565b60006020828403121561214157600080fd5b5035919050565b80356001600160a01b03811681146120a457600080fd5b6000806040838503121561217257600080fd5b61217b83612148565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b600080600080608085870312156121b557600080fd5b6121be85612148565b93506121cc60208601612148565b925060408501359150606085013567ffffffffffffffff808211156121f057600080fd5b818701915087601f83011261220457600080fd5b81358181111561221657612216612189565b604051601f8201601f19908116603f0116810190838211818310171561223e5761223e612189565b816040528281528a602084870101111561225757600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b60008060006060848603121561229057600080fd5b61229984612148565b92506122a760208501612148565b9150604084013590509250925092565b600080604083850312156122ca57600080fd5b823591506122da60208401612148565b90509250929050565b6000602082840312156122f557600080fd5b611c0a82612148565b60008083601f84011261231057600080fd5b50813567ffffffffffffffff81111561232857600080fd5b6020830191508360208260051b850101111561234357600080fd5b9250929050565b803560ff811681146120a457600080fd5b60008060008060008060006080888a03121561237657600080fd5b873567ffffffffffffffff8082111561238e57600080fd5b61239a8b838c016122fe565b909950975060208a01359150808211156123b357600080fd5b6123bf8b838c016122fe565b909750955060408a01359150808211156123d857600080fd5b818a0191508a601f8301126123ec57600080fd5b8135818111156123fb57600080fd5b8b602060608302850101111561241057600080fd5b6020830195508094505050506124286060890161234a565b905092959891949750929550565b6000806040838503121561244957600080fd5b61245283612148565b91506122da60208401612094565b6000806040838503121561247357600080fd5b61247c83612148565b91506122da60208401612148565b600181811c9082168061249e57607f821691505b602082108114156124bf57634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252602e908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526d1c881b9bdc88185c1c1c9bdd995960921b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b6000808335601e1984360301811261254057600080fd5b83018035915067ffffffffffffffff82111561255b57600080fd5b60200191503681900382131561234357600080fd5b634e487b7160e01b600052601160045260246000fd5b600060001982141561259a5761259a612570565b5060010190565b6000828210156125b3576125b3612570565b500390565b600082198211156125cb576125cb612570565b500190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b600083516126348184602088016120c4565b8351908301906126488183602088016120c4565b01949350505050565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516126898160178501602088016120c4565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516126ba8160288401602088016120c4565b01602801949350505050565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906126f9908301846120f0565b9695505050505050565b60006020828403121561271557600080fd5b8151611c0a81612061565b600081600019048311821515161561273a5761273a612570565b500290565b60008161274e5761274e612570565b506000190190565b634e487b7160e01b600052601260045260246000fd5b60008261277b5761277b612756565b500490565b60008261278f5761278f612756565b50069056fea26469706673582212208a28f6bb695705086a42ddaca4943750c04ee29dc9ae7784ce049b7a2f1b528264736f6c63430008090033",
  "devdoc": {
    "details": "BlastLootBox ERC721 token",
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "constructor": {
        "params": {
          "name": "Name of the contract",
          "symbol": "Symbol of the contract"
        }
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getTokenType(uint256)": {
        "details": "Returned value should be 1 or 2",
        "params": {
          "_tokenId": "Token ID."
        }
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "onERC721Received(address,address,uint256,bytes)": {
        "details": "See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "safeMint(address[],string[],(uint256,uint256,uint256)[],uint8)": {
        "details": "The caller must have the `DEFAULT_ADMIN_ROLE`. _tokenType should be 1 or 2 (In case of 1, it's normal box. In case of 2, it's gw box)"
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}.",
        "params": {
          "interfaceId": "Interface ID."
        }
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "params": {
          "tokenId": "Token ID."
        }
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      }
    },
    "title": "Blast LootBox NFT",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getTokenType(uint256)": {
        "notice": "Get Token Type. (GWB or NB)"
      },
      "safeMint(address[],string[],(uint256,uint256,uint256)[],uint8)": {
        "notice": "Creates a new token for `_to`. Its token ID will be automatically"
      },
      "tokenURI(uint256)": {
        "notice": "Returns the TokenURI."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1812,
        "contract": "contracts/BlastLootBox.sol:BlastLootBox",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 1814,
        "contract": "contracts/BlastLootBox.sol:BlastLootBox",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 1818,
        "contract": "contracts/BlastLootBox.sol:BlastLootBox",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1822,
        "contract": "contracts/BlastLootBox.sol:BlastLootBox",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1826,
        "contract": "contracts/BlastLootBox.sol:BlastLootBox",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1832,
        "contract": "contracts/BlastLootBox.sol:BlastLootBox",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 2830,
        "contract": "contracts/BlastLootBox.sol:BlastLootBox",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 569,
        "contract": "contracts/BlastLootBox.sol:BlastLootBox",
        "label": "_paused",
        "offset": 0,
        "slot": "7",
        "type": "t_bool"
      },
      {
        "astId": 70,
        "contract": "contracts/BlastLootBox.sol:BlastLootBox",
        "label": "_roles",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)65_storage)"
      },
      {
        "astId": 8137,
        "contract": "contracts/BlastLootBox.sol:BlastLootBox",
        "label": "_tokenIdCounter",
        "offset": 0,
        "slot": "9",
        "type": "t_struct(Counter)3319_storage"
      },
      {
        "astId": 8142,
        "contract": "contracts/BlastLootBox.sol:BlastLootBox",
        "label": "lootboxDetails",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_struct(LootBox)8129_storage)"
      },
      {
        "astId": 8146,
        "contract": "contracts/BlastLootBox.sol:BlastLootBox",
        "label": "tokenTypes",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_uint8)"
      },
      {
        "astId": 8149,
        "contract": "contracts/BlastLootBox.sol:BlastLootBox",
        "label": "blastEquipmentNFT",
        "offset": 0,
        "slot": "12",
        "type": "t_contract(IBlastEquipmentNFT)13077"
      },
      {
        "astId": 8151,
        "contract": "contracts/BlastLootBox.sol:BlastLootBox",
        "label": "openAvailable",
        "offset": 20,
        "slot": "12",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IBlastEquipmentNFT)13077": {
        "encoding": "inplace",
        "label": "contract IBlastEquipmentNFT",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)65_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)65_storage"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_struct(LootBox)8129_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct BlastLootBox.LootBox)",
        "numberOfBytes": "32",
        "value": "t_struct(LootBox)8129_storage"
      },
      "t_mapping(t_uint256,t_uint8)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint8)",
        "numberOfBytes": "32",
        "value": "t_uint8"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)3319_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 3318,
            "contract": "contracts/BlastLootBox.sol:BlastLootBox",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(LootBox)8129_storage": {
        "encoding": "inplace",
        "label": "struct BlastLootBox.LootBox",
        "members": [
          {
            "astId": 8124,
            "contract": "contracts/BlastLootBox.sol:BlastLootBox",
            "label": "token0",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 8126,
            "contract": "contracts/BlastLootBox.sol:BlastLootBox",
            "label": "token1",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 8128,
            "contract": "contracts/BlastLootBox.sol:BlastLootBox",
            "label": "token2",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(RoleData)65_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 62,
            "contract": "contracts/BlastLootBox.sol:BlastLootBox",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 64,
            "contract": "contracts/BlastLootBox.sol:BlastLootBox",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}