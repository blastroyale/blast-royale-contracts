{
  "address": "0xdb541227fce633929009D2e90466F5D85de7C816",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "collectionName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "collectionSymbol",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "tokenURISuffix",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "maxMintableSupply",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "globalWalletLimit",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "cosigner",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "timestampExpirySeconds",
          "type": "uint64"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ApprovalCallerNotOwnerNorApproved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ApprovalQueryForNonexistentToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BalanceQueryForZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CannotIncreaseMaxMintableSupply",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CannotUpdatePermanentBaseURI",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CosignerNotSet",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CrossmintAddressNotSet",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CrossmintOnly",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "GlobalWalletLimitOverflow",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientStageTimeGap",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidCosignSignature",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidProof",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidQueryRange",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidStage",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidStageArgsLength",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidStartAndEndTimestamp",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MintERC2309QuantityExceedsLimit",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MintToZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MintZeroQuantity",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Mintable",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoSupplyLeft",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotEnoughValue",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotMintable",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OwnerQueryForNonexistentToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OwnershipNotInitializedForExtraData",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StageSupplyExceeded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TimestampExpired",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferCallerNotOwnerNorApproved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferFromIncorrectOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferToNonERC721ReceiverImplementer",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferToZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "URIQueryForNonexistentToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WalletGlobalLimitExceeded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WalletStageLimitExceeded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WithdrawFailed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "fromTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "toTokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "ConsecutiveTransfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "baseURI",
          "type": "string"
        }
      ],
      "name": "PermanentBaseURI",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "activeStage",
          "type": "uint256"
        }
      ],
      "name": "SetActiveStage",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "baseURI",
          "type": "string"
        }
      ],
      "name": "SetBaseURI",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "cosigner",
          "type": "address"
        }
      ],
      "name": "SetCosigner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "crossmintAddress",
          "type": "address"
        }
      ],
      "name": "SetCrossmintAddress",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "globalWalletLimit",
          "type": "uint256"
        }
      ],
      "name": "SetGlobalWalletLimit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxMintableSupply",
          "type": "uint256"
        }
      ],
      "name": "SetMaxMintableSupply",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "mintable",
          "type": "bool"
        }
      ],
      "name": "SetMintable",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "expiry",
          "type": "uint64"
        }
      ],
      "name": "SetTimestampExpirySeconds",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stage",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint80",
          "name": "price",
          "type": "uint80"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "walletLimit",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "merkleRoot",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint24",
          "name": "maxStageSupply",
          "type": "uint24"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "startTimeUnixSeconds",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "endTimeUnixSeconds",
          "type": "uint64"
        }
      ],
      "name": "UpdateStage",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "minter",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "qty",
          "type": "uint32"
        },
        {
          "internalType": "uint64",
          "name": "timestamp",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "assertValidCosign",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "qty",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "bytes32[]",
          "name": "proof",
          "type": "bytes32[]"
        },
        {
          "internalType": "uint64",
          "name": "timestamp",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "crossmint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "explicitOwnershipOf",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "addr",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "startTimestamp",
              "type": "uint64"
            },
            {
              "internalType": "bool",
              "name": "burned",
              "type": "bool"
            },
            {
              "internalType": "uint24",
              "name": "extraData",
              "type": "uint24"
            }
          ],
          "internalType": "struct IERC721A.TokenOwnership",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "explicitOwnershipsOf",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "addr",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "startTimestamp",
              "type": "uint64"
            },
            {
              "internalType": "bool",
              "name": "burned",
              "type": "bool"
            },
            {
              "internalType": "uint24",
              "name": "extraData",
              "type": "uint24"
            }
          ],
          "internalType": "struct IERC721A.TokenOwnership[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "timestamp",
          "type": "uint64"
        }
      ],
      "name": "getActiveStageFromTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "minter",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "qty",
          "type": "uint32"
        },
        {
          "internalType": "uint64",
          "name": "timestamp",
          "type": "uint64"
        }
      ],
      "name": "getCosignDigest",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "minter",
          "type": "address"
        }
      ],
      "name": "getCosignNonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCosigner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCrossmintAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getGlobalWalletLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMaxMintableSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMintable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumberStages",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getStageInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint80",
              "name": "price",
              "type": "uint80"
            },
            {
              "internalType": "uint32",
              "name": "walletLimit",
              "type": "uint32"
            },
            {
              "internalType": "bytes32",
              "name": "merkleRoot",
              "type": "bytes32"
            },
            {
              "internalType": "uint24",
              "name": "maxStageSupply",
              "type": "uint24"
            },
            {
              "internalType": "uint64",
              "name": "startTimeUnixSeconds",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "endTimeUnixSeconds",
              "type": "uint64"
            }
          ],
          "internalType": "struct IERC721M.MintStageInfo",
          "name": "",
          "type": "tuple"
        },
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTimestampExpirySeconds",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTokenURISuffix",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "qty",
          "type": "uint32"
        },
        {
          "internalType": "bytes32[]",
          "name": "proof",
          "type": "bytes32[]"
        },
        {
          "internalType": "uint64",
          "name": "timestamp",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "qty",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "ownerMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "baseURI",
          "type": "string"
        }
      ],
      "name": "setBaseURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setBaseURIPermanent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "cosigner",
          "type": "address"
        }
      ],
      "name": "setCosigner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "crossmintAddress",
          "type": "address"
        }
      ],
      "name": "setCrossmintAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "globalWalletLimit",
          "type": "uint256"
        }
      ],
      "name": "setGlobalWalletLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "maxMintableSupply",
          "type": "uint256"
        }
      ],
      "name": "setMaxMintableSupply",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "mintable",
          "type": "bool"
        }
      ],
      "name": "setMintable",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint80",
              "name": "price",
              "type": "uint80"
            },
            {
              "internalType": "uint32",
              "name": "walletLimit",
              "type": "uint32"
            },
            {
              "internalType": "bytes32",
              "name": "merkleRoot",
              "type": "bytes32"
            },
            {
              "internalType": "uint24",
              "name": "maxStageSupply",
              "type": "uint24"
            },
            {
              "internalType": "uint64",
              "name": "startTimeUnixSeconds",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "endTimeUnixSeconds",
              "type": "uint64"
            }
          ],
          "internalType": "struct IERC721M.MintStageInfo[]",
          "name": "newStages",
          "type": "tuple[]"
        }
      ],
      "name": "setStages",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "expiry",
          "type": "uint64"
        }
      ],
      "name": "setTimestampExpirySeconds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "suffix",
          "type": "string"
        }
      ],
      "name": "setTokenURISuffix",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "tokensOfOwner",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stop",
          "type": "uint256"
        }
      ],
      "name": "tokensOfOwnerIn",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "a",
          "type": "address"
        }
      ],
      "name": "totalMintedByAddress",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "internalType": "uint80",
          "name": "price",
          "type": "uint80"
        },
        {
          "internalType": "uint32",
          "name": "walletLimit",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "merkleRoot",
          "type": "bytes32"
        },
        {
          "internalType": "uint24",
          "name": "maxStageSupply",
          "type": "uint24"
        },
        {
          "internalType": "uint64",
          "name": "startTimeUnixSeconds",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "endTimeUnixSeconds",
          "type": "uint64"
        }
      ],
      "name": "updateStage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x7138b406a8e3f701f177d4f800762067bd1d266bb41f3b459be7bc8dffc02bfa",
  "receipt": {
    "to": null,
    "from": "0x7Ac410F4E36873022b57821D7a8EB3D7513C045a",
    "contractAddress": "0xdb541227fce633929009D2e90466F5D85de7C816",
    "transactionIndex": 23,
    "gasUsed": "3659448",
    "logsBloom": "0x
    "blockHash": "0x68905d6d61991cb44f785780c1d6761be292aeefbf81b2c08fc60daac7348f46",
    "transactionHash": "0x7138b406a8e3f701f177d4f800762067bd1d266bb41f3b459be7bc8dffc02bfa",
    "logs": [
      {
        "transactionIndex": 23,
        "blockNumber": 33955902,
        "transactionHash": "0x7138b406a8e3f701f177d4f800762067bd1d266bb41f3b459be7bc8dffc02bfa",
        "address": "0xdb541227fce633929009D2e90466F5D85de7C816",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000007ac410f4e36873022b57821d7a8eb3d7513c045a"
        ],
        "data": "0x",
        "logIndex": 47,
        "blockHash": "0x68905d6d61991cb44f785780c1d6761be292aeefbf81b2c08fc60daac7348f46"
      },
      {
        "transactionIndex": 23,
        "blockNumber": 33955902,
        "transactionHash": "0x7138b406a8e3f701f177d4f800762067bd1d266bb41f3b459be7bc8dffc02bfa",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000007ac410f4e36873022b57821d7a8eb3d7513c045a",
          "0x000000000000000000000000c275dc8be39f50d12f66b6a63629c39da5bae5bd"
        ],
        "data": "0x000000000000000000000000000000000000000000000000001604c9d138e32800000000000000000000000000000000000000000000008af86900320059d995000000000000000000000000000000000000000000000f277536c41f500a7eb600000000000000000000000000000000000000000000008af852fb682f20f66d000000000000000000000000000000000000000000000f27754cc8e9214361de",
        "logIndex": 48,
        "blockHash": "0x68905d6d61991cb44f785780c1d6761be292aeefbf81b2c08fc60daac7348f46"
      }
    ],
    "blockNumber": 33955902,
    "cumulativeGasUsed": "4657300",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "Corpos",
    "CORPO",
    "https://dev-metadata.blastroyale.com/nftmetadata/",
    888,
    888,
    "0x7Ac410F4E36873022b57821D7a8EB3D7513C045a",
    3600000000000000
  ],
  "numDeployments": 1,
  "solcInputHash": "77f1971cb27bfcd5160b27ff6b64523c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"collectionName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"collectionSymbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenURISuffix\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"maxMintableSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"globalWalletLimit\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"cosigner\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"timestampExpirySeconds\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ApprovalCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BalanceQueryForZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CannotIncreaseMaxMintableSupply\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CannotUpdatePermanentBaseURI\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CosignerNotSet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CrossmintAddressNotSet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CrossmintOnly\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"GlobalWalletLimitOverflow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientStageTimeGap\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidCosignSignature\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidProof\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidQueryRange\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidStage\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidStageArgsLength\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidStartAndEndTimestamp\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintERC2309QuantityExceedsLimit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintZeroQuantity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Mintable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoSupplyLeft\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotMintable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnerQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnershipNotInitializedForExtraData\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StageSupplyExceeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TimestampExpired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFromIncorrectOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToNonERC721ReceiverImplementer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"URIQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WalletGlobalLimitExceeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WalletStageLimitExceeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WithdrawFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fromTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toTokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"ConsecutiveTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"}],\"name\":\"PermanentBaseURI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"activeStage\",\"type\":\"uint256\"}],\"name\":\"SetActiveStage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"}],\"name\":\"SetBaseURI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"cosigner\",\"type\":\"address\"}],\"name\":\"SetCosigner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"crossmintAddress\",\"type\":\"address\"}],\"name\":\"SetCrossmintAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"globalWalletLimit\",\"type\":\"uint256\"}],\"name\":\"SetGlobalWalletLimit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxMintableSupply\",\"type\":\"uint256\"}],\"name\":\"SetMaxMintableSupply\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"mintable\",\"type\":\"bool\"}],\"name\":\"SetMintable\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"expiry\",\"type\":\"uint64\"}],\"name\":\"SetTimestampExpirySeconds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint80\",\"name\":\"price\",\"type\":\"uint80\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"walletLimit\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint24\",\"name\":\"maxStageSupply\",\"type\":\"uint24\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"startTimeUnixSeconds\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"endTimeUnixSeconds\",\"type\":\"uint64\"}],\"name\":\"UpdateStage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"qty\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"timestamp\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"assertValidCosign\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"qty\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint64\",\"name\":\"timestamp\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"crossmint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"explicitOwnershipOf\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"startTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"burned\",\"type\":\"bool\"},{\"internalType\":\"uint24\",\"name\":\"extraData\",\"type\":\"uint24\"}],\"internalType\":\"struct IERC721A.TokenOwnership\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"explicitOwnershipsOf\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"startTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"burned\",\"type\":\"bool\"},{\"internalType\":\"uint24\",\"name\":\"extraData\",\"type\":\"uint24\"}],\"internalType\":\"struct IERC721A.TokenOwnership[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"timestamp\",\"type\":\"uint64\"}],\"name\":\"getActiveStageFromTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"qty\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"timestamp\",\"type\":\"uint64\"}],\"name\":\"getCosignDigest\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"}],\"name\":\"getCosignNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCosigner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCrossmintAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGlobalWalletLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxMintableSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMintable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberStages\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getStageInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint80\",\"name\":\"price\",\"type\":\"uint80\"},{\"internalType\":\"uint32\",\"name\":\"walletLimit\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint24\",\"name\":\"maxStageSupply\",\"type\":\"uint24\"},{\"internalType\":\"uint64\",\"name\":\"startTimeUnixSeconds\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"endTimeUnixSeconds\",\"type\":\"uint64\"}],\"internalType\":\"struct IERC721M.MintStageInfo\",\"name\":\"\",\"type\":\"tuple\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTimestampExpirySeconds\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenURISuffix\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"qty\",\"type\":\"uint32\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint64\",\"name\":\"timestamp\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"qty\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"ownerMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setBaseURIPermanent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cosigner\",\"type\":\"address\"}],\"name\":\"setCosigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"crossmintAddress\",\"type\":\"address\"}],\"name\":\"setCrossmintAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"globalWalletLimit\",\"type\":\"uint256\"}],\"name\":\"setGlobalWalletLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxMintableSupply\",\"type\":\"uint256\"}],\"name\":\"setMaxMintableSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"mintable\",\"type\":\"bool\"}],\"name\":\"setMintable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint80\",\"name\":\"price\",\"type\":\"uint80\"},{\"internalType\":\"uint32\",\"name\":\"walletLimit\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint24\",\"name\":\"maxStageSupply\",\"type\":\"uint24\"},{\"internalType\":\"uint64\",\"name\":\"startTimeUnixSeconds\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"endTimeUnixSeconds\",\"type\":\"uint64\"}],\"internalType\":\"struct IERC721M.MintStageInfo[]\",\"name\":\"newStages\",\"type\":\"tuple[]\"}],\"name\":\"setStages\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"expiry\",\"type\":\"uint64\"}],\"name\":\"setTimestampExpirySeconds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"suffix\",\"type\":\"string\"}],\"name\":\"setTokenURISuffix\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"tokensOfOwner\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stop\",\"type\":\"uint256\"}],\"name\":\"tokensOfOwnerIn\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"totalMintedByAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint80\",\"name\":\"price\",\"type\":\"uint80\"},{\"internalType\":\"uint32\",\"name\":\"walletLimit\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint24\",\"name\":\"maxStageSupply\",\"type\":\"uint24\"},{\"internalType\":\"uint64\",\"name\":\"startTimeUnixSeconds\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"endTimeUnixSeconds\",\"type\":\"uint64\"}],\"name\":\"updateStage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"ERC721A subclass with MagicEden launchpad features including  - multiple minting stages with time-based auto stage switch  - global and stage wallet-level minting limit  - whitelist using merkle tree  - crossmint support  - anti-botting\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"assertValidCosign(address,uint32,uint64,bytes)\":{\"details\":\"Validates the the given signature.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in `owner`'s account.\"},\"crossmint(uint32,address,bytes32[],uint64,bytes)\":{\"details\":\"Mints token(s) through crossmint. This function is supposed to be called by crossmint. qty - number of tokens to mint to - the address to mint tokens to proof - the merkle proof generated on client side. This applies if using whitelist. timestamp - the current timestamp signature - the signature from cosigner if using cosigner.\"},\"explicitOwnershipOf(uint256)\":{\"details\":\"Returns the `TokenOwnership` struct at `tokenId` without reverting. If the `tokenId` is out of bounds: - `addr = address(0)` - `startTimestamp = 0` - `burned = false` - `extraData = 0` If the `tokenId` is burned: - `addr = <Address of owner before token was burned>` - `startTimestamp = <Timestamp when token was burned>` - `burned = true` - `extraData = <Extra data when token was burned>` Otherwise: - `addr = <Address of owner>` - `startTimestamp = <Timestamp of start of ownership>` - `burned = false` - `extraData = <Extra data at start of ownership>`\"},\"explicitOwnershipsOf(uint256[])\":{\"details\":\"Returns an array of `TokenOwnership` structs at `tokenIds` in order. See {ERC721AQueryable-explicitOwnershipOf}\"},\"getActiveStageFromTimestamp(uint64)\":{\"details\":\"Returns the current active stage based on timestamp.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"getCosignDigest(address,uint32,uint64)\":{\"details\":\"Returns data hash for the given minter, qty and timestamp.\"},\"getCosignNonce(address)\":{\"details\":\"Returns cosign nonce.\"},\"getCosigner()\":{\"details\":\"Returns cosigner address.\"},\"getCrossmintAddress()\":{\"details\":\"Returns crossmint address.\"},\"getGlobalWalletLimit()\":{\"details\":\"Returns global wallet limit. This is the max number of tokens can be minted by one wallet.\"},\"getMaxMintableSupply()\":{\"details\":\"Returns maximum mintable supply.\"},\"getMintable()\":{\"details\":\"Gets whether mintable.\"},\"getNumberStages()\":{\"details\":\"Returns number of stages.\"},\"getStageInfo(uint256)\":{\"details\":\"Returns info for one stage specified by index (starting from 0).\"},\"getTimestampExpirySeconds()\":{\"details\":\"Returns expiry in seconds.\"},\"getTokenURISuffix()\":{\"details\":\"Returns token URI suffix.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}.\"},\"mint(uint32,bytes32[],uint64,bytes)\":{\"details\":\"Mints token(s). qty - number of tokens to mint proof - the merkle proof generated on client side. This applies if using whitelist. timestamp - the current timestamp signature - the signature from cosigner if using cosigner.\"},\"name()\":{\"details\":\"Returns the token collection name.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerMint(uint32,address)\":{\"details\":\"Mints token(s) by owner. NOTE: This function bypasses validations thus only available for owner. This is typically used for owner to  pre-mint or mint the remaining of the supply.\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"setBaseURI(string)\":{\"details\":\"Sets token base URI.\"},\"setBaseURIPermanent()\":{\"details\":\"Sets token base URI permanent. Cannot revert.\"},\"setCosigner(address)\":{\"details\":\"Sets cosigner.\"},\"setCrossmintAddress(address)\":{\"details\":\"Sets crossmint address if using crossmint. This allows the specified address to call `crossmint`.\"},\"setGlobalWalletLimit(uint256)\":{\"details\":\"Sets global wallet limit.\"},\"setMaxMintableSupply(uint256)\":{\"details\":\"Sets maximum mintable supply. New supply cannot be larger than the old.\"},\"setMintable(bool)\":{\"details\":\"Sets mintable.\"},\"setStages((uint80,uint32,bytes32,uint24,uint64,uint64)[])\":{\"details\":\"Sets stages in the format of an array of `MintStageInfo`. Following is an example of launch with two stages. The first stage is exclusive for whitelisted wallets specified by merkle root.    [{      price: 10000000000000000000,      maxStageSupply: 2000,      walletLimit: 1,      merkleRoot: 0x559fadeb887449800b7b320bf1e92d309f329b9641ac238bebdb74e15c0a5218,      startTimeUnixSeconds: 1667768000,      endTimeUnixSeconds: 1667771600,     },     {      price: 20000000000000000000,      maxStageSupply: 3000,      walletLimit: 2,      merkleRoot: 0,      startTimeUnixSeconds: 1667771600,      endTimeUnixSeconds: 1667775200,     } ]\"},\"setTimestampExpirySeconds(uint64)\":{\"details\":\"Sets expiry in seconds. This timestamp specifies how long a signature from cosigner is valid for.\"},\"setTokenURISuffix(string)\":{\"details\":\"Sets token URI suffix. e.g. \\\".json\\\".\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified) to learn more about how these ids are created. This function call must use less than 30000 gas.\"},\"symbol()\":{\"details\":\"Returns the token collection symbol.\"},\"tokenURI(uint256)\":{\"details\":\"Returns token URI for a given token id.\"},\"tokensOfOwner(address)\":{\"details\":\"Returns an array of token IDs owned by `owner`. This function scans the ownership mapping and is O(`totalSupply`) in complexity. It is meant to be called off-chain. See {ERC721AQueryable-tokensOfOwnerIn} for splitting the scan into multiple smaller scans if the collection is large enough to cause an out-of-gas error (10K collections should be fine).\"},\"tokensOfOwnerIn(address,uint256,uint256)\":{\"details\":\"Returns an array of token IDs owned by `owner`, in the range [`start`, `stop`) (i.e. `start <= tokenId < stop`). This function allows for tokens to be queried if the collection grows too big for a single call of {ERC721AQueryable-tokensOfOwner}. Requirements: - `start < stop`\"},\"totalMintedByAddress(address)\":{\"details\":\"Returns number of minted token for a given address.\"},\"totalSupply()\":{\"details\":\"Returns the total number of tokens in existence. Burned tokens will reduce the count. To get the total number of tokens minted, please see {_totalMinted}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateStage(uint256,uint80,uint32,bytes32,uint24,uint64,uint64)\":{\"details\":\"Updates info for one stage specified by index (starting from 0).\"},\"withdraw()\":{\"details\":\"Withdraws funds by owner.\"}},\"title\":\"ERC721M\",\"version\":1},\"userdoc\":{\"errors\":{\"ApprovalCallerNotOwnerNorApproved()\":[{\"notice\":\"The caller must own the token or be an approved operator.\"}],\"ApprovalQueryForNonexistentToken()\":[{\"notice\":\"The token does not exist.\"}],\"BalanceQueryForZeroAddress()\":[{\"notice\":\"Cannot query the balance for the zero address.\"}],\"InvalidQueryRange()\":[{\"notice\":\"Invalid query range (`start` >= `stop`).\"}],\"MintERC2309QuantityExceedsLimit()\":[{\"notice\":\"The `quantity` minted with ERC2309 exceeds the safety limit.\"}],\"MintToZeroAddress()\":[{\"notice\":\"Cannot mint to the zero address.\"}],\"MintZeroQuantity()\":[{\"notice\":\"The quantity of tokens minted must be more than zero.\"}],\"OwnerQueryForNonexistentToken()\":[{\"notice\":\"The token does not exist.\"}],\"OwnershipNotInitializedForExtraData()\":[{\"notice\":\"The `extraData` cannot be set on an unintialized ownership slot.\"}],\"TransferCallerNotOwnerNorApproved()\":[{\"notice\":\"The caller must own the token or be an approved operator.\"}],\"TransferFromIncorrectOwner()\":[{\"notice\":\"The token must be owned by `from`.\"}],\"TransferToNonERC721ReceiverImplementer()\":[{\"notice\":\"Cannot safely transfer to a contract that does not implement the ERC721Receiver interface.\"}],\"TransferToZeroAddress()\":[{\"notice\":\"Cannot transfer to the zero address.\"}],\"URIQueryForNonexistentToken()\":[{\"notice\":\"The token does not exist.\"}]},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Corpos.sol\":\"Corpos\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1271.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1271.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC1271 standard signature validation method for\\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC1271 {\\n    /**\\n     * @dev Should return whether the signature provided is valid for the provided data\\n     * @param hash      Hash of the data to be signed\\n     * @param signature Signature byte array associated with _data\\n     */\\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x0705a4b1b86d7b0bd8432118f226ba139c44b9dcaba0a6eafba2dd7d0639c544\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x190dd6f8d592b7e4e930feb7f4313aeb8e1c4ad3154c27ce1cf6a512fc30d8cc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xda898fa084aa1ddfdb346e6a40459e00a59d87071cce7c315a46d648dd71d0ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The tree and the proofs can be generated using our\\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\\n * You will find a quickstart guide in the readme.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n * OpenZeppelin's JavaScript library generates merkle trees that are safe\\n * against this attack out of the box.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {verify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function verifyCalldata(\\n        bytes32[] calldata proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProofCalldata(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {multiProofVerify}\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\\n     * respectively.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd466e8b07f4c6220eac16da5127f3ff142e65f0c15c03c7d38f257b02c8585e1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/SignatureChecker.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\nimport \\\"../Address.sol\\\";\\nimport \\\"../../interfaces/IERC1271.sol\\\";\\n\\n/**\\n * @dev Signature verification helper that can be used instead of `ECDSA.recover` to seamlessly support both ECDSA\\n * signatures from externally owned accounts (EOAs) as well as ERC1271 signatures from smart contract wallets like\\n * Argent and Gnosis Safe.\\n *\\n * _Available since v4.1._\\n */\\nlibrary SignatureChecker {\\n    /**\\n     * @dev Checks if a signature is valid for a given signer and data hash. If the signer is a smart contract, the\\n     * signature is validated against that smart contract using ERC1271, otherwise it's validated using `ECDSA.recover`.\\n     *\\n     * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\\n     * change through time. It could return true at block N and false at block N+1 (or the opposite).\\n     */\\n    function isValidSignatureNow(\\n        address signer,\\n        bytes32 hash,\\n        bytes memory signature\\n    ) internal view returns (bool) {\\n        (address recovered, ECDSA.RecoverError error) = ECDSA.tryRecover(hash, signature);\\n        if (error == ECDSA.RecoverError.NoError && recovered == signer) {\\n            return true;\\n        }\\n\\n        (bool success, bytes memory result) = signer.staticcall(\\n            abi.encodeWithSelector(IERC1271.isValidSignature.selector, hash, signature)\\n        );\\n        return (success &&\\n            result.length == 32 &&\\n            abi.decode(result, (bytes32)) == bytes32(IERC1271.isValidSignature.selector));\\n    }\\n}\\n\",\"keccak256\":\"0xbc8d1f66b26e211a1f6f40a17453e9d5020ec96749014379205cff100809884c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/Corpos.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\\\";\\nimport \\\"erc721a/contracts/extensions/ERC721AQueryable.sol\\\";\\nimport \\\"./IERC721M.sol\\\";\\n\\n/**\\n * @title ERC721M\\n *\\n * @dev ERC721A subclass with MagicEden launchpad features including\\n *  - multiple minting stages with time-based auto stage switch\\n *  - global and stage wallet-level minting limit\\n *  - whitelist using merkle tree\\n *  - crossmint support\\n *  - anti-botting\\n */\\ncontract Corpos is IERC721M, ERC721AQueryable, Ownable, ReentrancyGuard {\\n    using ECDSA for bytes32;\\n\\n    // Whether this contract is mintable.\\n    bool private _mintable;\\n\\n    // Whether base URI is permanent. Once set, base URI is immutable.\\n    bool private _baseURIPermanent;\\n\\n    // Specify how long a signature from cosigner is valid for, recommend 300 seconds.\\n    uint64 private _timestampExpirySeconds;\\n\\n    // The address of the cosigner server.\\n    address private _cosigner;\\n\\n    // The crossmint address. Need to set if using crossmint.\\n    address private _crossmintAddress;\\n\\n    // The total mintable supply.\\n    uint256 internal _maxMintableSupply;\\n\\n    // Global wallet limit, across all stages.\\n    uint256 private _globalWalletLimit;\\n\\n    // Current base URI.\\n    string private _currentBaseURI;\\n\\n    // The suffix for the token URL, e.g. \\\".json\\\".\\n    string private _tokenURISuffix;\\n\\n    // Mint stage infomation. See MintStageInfo for details.\\n    MintStageInfo[] private _mintStages;\\n\\n    // Minted count per stage per wallet.\\n    mapping(uint256 => mapping(address => uint32))\\n        private _stageMintedCountsPerWallet;\\n\\n    // Minted count per stage.\\n    mapping(uint256 => uint256) private _stageMintedCounts;\\n\\n    constructor(\\n        string memory collectionName,\\n        string memory collectionSymbol,\\n        string memory tokenURISuffix,\\n        uint256 maxMintableSupply,\\n        uint256 globalWalletLimit,\\n        address cosigner,\\n        uint64 timestampExpirySeconds\\n    ) ERC721A(collectionName, collectionSymbol) {\\n        if (globalWalletLimit > maxMintableSupply)\\n            revert GlobalWalletLimitOverflow();\\n\\n        _mintable = false;\\n        _maxMintableSupply = maxMintableSupply;\\n        _globalWalletLimit = globalWalletLimit;\\n        _tokenURISuffix = tokenURISuffix;\\n        _cosigner = cosigner; // ethers.constants.AddressZero for no cosigning\\n        _timestampExpirySeconds = timestampExpirySeconds;\\n    }\\n\\n    /**\\n     * @dev Returns whether mintable.\\n     */\\n    modifier canMint() {\\n        if (!_mintable) revert NotMintable();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns whether NOT mintable.\\n     */\\n    modifier cannotMint() {\\n        if (_mintable) revert Mintable();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns whether it has enough supply for the given qty.\\n     */\\n    modifier hasSupply(uint256 qty) {\\n        if (totalSupply() + qty > _maxMintableSupply) revert NoSupplyLeft();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns cosigner address.\\n     */\\n    function getCosigner() external view override returns (address) {\\n        return _cosigner;\\n    }\\n\\n    /**\\n     * @dev Returns cosign nonce.\\n     */\\n    function getCosignNonce(address minter) public view returns (uint256) {\\n        return _numberMinted(minter);\\n    }\\n\\n    /**\\n     * @dev Sets cosigner.\\n     */\\n    function setCosigner(address cosigner) external onlyOwner {\\n        _cosigner = cosigner;\\n        emit SetCosigner(cosigner);\\n    }\\n\\n    /**\\n     * @dev Returns expiry in seconds.\\n     */\\n    function getTimestampExpirySeconds() public view override returns (uint64) {\\n        return _timestampExpirySeconds;\\n    }\\n\\n    /**\\n     * @dev Sets expiry in seconds. This timestamp specifies how long a signature from cosigner is valid for.\\n     */\\n    function setTimestampExpirySeconds(uint64 expiry) external onlyOwner {\\n        _timestampExpirySeconds = expiry;\\n        emit SetTimestampExpirySeconds(expiry);\\n    }\\n\\n    /**\\n     * @dev Returns crossmint address.\\n     */\\n    function getCrossmintAddress() external view override returns (address) {\\n        return _crossmintAddress;\\n    }\\n\\n    /**\\n     * @dev Sets crossmint address if using crossmint. This allows the specified address to call `crossmint`.\\n     */\\n    function setCrossmintAddress(address crossmintAddress) external onlyOwner {\\n        _crossmintAddress = crossmintAddress;\\n        emit SetCrossmintAddress(crossmintAddress);\\n    }\\n\\n    /**\\n     * @dev Sets stages in the format of an array of `MintStageInfo`.\\n     *\\n     * Following is an example of launch with two stages. The first stage is exclusive for whitelisted wallets\\n     * specified by merkle root.\\n     *    [{\\n     *      price: 10000000000000000000,\\n     *      maxStageSupply: 2000,\\n     *      walletLimit: 1,\\n     *      merkleRoot: 0x559fadeb887449800b7b320bf1e92d309f329b9641ac238bebdb74e15c0a5218,\\n     *      startTimeUnixSeconds: 1667768000,\\n     *      endTimeUnixSeconds: 1667771600,\\n     *     },\\n     *     {\\n     *      price: 20000000000000000000,\\n     *      maxStageSupply: 3000,\\n     *      walletLimit: 2,\\n     *      merkleRoot: 0,\\n     *      startTimeUnixSeconds: 1667771600,\\n     *      endTimeUnixSeconds: 1667775200,\\n     *     }\\n     * ]\\n     */\\n    function setStages(MintStageInfo[] calldata newStages) external onlyOwner {\\n        uint256 originalSize = _mintStages.length;\\n        for (uint256 i = 0; i < originalSize; i++) {\\n            _mintStages.pop();\\n        }\\n\\n        uint64 timestampExpirySeconds = getTimestampExpirySeconds();\\n        for (uint256 i = 0; i < newStages.length; i++) {\\n            if (i >= 1) {\\n                if (\\n                    newStages[i].startTimeUnixSeconds <\\n                    newStages[i - 1].endTimeUnixSeconds + timestampExpirySeconds\\n                ) {\\n                    revert InsufficientStageTimeGap();\\n                }\\n            }\\n            _assertValidStartAndEndTimestamp(\\n                newStages[i].startTimeUnixSeconds,\\n                newStages[i].endTimeUnixSeconds\\n            );\\n            _mintStages.push(\\n                MintStageInfo({\\n                    price: newStages[i].price,\\n                    walletLimit: newStages[i].walletLimit,\\n                    merkleRoot: newStages[i].merkleRoot,\\n                    maxStageSupply: newStages[i].maxStageSupply,\\n                    startTimeUnixSeconds: newStages[i].startTimeUnixSeconds,\\n                    endTimeUnixSeconds: newStages[i].endTimeUnixSeconds\\n                })\\n            );\\n            emit UpdateStage(\\n                i,\\n                newStages[i].price,\\n                newStages[i].walletLimit,\\n                newStages[i].merkleRoot,\\n                newStages[i].maxStageSupply,\\n                newStages[i].startTimeUnixSeconds,\\n                newStages[i].endTimeUnixSeconds\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Gets whether mintable.\\n     */\\n    function getMintable() external view override returns (bool) {\\n        return _mintable;\\n    }\\n\\n    /**\\n     * @dev Sets mintable.\\n     */\\n    function setMintable(bool mintable) external onlyOwner {\\n        _mintable = mintable;\\n        emit SetMintable(mintable);\\n    }\\n\\n    /**\\n     * @dev Returns number of stages.\\n     */\\n    function getNumberStages() external view override returns (uint256) {\\n        return _mintStages.length;\\n    }\\n\\n    /**\\n     * @dev Returns maximum mintable supply.\\n     */\\n    function getMaxMintableSupply() external view override returns (uint256) {\\n        return _maxMintableSupply;\\n    }\\n\\n    /**\\n     * @dev Sets maximum mintable supply.\\n     *\\n     * New supply cannot be larger than the old.\\n     */\\n    function setMaxMintableSupply(\\n        uint256 maxMintableSupply\\n    ) external virtual onlyOwner {\\n        if (maxMintableSupply > _maxMintableSupply) {\\n            revert CannotIncreaseMaxMintableSupply();\\n        }\\n        _maxMintableSupply = maxMintableSupply;\\n        emit SetMaxMintableSupply(maxMintableSupply);\\n    }\\n\\n    /**\\n     * @dev Returns global wallet limit. This is the max number of tokens can be minted by one wallet.\\n     */\\n    function getGlobalWalletLimit() external view override returns (uint256) {\\n        return _globalWalletLimit;\\n    }\\n\\n    /**\\n     * @dev Sets global wallet limit.\\n     */\\n    function setGlobalWalletLimit(\\n        uint256 globalWalletLimit\\n    ) external onlyOwner {\\n        if (globalWalletLimit > _maxMintableSupply)\\n            revert GlobalWalletLimitOverflow();\\n        _globalWalletLimit = globalWalletLimit;\\n        emit SetGlobalWalletLimit(globalWalletLimit);\\n    }\\n\\n    /**\\n     * @dev Returns number of minted token for a given address.\\n     */\\n    function totalMintedByAddress(\\n        address a\\n    ) external view virtual override returns (uint256) {\\n        return _numberMinted(a);\\n    }\\n\\n    /**\\n     * @dev Returns info for one stage specified by index (starting from 0).\\n     */\\n    function getStageInfo(\\n        uint256 index\\n    ) external view override returns (MintStageInfo memory, uint32, uint256) {\\n        if (index >= _mintStages.length) {\\n            revert(\\\"InvalidStage\\\");\\n        }\\n        uint32 walletMinted = _stageMintedCountsPerWallet[index][msg.sender];\\n        uint256 stageMinted = _stageMintedCounts[index];\\n        return (_mintStages[index], walletMinted, stageMinted);\\n    }\\n\\n    /**\\n     * @dev Updates info for one stage specified by index (starting from 0).\\n     */\\n    function updateStage(\\n        uint256 index,\\n        uint80 price,\\n        uint32 walletLimit,\\n        bytes32 merkleRoot,\\n        uint24 maxStageSupply,\\n        uint64 startTimeUnixSeconds,\\n        uint64 endTimeUnixSeconds\\n    ) external onlyOwner {\\n        if (index >= _mintStages.length) revert InvalidStage();\\n        if (index >= 1) {\\n            if (\\n                startTimeUnixSeconds <\\n                _mintStages[index - 1].endTimeUnixSeconds +\\n                    getTimestampExpirySeconds()\\n            ) {\\n                revert InsufficientStageTimeGap();\\n            }\\n        }\\n        _assertValidStartAndEndTimestamp(\\n            startTimeUnixSeconds,\\n            endTimeUnixSeconds\\n        );\\n        _mintStages[index].price = price;\\n        _mintStages[index].walletLimit = walletLimit;\\n        _mintStages[index].merkleRoot = merkleRoot;\\n        _mintStages[index].maxStageSupply = maxStageSupply;\\n        _mintStages[index].startTimeUnixSeconds = startTimeUnixSeconds;\\n        _mintStages[index].endTimeUnixSeconds = endTimeUnixSeconds;\\n\\n        emit UpdateStage(\\n            index,\\n            price,\\n            walletLimit,\\n            merkleRoot,\\n            maxStageSupply,\\n            startTimeUnixSeconds,\\n            endTimeUnixSeconds\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints token(s).\\n     *\\n     * qty - number of tokens to mint\\n     * proof - the merkle proof generated on client side. This applies if using whitelist.\\n     * timestamp - the current timestamp\\n     * signature - the signature from cosigner if using cosigner.\\n     */\\n    function mint(\\n        uint32 qty,\\n        bytes32[] calldata proof,\\n        uint64 timestamp,\\n        bytes calldata signature\\n    ) external payable nonReentrant {\\n        _mintInternal(qty, msg.sender, proof, timestamp, signature);\\n    }\\n\\n    /**\\n     * @dev Mints token(s) through crossmint. This function is supposed to be called by crossmint.\\n     *\\n     * qty - number of tokens to mint\\n     * to - the address to mint tokens to\\n     * proof - the merkle proof generated on client side. This applies if using whitelist.\\n     * timestamp - the current timestamp\\n     * signature - the signature from cosigner if using cosigner.\\n     */\\n    function crossmint(\\n        uint32 qty,\\n        address to,\\n        bytes32[] calldata proof,\\n        uint64 timestamp,\\n        bytes calldata signature\\n    ) external payable nonReentrant {\\n        if (_crossmintAddress == address(0)) revert CrossmintAddressNotSet();\\n\\n        // Check the caller is Crossmint\\n        if (msg.sender != _crossmintAddress) revert CrossmintOnly();\\n\\n        _mintInternal(qty, to, proof, timestamp, signature);\\n    }\\n\\n    /**\\n     * @dev Implementation of minting.\\n     */\\n    function _mintInternal(\\n        uint32 qty,\\n        address to,\\n        bytes32[] calldata proof,\\n        uint64 timestamp,\\n        bytes calldata signature\\n    ) internal canMint hasSupply(qty) {\\n        uint64 stageTimestamp = uint64(block.timestamp);\\n\\n        MintStageInfo memory stage;\\n        if (_cosigner != address(0)) {\\n            assertValidCosign(msg.sender, qty, timestamp, signature);\\n            _assertValidTimestamp(timestamp);\\n            stageTimestamp = timestamp;\\n        }\\n\\n        uint256 activeStage = getActiveStageFromTimestamp(stageTimestamp);\\n\\n        stage = _mintStages[activeStage];\\n\\n        // Check value\\n        if (msg.value < stage.price * qty) revert NotEnoughValue();\\n\\n        // Check stage supply if applicable\\n        if (stage.maxStageSupply > 0) {\\n            if (_stageMintedCounts[activeStage] + qty > stage.maxStageSupply)\\n                revert StageSupplyExceeded();\\n        }\\n\\n        // Check global wallet limit if applicable\\n        if (_globalWalletLimit > 0) {\\n            if (_numberMinted(to) + qty > _globalWalletLimit)\\n                revert WalletGlobalLimitExceeded();\\n        }\\n\\n        // Check wallet limit for stage if applicable, limit == 0 means no limit enforced\\n        if (stage.walletLimit > 0) {\\n            if (\\n                _stageMintedCountsPerWallet[activeStage][to] + qty >\\n                stage.walletLimit\\n            ) revert WalletStageLimitExceeded();\\n        }\\n\\n        // Check merkle proof if applicable, merkleRoot == 0x00...00 means no proof required\\n        if (stage.merkleRoot != 0) {\\n            if (\\n                MerkleProof.processProof(\\n                    proof,\\n                    keccak256(abi.encodePacked(to))\\n                ) != stage.merkleRoot\\n            ) revert InvalidProof();\\n        }\\n\\n        _stageMintedCountsPerWallet[activeStage][to] += qty;\\n        _stageMintedCounts[activeStage] += qty;\\n        _safeMint(to, qty);\\n    }\\n\\n    /**\\n     * @dev Mints token(s) by owner.\\n     *\\n     * NOTE: This function bypasses validations thus only available for owner.\\n     * This is typically used for owner to  pre-mint or mint the remaining of the supply.\\n     */\\n    function ownerMint(\\n        uint32 qty,\\n        address to\\n    ) external onlyOwner hasSupply(qty) {\\n        _safeMint(to, qty);\\n    }\\n\\n    /**\\n     * @dev Withdraws funds by owner.\\n     */\\n    function withdraw() external onlyOwner {\\n        uint256 value = address(this).balance;\\n        (bool success, ) = msg.sender.call{value: value}(\\\"\\\");\\n        if (!success) revert WithdrawFailed();\\n        emit Withdraw(value);\\n    }\\n\\n    /**\\n     * @dev Sets token base URI.\\n     */\\n    function setBaseURI(string calldata baseURI) external onlyOwner {\\n        if (_baseURIPermanent) revert CannotUpdatePermanentBaseURI();\\n        _currentBaseURI = baseURI;\\n        emit SetBaseURI(baseURI);\\n    }\\n\\n    /**\\n     * @dev Sets token base URI permanent. Cannot revert.\\n     */\\n    function setBaseURIPermanent() external onlyOwner {\\n        _baseURIPermanent = true;\\n        emit PermanentBaseURI(_currentBaseURI);\\n    }\\n\\n    /**\\n     * @dev Returns token URI suffix.\\n     */\\n    function getTokenURISuffix()\\n        external\\n        view\\n        override\\n        returns (string memory)\\n    {\\n        return _tokenURISuffix;\\n    }\\n\\n    /**\\n     * @dev Sets token URI suffix. e.g. \\\".json\\\".\\n     */\\n    function setTokenURISuffix(string calldata suffix) external onlyOwner {\\n        _tokenURISuffix = suffix;\\n    }\\n\\n    /**\\n     * @dev Returns token URI for a given token id.\\n     */\\n    function tokenURI(\\n        uint256 tokenId\\n    ) public view override(ERC721A, IERC721A) returns (string memory) {\\n        if (!_exists(tokenId)) revert URIQueryForNonexistentToken();\\n\\n        string memory baseURI = _currentBaseURI;\\n        return\\n            bytes(baseURI).length != 0\\n                ? string(\\n                    abi.encodePacked(\\n                        baseURI,\\n                        _toString(tokenId),\\n                        _tokenURISuffix\\n                    )\\n                )\\n                : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Returns data hash for the given minter, qty and timestamp.\\n     */\\n    function getCosignDigest(\\n        address minter,\\n        uint32 qty,\\n        uint64 timestamp\\n    ) public view returns (bytes32) {\\n        if (_cosigner == address(0)) revert CosignerNotSet();\\n        return\\n            keccak256(\\n                abi.encodePacked(\\n                    address(this),\\n                    minter,\\n                    qty,\\n                    _cosigner,\\n                    timestamp,\\n                    _chainID(),\\n                    getCosignNonce(minter)\\n                )\\n            ).toEthSignedMessageHash();\\n    }\\n\\n    /**\\n     * @dev Validates the the given signature.\\n     */\\n    function assertValidCosign(\\n        address minter,\\n        uint32 qty,\\n        uint64 timestamp,\\n        bytes memory signature\\n    ) public view override {\\n        if (\\n            !SignatureChecker.isValidSignatureNow(\\n                _cosigner,\\n                getCosignDigest(minter, qty, timestamp),\\n                signature\\n            )\\n        ) revert InvalidCosignSignature();\\n    }\\n\\n    /**\\n     * @dev Returns the current active stage based on timestamp.\\n     */\\n    function getActiveStageFromTimestamp(\\n        uint64 timestamp\\n    ) public view override returns (uint256) {\\n        for (uint256 i = 0; i < _mintStages.length; i++) {\\n            if (\\n                timestamp >= _mintStages[i].startTimeUnixSeconds &&\\n                timestamp < _mintStages[i].endTimeUnixSeconds\\n            ) {\\n                return i;\\n            }\\n        }\\n        revert InvalidStage();\\n    }\\n\\n    /**\\n     * @dev Validates the timestamp is not expired.\\n     */\\n    function _assertValidTimestamp(uint64 timestamp) internal view {\\n        if (timestamp < block.timestamp - getTimestampExpirySeconds())\\n            revert TimestampExpired();\\n    }\\n\\n    /**\\n     * @dev Validates the start timestamp is before end timestamp. Used when updating stages.\\n     */\\n    function _assertValidStartAndEndTimestamp(\\n        uint64 start,\\n        uint64 end\\n    ) internal pure {\\n        if (start >= end) revert InvalidStartAndEndTimestamp();\\n    }\\n\\n    /**\\n     * @dev Returns chain id.\\n     */\\n    function _chainID() private view returns (uint256) {\\n        uint256 chainID;\\n        assembly {\\n            chainID := chainid()\\n        }\\n        return chainID;\\n    }\\n}\\n\",\"keccak256\":\"0xdd2931d8ac7020ab19a7d8203b33f50f461388d533e6d959adfb5bea987733a5\",\"license\":\"MIT\"},\"contracts/IERC721M.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"erc721a/contracts/extensions/IERC721AQueryable.sol\\\";\\n\\ninterface IERC721M is IERC721AQueryable {\\n    error CannotIncreaseMaxMintableSupply();\\n    error CannotUpdatePermanentBaseURI();\\n    error CosignerNotSet();\\n    error CrossmintAddressNotSet();\\n    error CrossmintOnly();\\n    error GlobalWalletLimitOverflow();\\n    error InsufficientStageTimeGap();\\n    error InvalidCosignSignature();\\n    error InvalidProof();\\n    error InvalidStage();\\n    error InvalidStageArgsLength();\\n    error InvalidStartAndEndTimestamp();\\n    error NoSupplyLeft();\\n    error NotEnoughValue();\\n    error NotMintable();\\n    error Mintable();\\n    error StageSupplyExceeded();\\n    error TimestampExpired();\\n    error WalletGlobalLimitExceeded();\\n    error WalletStageLimitExceeded();\\n    error WithdrawFailed();\\n\\n    struct MintStageInfo {\\n        uint80 price;\\n        uint32 walletLimit; // 0 for unlimited\\n        bytes32 merkleRoot; // 0x0 for no presale enforced\\n        uint24 maxStageSupply; // 0 for unlimited\\n        uint64 startTimeUnixSeconds;\\n        uint64 endTimeUnixSeconds;\\n    }\\n\\n    event UpdateStage(\\n        uint256 stage,\\n        uint80 price,\\n        uint32 walletLimit,\\n        bytes32 merkleRoot,\\n        uint24 maxStageSupply,\\n        uint64 startTimeUnixSeconds,\\n        uint64 endTimeUnixSeconds\\n    );\\n\\n    event SetCosigner(address cosigner);\\n    event SetCrossmintAddress(address crossmintAddress);\\n    event SetMintable(bool mintable);\\n    event SetMaxMintableSupply(uint256 maxMintableSupply);\\n    event SetGlobalWalletLimit(uint256 globalWalletLimit);\\n    event SetActiveStage(uint256 activeStage);\\n    event SetBaseURI(string baseURI);\\n    event SetTimestampExpirySeconds(uint64 expiry);\\n    event PermanentBaseURI(string baseURI);\\n    event Withdraw(uint256 value);\\n\\n    function getCosigner() external view returns (address);\\n\\n    function getCrossmintAddress() external view returns (address);\\n\\n    function getNumberStages() external view returns (uint256);\\n\\n    function getGlobalWalletLimit() external view returns (uint256);\\n\\n    function getTimestampExpirySeconds() external view returns (uint64);\\n\\n    function getMaxMintableSupply() external view returns (uint256);\\n\\n    function getMintable() external view returns (bool);\\n\\n    function totalMintedByAddress(address a) external view returns (uint256);\\n\\n    function getTokenURISuffix() external view returns (string memory);\\n\\n    function getStageInfo(\\n        uint256 index\\n    ) external view returns (MintStageInfo memory, uint32, uint256);\\n\\n    function getActiveStageFromTimestamp(\\n        uint64 timestamp\\n    ) external view returns (uint256);\\n\\n    function assertValidCosign(\\n        address minter,\\n        uint32 qty,\\n        uint64 timestamp,\\n        bytes memory signature\\n    ) external view;\\n}\\n\",\"keccak256\":\"0x69dad78e340fb80280f185480216fa43825e3944388889bcb892ccd79342871d\",\"license\":\"MIT\"},\"erc721a/contracts/ERC721A.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// ERC721A Contracts v4.2.3\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\nimport './IERC721A.sol';\\n\\n/**\\n * @dev Interface of ERC721 token receiver.\\n */\\ninterface ERC721A__IERC721Receiver {\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\\n/**\\n * @title ERC721A\\n *\\n * @dev Implementation of the [ERC721](https://eips.ethereum.org/EIPS/eip-721)\\n * Non-Fungible Token Standard, including the Metadata extension.\\n * Optimized for lower gas during batch mints.\\n *\\n * Token IDs are minted in sequential order (e.g. 0, 1, 2, 3, ...)\\n * starting from `_startTokenId()`.\\n *\\n * Assumptions:\\n *\\n * - An owner cannot have more than 2**64 - 1 (max value of uint64) of supply.\\n * - The maximum token ID cannot exceed 2**256 - 1 (max value of uint256).\\n */\\ncontract ERC721A is IERC721A {\\n    // Bypass for a `--via-ir` bug (https://github.com/chiru-labs/ERC721A/pull/364).\\n    struct TokenApprovalRef {\\n        address value;\\n    }\\n\\n    // =============================================================\\n    //                           CONSTANTS\\n    // =============================================================\\n\\n    // Mask of an entry in packed address data.\\n    uint256 private constant _BITMASK_ADDRESS_DATA_ENTRY = (1 << 64) - 1;\\n\\n    // The bit position of `numberMinted` in packed address data.\\n    uint256 private constant _BITPOS_NUMBER_MINTED = 64;\\n\\n    // The bit position of `numberBurned` in packed address data.\\n    uint256 private constant _BITPOS_NUMBER_BURNED = 128;\\n\\n    // The bit position of `aux` in packed address data.\\n    uint256 private constant _BITPOS_AUX = 192;\\n\\n    // Mask of all 256 bits in packed address data except the 64 bits for `aux`.\\n    uint256 private constant _BITMASK_AUX_COMPLEMENT = (1 << 192) - 1;\\n\\n    // The bit position of `startTimestamp` in packed ownership.\\n    uint256 private constant _BITPOS_START_TIMESTAMP = 160;\\n\\n    // The bit mask of the `burned` bit in packed ownership.\\n    uint256 private constant _BITMASK_BURNED = 1 << 224;\\n\\n    // The bit position of the `nextInitialized` bit in packed ownership.\\n    uint256 private constant _BITPOS_NEXT_INITIALIZED = 225;\\n\\n    // The bit mask of the `nextInitialized` bit in packed ownership.\\n    uint256 private constant _BITMASK_NEXT_INITIALIZED = 1 << 225;\\n\\n    // The bit position of `extraData` in packed ownership.\\n    uint256 private constant _BITPOS_EXTRA_DATA = 232;\\n\\n    // Mask of all 256 bits in a packed ownership except the 24 bits for `extraData`.\\n    uint256 private constant _BITMASK_EXTRA_DATA_COMPLEMENT = (1 << 232) - 1;\\n\\n    // The mask of the lower 160 bits for addresses.\\n    uint256 private constant _BITMASK_ADDRESS = (1 << 160) - 1;\\n\\n    // The maximum `quantity` that can be minted with {_mintERC2309}.\\n    // This limit is to prevent overflows on the address data entries.\\n    // For a limit of 5000, a total of 3.689e15 calls to {_mintERC2309}\\n    // is required to cause an overflow, which is unrealistic.\\n    uint256 private constant _MAX_MINT_ERC2309_QUANTITY_LIMIT = 5000;\\n\\n    // The `Transfer` event signature is given by:\\n    // `keccak256(bytes(\\\"Transfer(address,address,uint256)\\\"))`.\\n    bytes32 private constant _TRANSFER_EVENT_SIGNATURE =\\n        0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef;\\n\\n    // =============================================================\\n    //                            STORAGE\\n    // =============================================================\\n\\n    // The next token ID to be minted.\\n    uint256 private _currentIndex;\\n\\n    // The number of tokens burned.\\n    uint256 private _burnCounter;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to ownership details\\n    // An empty struct value does not necessarily mean the token is unowned.\\n    // See {_packedOwnershipOf} implementation for details.\\n    //\\n    // Bits Layout:\\n    // - [0..159]   `addr`\\n    // - [160..223] `startTimestamp`\\n    // - [224]      `burned`\\n    // - [225]      `nextInitialized`\\n    // - [232..255] `extraData`\\n    mapping(uint256 => uint256) private _packedOwnerships;\\n\\n    // Mapping owner address to address data.\\n    //\\n    // Bits Layout:\\n    // - [0..63]    `balance`\\n    // - [64..127]  `numberMinted`\\n    // - [128..191] `numberBurned`\\n    // - [192..255] `aux`\\n    mapping(address => uint256) private _packedAddressData;\\n\\n    // Mapping from token ID to approved address.\\n    mapping(uint256 => TokenApprovalRef) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // =============================================================\\n    //                          CONSTRUCTOR\\n    // =============================================================\\n\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _currentIndex = _startTokenId();\\n    }\\n\\n    // =============================================================\\n    //                   TOKEN COUNTING OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the starting token ID.\\n     * To change the starting token ID, please override this function.\\n     */\\n    function _startTokenId() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev Returns the next token ID to be minted.\\n     */\\n    function _nextTokenId() internal view virtual returns (uint256) {\\n        return _currentIndex;\\n    }\\n\\n    /**\\n     * @dev Returns the total number of tokens in existence.\\n     * Burned tokens will reduce the count.\\n     * To get the total number of tokens minted, please see {_totalMinted}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        // Counter underflow is impossible as _burnCounter cannot be incremented\\n        // more than `_currentIndex - _startTokenId()` times.\\n        unchecked {\\n            return _currentIndex - _burnCounter - _startTokenId();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the total amount of tokens minted in the contract.\\n     */\\n    function _totalMinted() internal view virtual returns (uint256) {\\n        // Counter underflow is impossible as `_currentIndex` does not decrement,\\n        // and it is initialized to `_startTokenId()`.\\n        unchecked {\\n            return _currentIndex - _startTokenId();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the total number of tokens burned.\\n     */\\n    function _totalBurned() internal view virtual returns (uint256) {\\n        return _burnCounter;\\n    }\\n\\n    // =============================================================\\n    //                    ADDRESS DATA OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the number of tokens in `owner`'s account.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        if (owner == address(0)) revert BalanceQueryForZeroAddress();\\n        return _packedAddressData[owner] & _BITMASK_ADDRESS_DATA_ENTRY;\\n    }\\n\\n    /**\\n     * Returns the number of tokens minted by `owner`.\\n     */\\n    function _numberMinted(address owner) internal view returns (uint256) {\\n        return (_packedAddressData[owner] >> _BITPOS_NUMBER_MINTED) & _BITMASK_ADDRESS_DATA_ENTRY;\\n    }\\n\\n    /**\\n     * Returns the number of tokens burned by or on behalf of `owner`.\\n     */\\n    function _numberBurned(address owner) internal view returns (uint256) {\\n        return (_packedAddressData[owner] >> _BITPOS_NUMBER_BURNED) & _BITMASK_ADDRESS_DATA_ENTRY;\\n    }\\n\\n    /**\\n     * Returns the auxiliary data for `owner`. (e.g. number of whitelist mint slots used).\\n     */\\n    function _getAux(address owner) internal view returns (uint64) {\\n        return uint64(_packedAddressData[owner] >> _BITPOS_AUX);\\n    }\\n\\n    /**\\n     * Sets the auxiliary data for `owner`. (e.g. number of whitelist mint slots used).\\n     * If there are multiple variables, please pack them into a uint64.\\n     */\\n    function _setAux(address owner, uint64 aux) internal virtual {\\n        uint256 packed = _packedAddressData[owner];\\n        uint256 auxCasted;\\n        // Cast `aux` with assembly to avoid redundant masking.\\n        assembly {\\n            auxCasted := aux\\n        }\\n        packed = (packed & _BITMASK_AUX_COMPLEMENT) | (auxCasted << _BITPOS_AUX);\\n        _packedAddressData[owner] = packed;\\n    }\\n\\n    // =============================================================\\n    //                            IERC165\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        // The interface IDs are constants representing the first 4 bytes\\n        // of the XOR of all function selectors in the interface.\\n        // See: [ERC165](https://eips.ethereum.org/EIPS/eip-165)\\n        // (e.g. `bytes4(i.functionA.selector ^ i.functionB.selector ^ ...)`)\\n        return\\n            interfaceId == 0x01ffc9a7 || // ERC165 interface ID for ERC165.\\n            interfaceId == 0x80ac58cd || // ERC165 interface ID for ERC721.\\n            interfaceId == 0x5b5e139f; // ERC165 interface ID for ERC721Metadata.\\n    }\\n\\n    // =============================================================\\n    //                        IERC721Metadata\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        if (!_exists(tokenId)) revert URIQueryForNonexistentToken();\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, _toString(tokenId))) : '';\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, it can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return '';\\n    }\\n\\n    // =============================================================\\n    //                     OWNERSHIPS OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        return address(uint160(_packedOwnershipOf(tokenId)));\\n    }\\n\\n    /**\\n     * @dev Gas spent here starts off proportional to the maximum mint batch size.\\n     * It gradually moves to O(1) as tokens get transferred around over time.\\n     */\\n    function _ownershipOf(uint256 tokenId) internal view virtual returns (TokenOwnership memory) {\\n        return _unpackedOwnership(_packedOwnershipOf(tokenId));\\n    }\\n\\n    /**\\n     * @dev Returns the unpacked `TokenOwnership` struct at `index`.\\n     */\\n    function _ownershipAt(uint256 index) internal view virtual returns (TokenOwnership memory) {\\n        return _unpackedOwnership(_packedOwnerships[index]);\\n    }\\n\\n    /**\\n     * @dev Initializes the ownership slot minted at `index` for efficiency purposes.\\n     */\\n    function _initializeOwnershipAt(uint256 index) internal virtual {\\n        if (_packedOwnerships[index] == 0) {\\n            _packedOwnerships[index] = _packedOwnershipOf(index);\\n        }\\n    }\\n\\n    /**\\n     * Returns the packed ownership data of `tokenId`.\\n     */\\n    function _packedOwnershipOf(uint256 tokenId) private view returns (uint256) {\\n        uint256 curr = tokenId;\\n\\n        unchecked {\\n            if (_startTokenId() <= curr)\\n                if (curr < _currentIndex) {\\n                    uint256 packed = _packedOwnerships[curr];\\n                    // If not burned.\\n                    if (packed & _BITMASK_BURNED == 0) {\\n                        // Invariant:\\n                        // There will always be an initialized ownership slot\\n                        // (i.e. `ownership.addr != address(0) && ownership.burned == false`)\\n                        // before an unintialized ownership slot\\n                        // (i.e. `ownership.addr == address(0) && ownership.burned == false`)\\n                        // Hence, `curr` will not underflow.\\n                        //\\n                        // We can directly compare the packed value.\\n                        // If the address is zero, packed will be zero.\\n                        while (packed == 0) {\\n                            packed = _packedOwnerships[--curr];\\n                        }\\n                        return packed;\\n                    }\\n                }\\n        }\\n        revert OwnerQueryForNonexistentToken();\\n    }\\n\\n    /**\\n     * @dev Returns the unpacked `TokenOwnership` struct from `packed`.\\n     */\\n    function _unpackedOwnership(uint256 packed) private pure returns (TokenOwnership memory ownership) {\\n        ownership.addr = address(uint160(packed));\\n        ownership.startTimestamp = uint64(packed >> _BITPOS_START_TIMESTAMP);\\n        ownership.burned = packed & _BITMASK_BURNED != 0;\\n        ownership.extraData = uint24(packed >> _BITPOS_EXTRA_DATA);\\n    }\\n\\n    /**\\n     * @dev Packs ownership data into a single uint256.\\n     */\\n    function _packOwnershipData(address owner, uint256 flags) private view returns (uint256 result) {\\n        assembly {\\n            // Mask `owner` to the lower 160 bits, in case the upper bits somehow aren't clean.\\n            owner := and(owner, _BITMASK_ADDRESS)\\n            // `owner | (block.timestamp << _BITPOS_START_TIMESTAMP) | flags`.\\n            result := or(owner, or(shl(_BITPOS_START_TIMESTAMP, timestamp()), flags))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the `nextInitialized` flag set if `quantity` equals 1.\\n     */\\n    function _nextInitializedFlag(uint256 quantity) private pure returns (uint256 result) {\\n        // For branchless setting of the `nextInitialized` flag.\\n        assembly {\\n            // `(quantity == 1) << _BITPOS_NEXT_INITIALIZED`.\\n            result := shl(_BITPOS_NEXT_INITIALIZED, eq(quantity, 1))\\n        }\\n    }\\n\\n    // =============================================================\\n    //                      APPROVAL OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the\\n     * zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) public payable virtual override {\\n        address owner = ownerOf(tokenId);\\n\\n        if (_msgSenderERC721A() != owner)\\n            if (!isApprovedForAll(owner, _msgSenderERC721A())) {\\n                revert ApprovalCallerNotOwnerNorApproved();\\n            }\\n\\n        _tokenApprovals[tokenId].value = to;\\n        emit Approval(owner, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();\\n\\n        return _tokenApprovals[tokenId].value;\\n    }\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom}\\n     * for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _operatorApprovals[_msgSenderERC721A()][operator] = approved;\\n        emit ApprovalForAll(_msgSenderERC721A(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted. See {_mint}.\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return\\n            _startTokenId() <= tokenId &&\\n            tokenId < _currentIndex && // If within bounds,\\n            _packedOwnerships[tokenId] & _BITMASK_BURNED == 0; // and not burned.\\n    }\\n\\n    /**\\n     * @dev Returns whether `msgSender` is equal to `approvedAddress` or `owner`.\\n     */\\n    function _isSenderApprovedOrOwner(\\n        address approvedAddress,\\n        address owner,\\n        address msgSender\\n    ) private pure returns (bool result) {\\n        assembly {\\n            // Mask `owner` to the lower 160 bits, in case the upper bits somehow aren't clean.\\n            owner := and(owner, _BITMASK_ADDRESS)\\n            // Mask `msgSender` to the lower 160 bits, in case the upper bits somehow aren't clean.\\n            msgSender := and(msgSender, _BITMASK_ADDRESS)\\n            // `msgSender == owner || msgSender == approvedAddress`.\\n            result := or(eq(msgSender, owner), eq(msgSender, approvedAddress))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the storage slot and value for the approved address of `tokenId`.\\n     */\\n    function _getApprovedSlotAndAddress(uint256 tokenId)\\n        private\\n        view\\n        returns (uint256 approvedAddressSlot, address approvedAddress)\\n    {\\n        TokenApprovalRef storage tokenApproval = _tokenApprovals[tokenId];\\n        // The following is equivalent to `approvedAddress = _tokenApprovals[tokenId].value`.\\n        assembly {\\n            approvedAddressSlot := tokenApproval.slot\\n            approvedAddress := sload(approvedAddressSlot)\\n        }\\n    }\\n\\n    // =============================================================\\n    //                      TRANSFER OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token\\n     * by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public payable virtual override {\\n        uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\\n\\n        if (address(uint160(prevOwnershipPacked)) != from) revert TransferFromIncorrectOwner();\\n\\n        (uint256 approvedAddressSlot, address approvedAddress) = _getApprovedSlotAndAddress(tokenId);\\n\\n        // The nested ifs save around 20+ gas over a compound boolean condition.\\n        if (!_isSenderApprovedOrOwner(approvedAddress, from, _msgSenderERC721A()))\\n            if (!isApprovedForAll(from, _msgSenderERC721A())) revert TransferCallerNotOwnerNorApproved();\\n\\n        if (to == address(0)) revert TransferToZeroAddress();\\n\\n        _beforeTokenTransfers(from, to, tokenId, 1);\\n\\n        // Clear approvals from the previous owner.\\n        assembly {\\n            if approvedAddress {\\n                // This is equivalent to `delete _tokenApprovals[tokenId]`.\\n                sstore(approvedAddressSlot, 0)\\n            }\\n        }\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        // Counter overflow is incredibly unrealistic as `tokenId` would have to be 2**256.\\n        unchecked {\\n            // We can directly increment and decrement the balances.\\n            --_packedAddressData[from]; // Updates: `balance -= 1`.\\n            ++_packedAddressData[to]; // Updates: `balance += 1`.\\n\\n            // Updates:\\n            // - `address` to the next owner.\\n            // - `startTimestamp` to the timestamp of transfering.\\n            // - `burned` to `false`.\\n            // - `nextInitialized` to `true`.\\n            _packedOwnerships[tokenId] = _packOwnershipData(\\n                to,\\n                _BITMASK_NEXT_INITIALIZED | _nextExtraData(from, to, prevOwnershipPacked)\\n            );\\n\\n            // If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\\n            if (prevOwnershipPacked & _BITMASK_NEXT_INITIALIZED == 0) {\\n                uint256 nextTokenId = tokenId + 1;\\n                // If the next slot's address is zero and not burned (i.e. packed value is zero).\\n                if (_packedOwnerships[nextTokenId] == 0) {\\n                    // If the next slot is within bounds.\\n                    if (nextTokenId != _currentIndex) {\\n                        // Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\\n                        _packedOwnerships[nextTokenId] = prevOwnershipPacked;\\n                    }\\n                }\\n            }\\n        }\\n\\n        emit Transfer(from, to, tokenId);\\n        _afterTokenTransfers(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public payable virtual override {\\n        safeTransferFrom(from, to, tokenId, '');\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token\\n     * by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement\\n     * {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public payable virtual override {\\n        transferFrom(from, to, tokenId);\\n        if (to.code.length != 0)\\n            if (!_checkContractOnERC721Received(from, to, tokenId, _data)) {\\n                revert TransferToNonERC721ReceiverImplementer();\\n            }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before a set of serially-ordered token IDs\\n     * are about to be transferred. This includes minting.\\n     * And also called before burning one token.\\n     *\\n     * `startTokenId` - the first token ID to be transferred.\\n     * `quantity` - the amount to be transferred.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, `tokenId` will be burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _beforeTokenTransfers(\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after a set of serially-ordered token IDs\\n     * have been transferred. This includes minting.\\n     * And also called after one token has been burned.\\n     *\\n     * `startTokenId` - the first token ID to be transferred.\\n     * `quantity` - the amount to be transferred.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` has been\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` has been minted for `to`.\\n     * - When `to` is zero, `tokenId` has been burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _afterTokenTransfers(\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target contract.\\n     *\\n     * `from` - Previous owner of the given token ID.\\n     * `to` - Target address that will receive the token.\\n     * `tokenId` - Token ID to be transferred.\\n     * `_data` - Optional data to send along with the call.\\n     *\\n     * Returns whether the call correctly returned the expected magic value.\\n     */\\n    function _checkContractOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        try ERC721A__IERC721Receiver(to).onERC721Received(_msgSenderERC721A(), from, tokenId, _data) returns (\\n            bytes4 retval\\n        ) {\\n            return retval == ERC721A__IERC721Receiver(to).onERC721Received.selector;\\n        } catch (bytes memory reason) {\\n            if (reason.length == 0) {\\n                revert TransferToNonERC721ReceiverImplementer();\\n            } else {\\n                assembly {\\n                    revert(add(32, reason), mload(reason))\\n                }\\n            }\\n        }\\n    }\\n\\n    // =============================================================\\n    //                        MINT OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * Emits a {Transfer} event for each mint.\\n     */\\n    function _mint(address to, uint256 quantity) internal virtual {\\n        uint256 startTokenId = _currentIndex;\\n        if (quantity == 0) revert MintZeroQuantity();\\n\\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\\n\\n        // Overflows are incredibly unrealistic.\\n        // `balance` and `numberMinted` have a maximum limit of 2**64.\\n        // `tokenId` has a maximum limit of 2**256.\\n        unchecked {\\n            // Updates:\\n            // - `balance += quantity`.\\n            // - `numberMinted += quantity`.\\n            //\\n            // We can directly add to the `balance` and `numberMinted`.\\n            _packedAddressData[to] += quantity * ((1 << _BITPOS_NUMBER_MINTED) | 1);\\n\\n            // Updates:\\n            // - `address` to the owner.\\n            // - `startTimestamp` to the timestamp of minting.\\n            // - `burned` to `false`.\\n            // - `nextInitialized` to `quantity == 1`.\\n            _packedOwnerships[startTokenId] = _packOwnershipData(\\n                to,\\n                _nextInitializedFlag(quantity) | _nextExtraData(address(0), to, 0)\\n            );\\n\\n            uint256 toMasked;\\n            uint256 end = startTokenId + quantity;\\n\\n            // Use assembly to loop and emit the `Transfer` event for gas savings.\\n            // The duplicated `log4` removes an extra check and reduces stack juggling.\\n            // The assembly, together with the surrounding Solidity code, have been\\n            // delicately arranged to nudge the compiler into producing optimized opcodes.\\n            assembly {\\n                // Mask `to` to the lower 160 bits, in case the upper bits somehow aren't clean.\\n                toMasked := and(to, _BITMASK_ADDRESS)\\n                // Emit the `Transfer` event.\\n                log4(\\n                    0, // Start of data (0, since no data).\\n                    0, // End of data (0, since no data).\\n                    _TRANSFER_EVENT_SIGNATURE, // Signature.\\n                    0, // `address(0)`.\\n                    toMasked, // `to`.\\n                    startTokenId // `tokenId`.\\n                )\\n\\n                // The `iszero(eq(,))` check ensures that large values of `quantity`\\n                // that overflows uint256 will make the loop run out of gas.\\n                // The compiler will optimize the `iszero` away for performance.\\n                for {\\n                    let tokenId := add(startTokenId, 1)\\n                } iszero(eq(tokenId, end)) {\\n                    tokenId := add(tokenId, 1)\\n                } {\\n                    // Emit the `Transfer` event. Similar to above.\\n                    log4(0, 0, _TRANSFER_EVENT_SIGNATURE, 0, toMasked, tokenId)\\n                }\\n            }\\n            if (toMasked == 0) revert MintToZeroAddress();\\n\\n            _currentIndex = end;\\n        }\\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\\n    }\\n\\n    /**\\n     * @dev Mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * This function is intended for efficient minting only during contract creation.\\n     *\\n     * It emits only one {ConsecutiveTransfer} as defined in\\n     * [ERC2309](https://eips.ethereum.org/EIPS/eip-2309),\\n     * instead of a sequence of {Transfer} event(s).\\n     *\\n     * Calling this function outside of contract creation WILL make your contract\\n     * non-compliant with the ERC721 standard.\\n     * For full ERC721 compliance, substituting ERC721 {Transfer} event(s) with the ERC2309\\n     * {ConsecutiveTransfer} event is only permissible during contract creation.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * Emits a {ConsecutiveTransfer} event.\\n     */\\n    function _mintERC2309(address to, uint256 quantity) internal virtual {\\n        uint256 startTokenId = _currentIndex;\\n        if (to == address(0)) revert MintToZeroAddress();\\n        if (quantity == 0) revert MintZeroQuantity();\\n        if (quantity > _MAX_MINT_ERC2309_QUANTITY_LIMIT) revert MintERC2309QuantityExceedsLimit();\\n\\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\\n\\n        // Overflows are unrealistic due to the above check for `quantity` to be below the limit.\\n        unchecked {\\n            // Updates:\\n            // - `balance += quantity`.\\n            // - `numberMinted += quantity`.\\n            //\\n            // We can directly add to the `balance` and `numberMinted`.\\n            _packedAddressData[to] += quantity * ((1 << _BITPOS_NUMBER_MINTED) | 1);\\n\\n            // Updates:\\n            // - `address` to the owner.\\n            // - `startTimestamp` to the timestamp of minting.\\n            // - `burned` to `false`.\\n            // - `nextInitialized` to `quantity == 1`.\\n            _packedOwnerships[startTokenId] = _packOwnershipData(\\n                to,\\n                _nextInitializedFlag(quantity) | _nextExtraData(address(0), to, 0)\\n            );\\n\\n            emit ConsecutiveTransfer(startTokenId, startTokenId + quantity - 1, address(0), to);\\n\\n            _currentIndex = startTokenId + quantity;\\n        }\\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\\n    }\\n\\n    /**\\n     * @dev Safely mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement\\n     * {IERC721Receiver-onERC721Received}, which is called for each safe transfer.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * See {_mint}.\\n     *\\n     * Emits a {Transfer} event for each mint.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 quantity,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, quantity);\\n\\n        unchecked {\\n            if (to.code.length != 0) {\\n                uint256 end = _currentIndex;\\n                uint256 index = end - quantity;\\n                do {\\n                    if (!_checkContractOnERC721Received(address(0), to, index++, _data)) {\\n                        revert TransferToNonERC721ReceiverImplementer();\\n                    }\\n                } while (index < end);\\n                // Reentrancy protection.\\n                if (_currentIndex != end) revert();\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Equivalent to `_safeMint(to, quantity, '')`.\\n     */\\n    function _safeMint(address to, uint256 quantity) internal virtual {\\n        _safeMint(to, quantity, '');\\n    }\\n\\n    // =============================================================\\n    //                        BURN OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Equivalent to `_burn(tokenId, false)`.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        _burn(tokenId, false);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId, bool approvalCheck) internal virtual {\\n        uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\\n\\n        address from = address(uint160(prevOwnershipPacked));\\n\\n        (uint256 approvedAddressSlot, address approvedAddress) = _getApprovedSlotAndAddress(tokenId);\\n\\n        if (approvalCheck) {\\n            // The nested ifs save around 20+ gas over a compound boolean condition.\\n            if (!_isSenderApprovedOrOwner(approvedAddress, from, _msgSenderERC721A()))\\n                if (!isApprovedForAll(from, _msgSenderERC721A())) revert TransferCallerNotOwnerNorApproved();\\n        }\\n\\n        _beforeTokenTransfers(from, address(0), tokenId, 1);\\n\\n        // Clear approvals from the previous owner.\\n        assembly {\\n            if approvedAddress {\\n                // This is equivalent to `delete _tokenApprovals[tokenId]`.\\n                sstore(approvedAddressSlot, 0)\\n            }\\n        }\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        // Counter overflow is incredibly unrealistic as `tokenId` would have to be 2**256.\\n        unchecked {\\n            // Updates:\\n            // - `balance -= 1`.\\n            // - `numberBurned += 1`.\\n            //\\n            // We can directly decrement the balance, and increment the number burned.\\n            // This is equivalent to `packed -= 1; packed += 1 << _BITPOS_NUMBER_BURNED;`.\\n            _packedAddressData[from] += (1 << _BITPOS_NUMBER_BURNED) - 1;\\n\\n            // Updates:\\n            // - `address` to the last owner.\\n            // - `startTimestamp` to the timestamp of burning.\\n            // - `burned` to `true`.\\n            // - `nextInitialized` to `true`.\\n            _packedOwnerships[tokenId] = _packOwnershipData(\\n                from,\\n                (_BITMASK_BURNED | _BITMASK_NEXT_INITIALIZED) | _nextExtraData(from, address(0), prevOwnershipPacked)\\n            );\\n\\n            // If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\\n            if (prevOwnershipPacked & _BITMASK_NEXT_INITIALIZED == 0) {\\n                uint256 nextTokenId = tokenId + 1;\\n                // If the next slot's address is zero and not burned (i.e. packed value is zero).\\n                if (_packedOwnerships[nextTokenId] == 0) {\\n                    // If the next slot is within bounds.\\n                    if (nextTokenId != _currentIndex) {\\n                        // Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\\n                        _packedOwnerships[nextTokenId] = prevOwnershipPacked;\\n                    }\\n                }\\n            }\\n        }\\n\\n        emit Transfer(from, address(0), tokenId);\\n        _afterTokenTransfers(from, address(0), tokenId, 1);\\n\\n        // Overflow not possible, as _burnCounter cannot be exceed _currentIndex times.\\n        unchecked {\\n            _burnCounter++;\\n        }\\n    }\\n\\n    // =============================================================\\n    //                     EXTRA DATA OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Directly sets the extra data for the ownership data `index`.\\n     */\\n    function _setExtraDataAt(uint256 index, uint24 extraData) internal virtual {\\n        uint256 packed = _packedOwnerships[index];\\n        if (packed == 0) revert OwnershipNotInitializedForExtraData();\\n        uint256 extraDataCasted;\\n        // Cast `extraData` with assembly to avoid redundant masking.\\n        assembly {\\n            extraDataCasted := extraData\\n        }\\n        packed = (packed & _BITMASK_EXTRA_DATA_COMPLEMENT) | (extraDataCasted << _BITPOS_EXTRA_DATA);\\n        _packedOwnerships[index] = packed;\\n    }\\n\\n    /**\\n     * @dev Called during each token transfer to set the 24bit `extraData` field.\\n     * Intended to be overridden by the cosumer contract.\\n     *\\n     * `previousExtraData` - the value of `extraData` before transfer.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, `tokenId` will be burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _extraData(\\n        address from,\\n        address to,\\n        uint24 previousExtraData\\n    ) internal view virtual returns (uint24) {}\\n\\n    /**\\n     * @dev Returns the next extra data for the packed ownership data.\\n     * The returned result is shifted into position.\\n     */\\n    function _nextExtraData(\\n        address from,\\n        address to,\\n        uint256 prevOwnershipPacked\\n    ) private view returns (uint256) {\\n        uint24 extraData = uint24(prevOwnershipPacked >> _BITPOS_EXTRA_DATA);\\n        return uint256(_extraData(from, to, extraData)) << _BITPOS_EXTRA_DATA;\\n    }\\n\\n    // =============================================================\\n    //                       OTHER OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the message sender (defaults to `msg.sender`).\\n     *\\n     * If you are writing GSN compatible contracts, you need to override this function.\\n     */\\n    function _msgSenderERC721A() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    /**\\n     * @dev Converts a uint256 to its ASCII string decimal representation.\\n     */\\n    function _toString(uint256 value) internal pure virtual returns (string memory str) {\\n        assembly {\\n            // The maximum value of a uint256 contains 78 digits (1 byte per digit), but\\n            // we allocate 0xa0 bytes to keep the free memory pointer 32-byte word aligned.\\n            // We will need 1 word for the trailing zeros padding, 1 word for the length,\\n            // and 3 words for a maximum of 78 digits. Total: 5 * 0x20 = 0xa0.\\n            let m := add(mload(0x40), 0xa0)\\n            // Update the free memory pointer to allocate.\\n            mstore(0x40, m)\\n            // Assign the `str` to the end.\\n            str := sub(m, 0x20)\\n            // Zeroize the slot after the string.\\n            mstore(str, 0)\\n\\n            // Cache the end of the memory to calculate the length later.\\n            let end := str\\n\\n            // We write the string from rightmost digit to leftmost digit.\\n            // The following is essentially a do-while loop that also handles the zero case.\\n            // prettier-ignore\\n            for { let temp := value } 1 {} {\\n                str := sub(str, 1)\\n                // Write the character to the pointer.\\n                // The ASCII index of the '0' character is 48.\\n                mstore8(str, add(48, mod(temp, 10)))\\n                // Keep dividing `temp` until zero.\\n                temp := div(temp, 10)\\n                // prettier-ignore\\n                if iszero(temp) { break }\\n            }\\n\\n            let length := sub(end, str)\\n            // Move the pointer 32 bytes leftwards to make room for the length.\\n            str := sub(str, 0x20)\\n            // Store the length.\\n            mstore(str, length)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x23116c16976b7d8c0c714ba1b38ae6b16c16fc90ec69b568fb1ebf1bc063e01c\",\"license\":\"MIT\"},\"erc721a/contracts/IERC721A.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// ERC721A Contracts v4.2.3\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\n/**\\n * @dev Interface of ERC721A.\\n */\\ninterface IERC721A {\\n    /**\\n     * The caller must own the token or be an approved operator.\\n     */\\n    error ApprovalCallerNotOwnerNorApproved();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error ApprovalQueryForNonexistentToken();\\n\\n    /**\\n     * Cannot query the balance for the zero address.\\n     */\\n    error BalanceQueryForZeroAddress();\\n\\n    /**\\n     * Cannot mint to the zero address.\\n     */\\n    error MintToZeroAddress();\\n\\n    /**\\n     * The quantity of tokens minted must be more than zero.\\n     */\\n    error MintZeroQuantity();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error OwnerQueryForNonexistentToken();\\n\\n    /**\\n     * The caller must own the token or be an approved operator.\\n     */\\n    error TransferCallerNotOwnerNorApproved();\\n\\n    /**\\n     * The token must be owned by `from`.\\n     */\\n    error TransferFromIncorrectOwner();\\n\\n    /**\\n     * Cannot safely transfer to a contract that does not implement the\\n     * ERC721Receiver interface.\\n     */\\n    error TransferToNonERC721ReceiverImplementer();\\n\\n    /**\\n     * Cannot transfer to the zero address.\\n     */\\n    error TransferToZeroAddress();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error URIQueryForNonexistentToken();\\n\\n    /**\\n     * The `quantity` minted with ERC2309 exceeds the safety limit.\\n     */\\n    error MintERC2309QuantityExceedsLimit();\\n\\n    /**\\n     * The `extraData` cannot be set on an unintialized ownership slot.\\n     */\\n    error OwnershipNotInitializedForExtraData();\\n\\n    // =============================================================\\n    //                            STRUCTS\\n    // =============================================================\\n\\n    struct TokenOwnership {\\n        // The address of the owner.\\n        address addr;\\n        // Stores the start time of ownership with minimal overhead for tokenomics.\\n        uint64 startTimestamp;\\n        // Whether the token has been burned.\\n        bool burned;\\n        // Arbitrary data similar to `startTimestamp` that can be set via {_extraData}.\\n        uint24 extraData;\\n    }\\n\\n    // =============================================================\\n    //                         TOKEN COUNTERS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the total number of tokens in existence.\\n     * Burned tokens will reduce the count.\\n     * To get the total number of tokens minted, please see {_totalMinted}.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    // =============================================================\\n    //                            IERC165\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n\\n    // =============================================================\\n    //                            IERC721\\n    // =============================================================\\n\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables\\n     * (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in `owner`'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`,\\n     * checking first that contract recipients are aware of the ERC721 protocol\\n     * to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move\\n     * this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement\\n     * {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external payable;\\n\\n    /**\\n     * @dev Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external payable;\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom}\\n     * whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token\\n     * by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external payable;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the\\n     * zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external payable;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom}\\n     * for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    // =============================================================\\n    //                        IERC721Metadata\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n\\n    // =============================================================\\n    //                           IERC2309\\n    // =============================================================\\n\\n    /**\\n     * @dev Emitted when tokens in `fromTokenId` to `toTokenId`\\n     * (inclusive) is transferred from `from` to `to`, as defined in the\\n     * [ERC2309](https://eips.ethereum.org/EIPS/eip-2309) standard.\\n     *\\n     * See {_mintERC2309} for more details.\\n     */\\n    event ConsecutiveTransfer(uint256 indexed fromTokenId, uint256 toTokenId, address indexed from, address indexed to);\\n}\\n\",\"keccak256\":\"0xa31dfe2635a25f899e279befef27ffcc02fd16e636c58d4c251a303f2355f7ad\",\"license\":\"MIT\"},\"erc721a/contracts/extensions/ERC721AQueryable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// ERC721A Contracts v4.2.3\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\nimport './IERC721AQueryable.sol';\\nimport '../ERC721A.sol';\\n\\n/**\\n * @title ERC721AQueryable.\\n *\\n * @dev ERC721A subclass with convenience query functions.\\n */\\nabstract contract ERC721AQueryable is ERC721A, IERC721AQueryable {\\n    /**\\n     * @dev Returns the `TokenOwnership` struct at `tokenId` without reverting.\\n     *\\n     * If the `tokenId` is out of bounds:\\n     *\\n     * - `addr = address(0)`\\n     * - `startTimestamp = 0`\\n     * - `burned = false`\\n     * - `extraData = 0`\\n     *\\n     * If the `tokenId` is burned:\\n     *\\n     * - `addr = <Address of owner before token was burned>`\\n     * - `startTimestamp = <Timestamp when token was burned>`\\n     * - `burned = true`\\n     * - `extraData = <Extra data when token was burned>`\\n     *\\n     * Otherwise:\\n     *\\n     * - `addr = <Address of owner>`\\n     * - `startTimestamp = <Timestamp of start of ownership>`\\n     * - `burned = false`\\n     * - `extraData = <Extra data at start of ownership>`\\n     */\\n    function explicitOwnershipOf(uint256 tokenId) public view virtual override returns (TokenOwnership memory) {\\n        TokenOwnership memory ownership;\\n        if (tokenId < _startTokenId() || tokenId >= _nextTokenId()) {\\n            return ownership;\\n        }\\n        ownership = _ownershipAt(tokenId);\\n        if (ownership.burned) {\\n            return ownership;\\n        }\\n        return _ownershipOf(tokenId);\\n    }\\n\\n    /**\\n     * @dev Returns an array of `TokenOwnership` structs at `tokenIds` in order.\\n     * See {ERC721AQueryable-explicitOwnershipOf}\\n     */\\n    function explicitOwnershipsOf(uint256[] calldata tokenIds)\\n        external\\n        view\\n        virtual\\n        override\\n        returns (TokenOwnership[] memory)\\n    {\\n        unchecked {\\n            uint256 tokenIdsLength = tokenIds.length;\\n            TokenOwnership[] memory ownerships = new TokenOwnership[](tokenIdsLength);\\n            for (uint256 i; i != tokenIdsLength; ++i) {\\n                ownerships[i] = explicitOwnershipOf(tokenIds[i]);\\n            }\\n            return ownerships;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an array of token IDs owned by `owner`,\\n     * in the range [`start`, `stop`)\\n     * (i.e. `start <= tokenId < stop`).\\n     *\\n     * This function allows for tokens to be queried if the collection\\n     * grows too big for a single call of {ERC721AQueryable-tokensOfOwner}.\\n     *\\n     * Requirements:\\n     *\\n     * - `start < stop`\\n     */\\n    function tokensOfOwnerIn(\\n        address owner,\\n        uint256 start,\\n        uint256 stop\\n    ) external view virtual override returns (uint256[] memory) {\\n        unchecked {\\n            if (start >= stop) revert InvalidQueryRange();\\n            uint256 tokenIdsIdx;\\n            uint256 stopLimit = _nextTokenId();\\n            // Set `start = max(start, _startTokenId())`.\\n            if (start < _startTokenId()) {\\n                start = _startTokenId();\\n            }\\n            // Set `stop = min(stop, stopLimit)`.\\n            if (stop > stopLimit) {\\n                stop = stopLimit;\\n            }\\n            uint256 tokenIdsMaxLength = balanceOf(owner);\\n            // Set `tokenIdsMaxLength = min(balanceOf(owner), stop - start)`,\\n            // to cater for cases where `balanceOf(owner)` is too big.\\n            if (start < stop) {\\n                uint256 rangeLength = stop - start;\\n                if (rangeLength < tokenIdsMaxLength) {\\n                    tokenIdsMaxLength = rangeLength;\\n                }\\n            } else {\\n                tokenIdsMaxLength = 0;\\n            }\\n            uint256[] memory tokenIds = new uint256[](tokenIdsMaxLength);\\n            if (tokenIdsMaxLength == 0) {\\n                return tokenIds;\\n            }\\n            // We need to call `explicitOwnershipOf(start)`,\\n            // because the slot at `start` may not be initialized.\\n            TokenOwnership memory ownership = explicitOwnershipOf(start);\\n            address currOwnershipAddr;\\n            // If the starting slot exists (i.e. not burned), initialize `currOwnershipAddr`.\\n            // `ownership.address` will not be zero, as `start` is clamped to the valid token ID range.\\n            if (!ownership.burned) {\\n                currOwnershipAddr = ownership.addr;\\n            }\\n            for (uint256 i = start; i != stop && tokenIdsIdx != tokenIdsMaxLength; ++i) {\\n                ownership = _ownershipAt(i);\\n                if (ownership.burned) {\\n                    continue;\\n                }\\n                if (ownership.addr != address(0)) {\\n                    currOwnershipAddr = ownership.addr;\\n                }\\n                if (currOwnershipAddr == owner) {\\n                    tokenIds[tokenIdsIdx++] = i;\\n                }\\n            }\\n            // Downsize the array to fit.\\n            assembly {\\n                mstore(tokenIds, tokenIdsIdx)\\n            }\\n            return tokenIds;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an array of token IDs owned by `owner`.\\n     *\\n     * This function scans the ownership mapping and is O(`totalSupply`) in complexity.\\n     * It is meant to be called off-chain.\\n     *\\n     * See {ERC721AQueryable-tokensOfOwnerIn} for splitting the scan into\\n     * multiple smaller scans if the collection is large enough to cause\\n     * an out-of-gas error (10K collections should be fine).\\n     */\\n    function tokensOfOwner(address owner) external view virtual override returns (uint256[] memory) {\\n        unchecked {\\n            uint256 tokenIdsIdx;\\n            address currOwnershipAddr;\\n            uint256 tokenIdsLength = balanceOf(owner);\\n            uint256[] memory tokenIds = new uint256[](tokenIdsLength);\\n            TokenOwnership memory ownership;\\n            for (uint256 i = _startTokenId(); tokenIdsIdx != tokenIdsLength; ++i) {\\n                ownership = _ownershipAt(i);\\n                if (ownership.burned) {\\n                    continue;\\n                }\\n                if (ownership.addr != address(0)) {\\n                    currOwnershipAddr = ownership.addr;\\n                }\\n                if (currOwnershipAddr == owner) {\\n                    tokenIds[tokenIdsIdx++] = i;\\n                }\\n            }\\n            return tokenIds;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xad83a36e9758f044317e9a5e2903bc49730b6d5de8fbe9a61b2f91fb4c2148c7\",\"license\":\"MIT\"},\"erc721a/contracts/extensions/IERC721AQueryable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// ERC721A Contracts v4.2.3\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\nimport '../IERC721A.sol';\\n\\n/**\\n * @dev Interface of ERC721AQueryable.\\n */\\ninterface IERC721AQueryable is IERC721A {\\n    /**\\n     * Invalid query range (`start` >= `stop`).\\n     */\\n    error InvalidQueryRange();\\n\\n    /**\\n     * @dev Returns the `TokenOwnership` struct at `tokenId` without reverting.\\n     *\\n     * If the `tokenId` is out of bounds:\\n     *\\n     * - `addr = address(0)`\\n     * - `startTimestamp = 0`\\n     * - `burned = false`\\n     * - `extraData = 0`\\n     *\\n     * If the `tokenId` is burned:\\n     *\\n     * - `addr = <Address of owner before token was burned>`\\n     * - `startTimestamp = <Timestamp when token was burned>`\\n     * - `burned = true`\\n     * - `extraData = <Extra data when token was burned>`\\n     *\\n     * Otherwise:\\n     *\\n     * - `addr = <Address of owner>`\\n     * - `startTimestamp = <Timestamp of start of ownership>`\\n     * - `burned = false`\\n     * - `extraData = <Extra data at start of ownership>`\\n     */\\n    function explicitOwnershipOf(uint256 tokenId) external view returns (TokenOwnership memory);\\n\\n    /**\\n     * @dev Returns an array of `TokenOwnership` structs at `tokenIds` in order.\\n     * See {ERC721AQueryable-explicitOwnershipOf}\\n     */\\n    function explicitOwnershipsOf(uint256[] memory tokenIds) external view returns (TokenOwnership[] memory);\\n\\n    /**\\n     * @dev Returns an array of token IDs owned by `owner`,\\n     * in the range [`start`, `stop`)\\n     * (i.e. `start <= tokenId < stop`).\\n     *\\n     * This function allows for tokens to be queried if the collection\\n     * grows too big for a single call of {ERC721AQueryable-tokensOfOwner}.\\n     *\\n     * Requirements:\\n     *\\n     * - `start < stop`\\n     */\\n    function tokensOfOwnerIn(\\n        address owner,\\n        uint256 start,\\n        uint256 stop\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Returns an array of token IDs owned by `owner`.\\n     *\\n     * This function scans the ownership mapping and is O(`totalSupply`) in complexity.\\n     * It is meant to be called off-chain.\\n     *\\n     * See {ERC721AQueryable-tokensOfOwnerIn} for splitting the scan into\\n     * multiple smaller scans if the collection is large enough to cause\\n     * an out-of-gas error (10K collections should be fine).\\n     */\\n    function tokensOfOwner(address owner) external view returns (uint256[] memory);\\n}\\n\",\"keccak256\":\"0xc14fc938aecdccee7edbd3a3ce60b6171cdc3da3345cfa6d288c268983c48942\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620040f4380380620040f4833981016040819052620000349162000307565b8651879087906200004d90600290602085019062000177565b5080516200006390600390602084019062000177565b50506000805550620000753362000125565b6001600955838311156200009c57604051630590c51360e01b815260040160405180910390fd5b600a805460ff19169055600c849055600d8390558451620000c590600f90602088019062000177565b50600a80546001600160401b03909216620100000262010000600160501b03196001600160a01b039094166a0100000000000000000000029390931662010000600160f01b031990921691909117919091179055506200041e9350505050565b600880546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b8280546200018590620003e1565b90600052602060002090601f016020900481019282620001a95760008555620001f4565b82601f10620001c457805160ff1916838001178555620001f4565b82800160010185558215620001f4579182015b82811115620001f4578251825591602001919060010190620001d7565b506200020292915062000206565b5090565b5b8082111562000202576000815560010162000207565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200024557600080fd5b81516001600160401b03808211156200026257620002626200021d565b604051601f8301601f19908116603f011681019082821181831017156200028d576200028d6200021d565b81604052838152602092508683858801011115620002aa57600080fd5b600091505b83821015620002ce5785820183015181830184015290820190620002af565b83821115620002e05760008385830101525b9695505050505050565b80516001600160401b03811681146200030257600080fd5b919050565b600080600080600080600060e0888a0312156200032357600080fd5b87516001600160401b03808211156200033b57600080fd5b620003498b838c0162000233565b985060208a01519150808211156200036057600080fd5b6200036e8b838c0162000233565b975060408a01519150808211156200038557600080fd5b50620003948a828b0162000233565b60608a015160808b015160a08c0151929850909650945090506001600160a01b0381168114620003c357600080fd5b9150620003d360c08901620002ea565b905092959891949750929550565b600181811c90821680620003f657607f821691505b602082108114156200041857634e487b7160e01b600052602260045260246000fd5b50919050565b613cc6806200042e6000396000f3fe6080604052600436106102c95760003560e01c80638462151c11610175578063aac5ab1f116100dc578063ce2b0ec011610095578063efdaa2ec1161006f578063efdaa2ec146108eb578063f2fde38b14610900578063f698bceb14610920578063f8d096961461093857600080fd5b8063ce2b0ec01461086f578063e985e9c51461088f578063efb6b11f146108d857600080fd5b8063aac5ab1f146107ba578063b50248e7146107da578063b7a9fa60146107fa578063b88d4fde1461080f578063c23dc68f14610822578063c87b56dd1461084f57600080fd5b8063997556241161012e578063997556241461069e57806399a2557a146106be578063a06c492f1461067e578063a22cb465146106de578063a3759f60146106fe578063a9852bfb1461079a57600080fd5b80638462151c146105e05780638da5cb5b1461060d5780638dcdb09d1461062b5780638f9315111461064b57806395d89b411461066957806397cf84fc1461067e57600080fd5b80633ccfd60b1161023457806362acbd9a116101ed57806370a08231116101c757806370a082311461057657806370da24ee14610596578063715018a6146105ab57806373e1607e146105c057600080fd5b806362acbd9a146105235780636352211e1461053657806367808a341461055657600080fd5b80633ccfd60b1461046257806342842e0e146104775780634ae0402f1461048a5780634b1c53b4146104c157806355f804b3146104d65780635bbb2177146104f657600080fd5b806318160ddd1161028657806318160ddd146103a75780631ce03eed146103ca57806323b872dd146103ea578063285d70d4146103fd57806333bbbf061461041d578063372992e41461044257600080fd5b806301ffc9a7146102ce578063020451381461030357806306fdde0314610325578063081812fc14610347578063095ea7b31461037f5780631053a81514610392575b600080fd5b3480156102da57600080fd5b506102ee6102e9366004613098565b610958565b60405190151581526020015b60405180910390f35b34801561030f57600080fd5b5061032361031e3660046130d1565b6109aa565b005b34801561033157600080fd5b5061033a610a28565b6040516102fa9190613144565b34801561035357600080fd5b50610367610362366004613157565b610aba565b6040516001600160a01b0390911681526020016102fa565b61032361038d366004613170565b610afe565b34801561039e57600080fd5b50610323610b9e565b3480156103b357600080fd5b50600154600054035b6040519081526020016102fa565b3480156103d657600080fd5b506103bc6103e53660046131c5565b610bf0565b6103236103f8366004613208565b610d30565b34801561040957600080fd5b50610323610418366004613254565b610ec2565b34801561042957600080fd5b50600a54600160501b90046001600160a01b0316610367565b34801561044e57600080fd5b5061032361045d366004613157565b610f0b565b34801561046e57600080fd5b50610323610f6b565b610323610485366004613208565b611016565b34801561049657600080fd5b50600a546201000090046001600160401b03166040516001600160401b0390911681526020016102fa565b3480156104cd57600080fd5b50600c546103bc565b3480156104e257600080fd5b506103236104f13660046132b0565b611036565b34801561050257600080fd5b50610516610511366004613335565b6110a5565b6040516102fa91906133a6565b6103236105313660046133e8565b611170565b34801561054257600080fd5b50610367610551366004613157565b6111ee565b34801561056257600080fd5b506103bc61057136600461348c565b6111f9565b34801561058257600080fd5b506103bc6105913660046130d1565b6112c1565b3480156105a257600080fd5b506010546103bc565b3480156105b757600080fd5b5061032361130f565b3480156105cc57600080fd5b506103236105db3660046134d1565b611323565b3480156105ec57600080fd5b506106006105fb3660046130d1565b6115c3565b6040516102fa9190613549565b34801561061957600080fd5b506008546001600160a01b0316610367565b34801561063757600080fd5b50610323610646366004613581565b6116d2565b34801561065757600080fd5b50600b546001600160a01b0316610367565b34801561067557600080fd5b5061033a611ba7565b34801561068a57600080fd5b506103bc6106993660046130d1565b611bb6565b3480156106aa57600080fd5b506103236106b93660046130d1565b611be0565b3480156106ca57600080fd5b506106006106d93660046135f5565b611c36565b3480156106ea57600080fd5b506103236106f9366004613628565b611db1565b34801561070a57600080fd5b5061071e610719366004613157565b611e1d565b6040805184516001600160501b0316815260208086015163ffffffff90811691830191909152858301519282019290925260608086015162ffffff16908201526080808601516001600160401b039081169183019190915260a095860151169481019490945290911660c083015260e0820152610100016102fa565b3480156107a657600080fd5b506103236107b53660046132b0565b611f66565b3480156107c657600080fd5b506103236107d536600461365b565b611f7a565b3480156107e657600080fd5b506103236107f5366004613727565b611fd3565b34801561080657600080fd5b5061033a61201d565b61032361081d366004613795565b61202c565b34801561082e57600080fd5b5061084261083d366004613157565b612070565b6040516102fa91906137e4565b34801561085b57600080fd5b5061033a61086a366004613157565b6120e8565b34801561087b57600080fd5b5061032361088a36600461348c565b6121f2565b34801561089b57600080fd5b506102ee6108aa3660046137f2565b6001600160a01b03918216600090815260076020908152604080832093909416825291909152205460ff1690565b6103236108e636600461380e565b612253565b3480156108f757600080fd5b50600d546103bc565b34801561090c57600080fd5b5061032361091b3660046130d1565b612274565b34801561092c57600080fd5b50600a5460ff166102ee565b34801561094457600080fd5b50610323610953366004613157565b6122ed565b60006301ffc9a760e01b6001600160e01b03198316148061098957506380ac58cd60e01b6001600160e01b03198316145b806109a45750635b5e139f60e01b6001600160e01b03198316145b92915050565b6109b261234d565b600a80547fffff0000000000000000000000000000000000000000ffffffffffffffffffff16600160501b6001600160a01b038416908102919091179091556040519081527faea1573caf7b4fdd079b947d86c1be6c725642c47582f8f9bd2c7d2a30bf0bd9906020015b60405180910390a150565b606060028054610a37906138a1565b80601f0160208091040260200160405190810160405280929190818152602001828054610a63906138a1565b8015610ab05780601f10610a8557610100808354040283529160200191610ab0565b820191906000526020600020905b815481529060010190602001808311610a9357829003601f168201915b5050505050905090565b6000610ac5826123a7565b610ae2576040516333d1c03960e21b815260040160405180910390fd5b506000908152600660205260409020546001600160a01b031690565b6000610b09826111ee565b9050336001600160a01b03821614610b4257610b2581336108aa565b610b42576040516367d9dca160e11b815260040160405180910390fd5b60008281526006602052604080822080546001600160a01b0319166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b610ba661234d565b600a805461ff0019166101001790556040517fc6a6c2b165e62c9d37fc51a18ed76e5be22304bc1d337877c98f31c23e40b0f590610be690600e906138dc565b60405180910390a1565b600a54600090600160501b90046001600160a01b0316610c23576040516353bd4fb360e11b815260040160405180910390fd5b610d26308585600a8054906101000a90046001600160a01b031686610c454690565b610c4e8b611bb6565b604051606097881b6bffffffffffffffffffffffff19908116602083015296881b8716603482015260e09590951b6001600160e01b031916604886015292861b909416604c84015260c01b6001600160c01b031916938201939093526068810191909152608881019190915260a801604051602081830303815290604052805190602001206040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101829052600090605c01604051602081830303815290604052805190602001209050919050565b90505b9392505050565b6000610d3b826123ce565b9050836001600160a01b0316816001600160a01b031614610d6e5760405162a1148160e81b815260040160405180910390fd5b60008281526006602052604090208054338082146001600160a01b03881690911417610dbb57610d9e86336108aa565b610dbb57604051632ce44b5f60e11b815260040160405180910390fd5b6001600160a01b038516610de257604051633a954ecd60e21b815260040160405180910390fd5b8015610ded57600082555b6001600160a01b038681166000908152600560205260408082208054600019019055918716808252919020805460010190554260a01b17600160e11b17600085815260046020526040902055600160e11b8316610e785760018401600081815260046020526040902054610e76576000548114610e765760008181526004602052604090208490555b505b83856001600160a01b0316876001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45b505050505050565b610eca61234d565b600a805460ff19168215159081179091556040519081527fe717a2bfc51e250b028aaac5eb448e76f4df26b9609956782bff49097bb792cf90602001610a1d565b610f1361234d565b600c54811115610f3657604051630590c51360e01b815260040160405180910390fd5b600d8190556040518181527f5307de8ad7d34d5ddfd5171435c143bdc645493980f453eb5d7cdb3e494a1b3590602001610a1d565b610f7361234d565b6040514790600090339083908381818185875af1925050503d8060008114610fb7576040519150601f19603f3d011682016040523d82523d6000602084013e610fbc565b606091505b5050905080610fde57604051631d42c86760e21b815260040160405180910390fd5b6040518281527f5b6b431d4476a211bb7d41c20d1aab9ae2321deee0d20be3d9fc9b1093fa6e3d906020015b60405180910390a15050565b6110318383836040518060200160405280600081525061202c565b505050565b61103e61234d565b600a54610100900460ff1615611067576040516306ccad4160e41b815260040160405180910390fd5b611073600e8383612fe9565b507f23c8c9488efebfd474e85a7956de6f39b17c7ab88502d42a623db2d8e382bbaa828260405161100a929190613961565b6060816000816001600160401b038111156110c2576110c2613685565b60405190808252806020026020018201604052801561111457816020015b6040805160808101825260008082526020808301829052928201819052606082015282526000199092019101816110e05790505b50905060005b8281146111675761114286868381811061113657611136613990565b90506020020135612070565b82828151811061115457611154613990565b602090810291909101015260010161111a565b50949350505050565b61117861242f565b600b546001600160a01b03166111a157604051637e9f68eb60e11b815260040160405180910390fd5b600b546001600160a01b031633146111cc5760405163f46fd68360e01b815260040160405180910390fd5b6111db87878787878787612489565b6111e56001600955565b50505050505050565b60006109a4826123ce565b6000805b6010548110156112a7576010818154811061121a5761121a613990565b60009182526020909120600260039092020101546001600160401b03630100000090910481169084161080159061128a57506010818154811061125f5761125f613990565b60009182526020909120600260039092020101546001600160401b03600160581b9091048116908416105b156112955792915050565b8061129f816139bc565b9150506111fd565b5060405163e82a532960e01b815260040160405180910390fd5b60006001600160a01b0382166112ea576040516323d3ad8160e21b815260040160405180910390fd5b506001600160a01b03166000908152600560205260409020546001600160401b031690565b61131761234d565b61132160006128e3565b565b61132b61234d565b601054871061134d5760405163e82a532960e01b815260040160405180910390fd5b600187106113e557600a546201000090046001600160401b0316601061137460018a6139d7565b8154811061138457611384613990565b9060005260206000209060030201600201600b9054906101000a90046001600160401b03166113b391906139ee565b6001600160401b0316826001600160401b031610156113e557604051636bc1af9360e01b815260040160405180910390fd5b6113ef8282612935565b856010888154811061140357611403613990565b906000526020600020906003020160000160006101000a8154816001600160501b0302191690836001600160501b03160217905550846010888154811061144c5761144c613990565b9060005260206000209060030201600001600a6101000a81548163ffffffff021916908363ffffffff160217905550836010888154811061148f5761148f613990565b90600052602060002090600302016001018190555082601088815481106114b8576114b8613990565b906000526020600020906003020160020160006101000a81548162ffffff021916908362ffffff16021790555081601088815481106114f9576114f9613990565b906000526020600020906003020160020160036101000a8154816001600160401b0302191690836001600160401b03160217905550806010888154811061154257611542613990565b9060005260206000209060030201600201600b6101000a8154816001600160401b0302191690836001600160401b031602179055507fb3268648542a1bb1b2dd12e3b14aeb5a3ab22c592de96bdd3e842154a5b394fa878787878787876040516115b29796959493929190613a19565b60405180910390a150505050505050565b606060008060006115d3856112c1565b90506000816001600160401b038111156115ef576115ef613685565b604051908082528060200260200182016040528015611618578160200160208202803683370190505b50905061164560408051608081018252600080825260208201819052918101829052606081019190915290565b60005b8386146116c6576116588161296b565b9150816040015115611669576116be565b81516001600160a01b03161561167e57815194505b876001600160a01b0316856001600160a01b031614156116be57808387806001019850815181106116b1576116b1613990565b6020026020010181815250505b600101611648565b50909695505050505050565b6116da61234d565b60105460005b818110156117555760108054806116f9576116f9613a69565b60008281526020812060036000199093019283020180546001600160701b03191681556001810191909155600201805472ffffffffffffffffffffffffffffffffffffff1916905590558061174d816139bc565b9150506116e0565b50600a546201000090046001600160401b031660005b83811015611ba05760018110611815578185856117896001856139d7565b81811061179857611798613990565b905060c0020160a00160208101906117b0919061348c565b6117ba91906139ee565b6001600160401b03168585838181106117d5576117d5613990565b905060c0020160800160208101906117ed919061348c565b6001600160401b0316101561181557604051636bc1af9360e01b815260040160405180910390fd5b61187185858381811061182a5761182a613990565b905060c002016080016020810190611842919061348c565b86868481811061185457611854613990565b905060c0020160a001602081019061186c919061348c565b612935565b60106040518060c0016040528087878581811061189057611890613990565b6118a692602060c0909202019081019150613a7f565b6001600160501b031681526020018787858181106118c6576118c6613990565b905060c0020160200160208101906118de9190613a9a565b63ffffffff1681526020018787858181106118fb576118fb613990565b905060c0020160400135815260200187878581811061191c5761191c613990565b905060c0020160600160208101906119349190613ab5565b62ffffff16815260200187878581811061195057611950613990565b905060c002016080016020810190611968919061348c565b6001600160401b0316815260200187878581811061198857611988613990565b905060c0020160a00160208101906119a0919061348c565b6001600160401b039081169091528254600181810185556000948552602094859020845160039093020180549585015163ffffffff16600160501b026001600160701b03199096166001600160501b0390931692909217949094178155604083015193810193909355606082015160029093018054608084015160a0909401518316600160581b0267ffffffffffffffff60581b19949093166301000000026affffffffffffffffffffff1990911662ffffff9095169490941793909317919091161790557fb3268648542a1bb1b2dd12e3b14aeb5a3ab22c592de96bdd3e842154a5b394fa81868682818110611a9957611a99613990565b611aaf92602060c0909202019081019150613a7f565b878785818110611ac157611ac1613990565b905060c002016020016020810190611ad99190613a9a565b888886818110611aeb57611aeb613990565b905060c0020160400135898987818110611b0757611b07613990565b905060c002016060016020810190611b1f9190613ab5565b8a8a88818110611b3157611b31613990565b905060c002016080016020810190611b49919061348c565b8b8b89818110611b5b57611b5b613990565b905060c0020160a0016020810190611b73919061348c565b604051611b869796959493929190613a19565b60405180910390a180611b98816139bc565b91505061176b565b5050505050565b606060038054610a37906138a1565b6001600160a01b038116600090815260056020526040808220546001600160401b03911c166109a4565b611be861234d565b600b80546001600160a01b0319166001600160a01b0383169081179091556040519081527ff477d93c015f2a73c2ccc5ed37078d12123b80fc5d12e0014c60b913bc1a1ec490602001610a1d565b6060818310611c5857604051631960ccad60e11b815260040160405180910390fd5b600080611c6460005490565b905080841115611c72578093505b6000611c7d876112c1565b905084861015611c9c5785850381811015611c96578091505b50611ca0565b5060005b6000816001600160401b03811115611cba57611cba613685565b604051908082528060200260200182016040528015611ce3578160200160208202803683370190505b50905081611cf6579350610d2992505050565b6000611d0188612070565b905060008160400151611d12575080515b885b888114158015611d245750848714155b15611da057611d328161296b565b9250826040015115611d4357611d98565b82516001600160a01b031615611d5857825191505b8a6001600160a01b0316826001600160a01b03161415611d985780848880600101995081518110611d8b57611d8b613990565b6020026020010181815250505b600101611d14565b505050928352509095945050505050565b3360008181526007602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a081019190915260105460009081908410611e995760405162461bcd60e51b815260206004820152600c60248201526b496e76616c6964537461676560a01b60448201526064015b60405180910390fd5b60008481526011602090815260408083203384528252808320548784526012909252909120546010805463ffffffff9093169287908110611edc57611edc613990565b60009182526020918290206040805160c08101825260039390930290910180546001600160501b0381168452600160501b900463ffffffff169383019390935260018301549082015260029091015462ffffff81166060830152630100000081046001600160401b039081166080840152600160581b9091041660a0820152969195509350915050565b611f6e61234d565b611031600f8383612fe9565b611f8261234d565b8163ffffffff16600c5481611f9a6001546000540390565b611fa49190613ad0565b1115611fc35760405163800113cb60e01b815260040160405180910390fd5b611031828463ffffffff166129a7565b600a54611ffb90600160501b90046001600160a01b0316611ff5868686610bf0565b836129c1565b6120175760405162b7fad960e11b815260040160405180910390fd5b50505050565b6060600f8054610a37906138a1565b612037848484610d30565b6001600160a01b0383163b156120175761205384848484612b03565b612017576040516368d2bf6b60e11b815260040160405180910390fd5b60408051608080820183526000808352602080840182905283850182905260608085018390528551938401865282845290830182905293820181905292810183905290915060005483106120c45792915050565b6120cd8361296b565b90508060400151156120df5792915050565b610d2983612bfa565b60606120f3826123a7565b61211057604051630a14c4b560e41b815260040160405180910390fd5b6000600e805461211f906138a1565b80601f016020809104026020016040519081016040528092919081815260200182805461214b906138a1565b80156121985780601f1061216d57610100808354040283529160200191612198565b820191906000526020600020905b81548152906001019060200180831161217b57829003601f168201915b505050505090508051600014156121be5760405180602001604052806000815250610d29565b806121c884612c2f565b600f6040516020016121dc93929190613ae8565b6040516020818303038152906040529392505050565b6121fa61234d565b600a805469ffffffffffffffff00001916620100006001600160401b038416908102919091179091556040519081527f41b9126ccd8cb4505310c40a376055b5ef246bd4c9214de02af31ef4f26b1b5f90602001610a1d565b61225b61242f565b61226a86338787878787612489565b610eba6001600955565b61227c61234d565b6001600160a01b0381166122e15760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401611e90565b6122ea816128e3565b50565b6122f561234d565b600c548111156123185760405163430b83b160e11b815260040160405180910390fd5b600c8190556040518181527fc7bbc2b288fc13314546ea4aa51f6bcf71b7ba4740beeb3d32e9acef57b6668a90602001610a1d565b6008546001600160a01b031633146113215760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401611e90565b60008054821080156109a4575050600090815260046020526040902054600160e01b161590565b60008160005481101561241657600081815260046020526040902054600160e01b8116612414575b80610d295750600019016000818152600460205260409020546123f6565b505b604051636f96cda160e11b815260040160405180910390fd5b600260095414156124825760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401611e90565b6002600955565b600a5460ff166124ac57604051630952c8a960e11b815260040160405180910390fd5b8663ffffffff16600c54816124c46001546000540390565b6124ce9190613ad0565b11156124ed5760405163800113cb60e01b815260040160405180910390fd5b426125266040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a081019190915290565b600a54600160501b90046001600160a01b03161561258d57612580338b8888888080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611fd392505050565b61258986612c7d565b8591505b6000612598836111f9565b9050601081815481106125ad576125ad613990565b60009182526020918290206040805160c081018252600390930290910180546001600160501b03811680855263ffffffff600160501b9092048216958501959095526001820154928401929092526002015462ffffff811660608401526001600160401b036301000000820481166080850152600160581b9091041660a083015290935061263e91908d1690613b84565b6001600160501b031634101561266757604051630717c22560e51b815260040160405180910390fd5b606082015162ffffff16156126c157606082015160008281526012602052604090205462ffffff909116906126a39063ffffffff8e1690613ad0565b11156126c15760405162d0844960e21b815260040160405180910390fd5b600d541561272857600d548b63ffffffff166126ff8c6001600160a01b03166000908152600560205260409081902054901c6001600160401b031690565b6127099190613ad0565b11156127285760405163751304ed60e11b815260040160405180910390fd5b602082015163ffffffff161561279a5760208083015160008381526011835260408082206001600160a01b038f168352909352919091205463ffffffff91821691612775918e9116613bb3565b63ffffffff16111561279a5760405163b4f3729b60e01b815260040160405180910390fd5b6040820151156128415781604001516128238a8a808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152505060405161280892508f915060200160609190911b6bffffffffffffffffffffffff1916815260140190565b60405160208183030381529060405280519060200120612cc2565b14612841576040516309bde33960e01b815260040160405180910390fd5b60008181526011602090815260408083206001600160a01b038e168452909152812080548d929061287990849063ffffffff16613bb3565b92506101000a81548163ffffffff021916908363ffffffff1602179055508a63ffffffff166012600083815260200190815260200160002060008282546128c09190613ad0565b909155506128d690508a63ffffffff8d166129a7565b5050505050505050505050565b600880546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b806001600160401b0316826001600160401b03161061296757604051631750215560e11b815260040160405180910390fd5b5050565b6040805160808101825260008082526020820181905291810182905260608101919091526000828152600460205260409020546109a490612d0f565b612967828260405180602001604052806000815250612d56565b60008060006129d08585612dbc565b909250905060008160048111156129e9576129e9613bd2565b148015612a075750856001600160a01b0316826001600160a01b0316145b15612a1757600192505050610d29565b600080876001600160a01b0316631626ba7e60e01b8888604051602401612a3f929190613be8565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909416939093179092529051612a7d9190613c01565b600060405180830381855afa9150503d8060008114612ab8576040519150601f19603f3d011682016040523d82523d6000602084013e612abd565b606091505b5091509150818015612ad0575080516020145b8015612af757508051630b135d3f60e11b90612af59083016020908101908401613c1d565b145b98975050505050505050565b604051630a85bd0160e11b81526000906001600160a01b0385169063150b7a0290612b38903390899088908890600401613c36565b602060405180830381600087803b158015612b5257600080fd5b505af1925050508015612b82575060408051601f3d908101601f19168201909252612b7f91810190613c73565b60015b612bdd573d808015612bb0576040519150601f19603f3d011682016040523d82523d6000602084013e612bb5565b606091505b508051612bd5576040516368d2bf6b60e11b815260040160405180910390fd5b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050949350505050565b6040805160808101825260008082526020820181905291810182905260608101919091526109a4612c2a836123ce565b612d0f565b606060a06040510180604052602081039150506000815280825b600183039250600a81066030018353600a900480612c6657612c6b565b612c49565b50819003601f19909101908152919050565b600a54612c99906201000090046001600160401b0316426139d7565b816001600160401b031610156122ea576040516313634e8d60e11b815260040160405180910390fd5b600081815b8451811015612d0757612cf382868381518110612ce657612ce6613990565b6020026020010151612e02565b915080612cff816139bc565b915050612cc7565b509392505050565b604080516080810182526001600160a01b038316815260a083901c6001600160401b03166020820152600160e01b831615159181019190915260e89190911c606082015290565b612d608383612e2e565b6001600160a01b0383163b15611031576000548281035b612d8a6000868380600101945086612b03565b612da7576040516368d2bf6b60e11b815260040160405180910390fd5b818110612d77578160005414611ba057600080fd5b600080825160411415612df35760208301516040840151606085015160001a612de787828585612f25565b94509450505050612dfb565b506000905060025b9250929050565b6000818310612e1e576000828152602084905260409020610d29565b5060009182526020526040902090565b60005481612e4f5760405163b562e8dd60e01b815260040160405180910390fd5b6001600160a01b03831660008181526005602090815260408083208054680100000000000000018802019055848352600490915281206001851460e11b4260a01b178317905582840190839083907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8180a4600183015b818114612efe57808360007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef600080a4600101612ec6565b5081612f1c57604051622e076360e81b815260040160405180910390fd5b60005550505050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115612f5c5750600090506003612fe0565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015612fb0573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116612fd957600060019250925050612fe0565b9150600090505b94509492505050565b828054612ff5906138a1565b90600052602060002090601f016020900481019282613017576000855561305d565b82601f106130305782800160ff1982351617855561305d565b8280016001018555821561305d579182015b8281111561305d578235825591602001919060010190613042565b5061306992915061306d565b5090565b5b80821115613069576000815560010161306e565b6001600160e01b0319811681146122ea57600080fd5b6000602082840312156130aa57600080fd5b8135610d2981613082565b80356001600160a01b03811681146130cc57600080fd5b919050565b6000602082840312156130e357600080fd5b610d29826130b5565b60005b838110156131075781810151838201526020016130ef565b838111156120175750506000910152565b600081518084526131308160208601602086016130ec565b601f01601f19169290920160200192915050565b602081526000610d296020830184613118565b60006020828403121561316957600080fd5b5035919050565b6000806040838503121561318357600080fd5b61318c836130b5565b946020939093013593505050565b803563ffffffff811681146130cc57600080fd5b80356001600160401b03811681146130cc57600080fd5b6000806000606084860312156131da57600080fd5b6131e3846130b5565b92506131f16020850161319a565b91506131ff604085016131ae565b90509250925092565b60008060006060848603121561321d57600080fd5b613226846130b5565b9250613234602085016130b5565b9150604084013590509250925092565b803580151581146130cc57600080fd5b60006020828403121561326657600080fd5b610d2982613244565b60008083601f84011261328157600080fd5b5081356001600160401b0381111561329857600080fd5b602083019150836020828501011115612dfb57600080fd5b600080602083850312156132c357600080fd5b82356001600160401b038111156132d957600080fd5b6132e58582860161326f565b90969095509350505050565b60008083601f84011261330357600080fd5b5081356001600160401b0381111561331a57600080fd5b6020830191508360208260051b8501011115612dfb57600080fd5b6000806020838503121561334857600080fd5b82356001600160401b0381111561335e57600080fd5b6132e5858286016132f1565b80516001600160a01b031682526020808201516001600160401b03169083015260408082015115159083015260609081015162ffffff16910152565b6020808252825182820181905260009190848201906040850190845b818110156116c6576133d583855161336a565b92840192608092909201916001016133c2565b600080600080600080600060a0888a03121561340357600080fd5b61340c8861319a565b965061341a602089016130b5565b955060408801356001600160401b038082111561343657600080fd5b6134428b838c016132f1565b909750955085915061345660608b016131ae565b945060808a013591508082111561346c57600080fd5b506134798a828b0161326f565b989b979a50959850939692959293505050565b60006020828403121561349e57600080fd5b610d29826131ae565b80356001600160501b03811681146130cc57600080fd5b803562ffffff811681146130cc57600080fd5b600080600080600080600060e0888a0312156134ec57600080fd5b873596506134fc602089016134a7565b955061350a6040890161319a565b94506060880135935061351f608089016134be565b925061352d60a089016131ae565b915061353b60c089016131ae565b905092959891949750929550565b6020808252825182820181905260009190848201906040850190845b818110156116c657835183529284019291840191600101613565565b6000806020838503121561359457600080fd5b82356001600160401b03808211156135ab57600080fd5b818501915085601f8301126135bf57600080fd5b8135818111156135ce57600080fd5b86602060c0830285010111156135e357600080fd5b60209290920196919550909350505050565b60008060006060848603121561360a57600080fd5b613613846130b5565b95602085013595506040909401359392505050565b6000806040838503121561363b57600080fd5b613644836130b5565b915061365260208401613244565b90509250929050565b6000806040838503121561366e57600080fd5b6136778361319a565b9150613652602084016130b5565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126136ac57600080fd5b81356001600160401b03808211156136c6576136c6613685565b604051601f8301601f19908116603f011681019082821181831017156136ee576136ee613685565b8160405283815286602085880101111561370757600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000806000806080858703121561373d57600080fd5b613746856130b5565b93506137546020860161319a565b9250613762604086016131ae565b915060608501356001600160401b0381111561377d57600080fd5b6137898782880161369b565b91505092959194509250565b600080600080608085870312156137ab57600080fd5b6137b4856130b5565b93506137c2602086016130b5565b92506040850135915060608501356001600160401b0381111561377d57600080fd5b608081016109a4828461336a565b6000806040838503121561380557600080fd5b613677836130b5565b6000806000806000806080878903121561382757600080fd5b6138308761319a565b955060208701356001600160401b038082111561384c57600080fd5b6138588a838b016132f1565b909750955085915061386c60408a016131ae565b9450606089013591508082111561388257600080fd5b5061388f89828a0161326f565b979a9699509497509295939492505050565b600181811c908216806138b557607f821691505b602082108114156138d657634e487b7160e01b600052602260045260246000fd5b50919050565b60006020808352600084546138f0816138a1565b80848701526040600180841660008114613911576001811461392557613953565b60ff19851689840152606089019550613953565b896000528660002060005b8581101561394b5781548b8201860152908301908801613930565b8a0184019650505b509398975050505050505050565b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006000198214156139d0576139d06139a6565b5060010190565b6000828210156139e9576139e96139a6565b500390565b60006001600160401b03808316818516808303821115613a1057613a106139a6565b01949350505050565b9687526001600160501b0395909516602087015263ffffffff939093166040860152606085019190915262ffffff1660808401526001600160401b0390811660a08401521660c082015260e00190565b634e487b7160e01b600052603160045260246000fd5b600060208284031215613a9157600080fd5b610d29826134a7565b600060208284031215613aac57600080fd5b610d298261319a565b600060208284031215613ac757600080fd5b610d29826134be565b60008219821115613ae357613ae36139a6565b500190565b600084516020613afb8285838a016130ec565b855191840191613b0e8184848a016130ec565b8554920191600090613b1f816138a1565b60018281168015613b375760018114613b4857613b74565b60ff19841687528287019450613b74565b896000528560002060005b84811015613b6c57815489820152908301908701613b53565b505082870194505b50929a9950505050505050505050565b60006001600160501b0380831681851681830481118215151615613baa57613baa6139a6565b02949350505050565b600063ffffffff808316818516808303821115613a1057613a106139a6565b634e487b7160e01b600052602160045260246000fd5b828152604060208201526000610d266040830184613118565b60008251613c138184602087016130ec565b9190910192915050565b600060208284031215613c2f57600080fd5b5051919050565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090613c6990830184613118565b9695505050505050565b600060208284031215613c8557600080fd5b8151610d298161308256fea2646970667358221220043e87876511be4b27809096e16ebb29ac0f0779a4daf1d4165c02b7d9bdc23364736f6c63430008090033",
  "deployedBytecode": "0x6080604052600436106102c95760003560e01c80638462151c11610175578063aac5ab1f116100dc578063ce2b0ec011610095578063efdaa2ec1161006f578063efdaa2ec146108eb578063f2fde38b14610900578063f698bceb14610920578063f8d096961461093857600080fd5b8063ce2b0ec01461086f578063e985e9c51461088f578063efb6b11f146108d857600080fd5b8063aac5ab1f146107ba578063b50248e7146107da578063b7a9fa60146107fa578063b88d4fde1461080f578063c23dc68f14610822578063c87b56dd1461084f57600080fd5b8063997556241161012e578063997556241461069e57806399a2557a146106be578063a06c492f1461067e578063a22cb465146106de578063a3759f60146106fe578063a9852bfb1461079a57600080fd5b80638462151c146105e05780638da5cb5b1461060d5780638dcdb09d1461062b5780638f9315111461064b57806395d89b411461066957806397cf84fc1461067e57600080fd5b80633ccfd60b1161023457806362acbd9a116101ed57806370a08231116101c757806370a082311461057657806370da24ee14610596578063715018a6146105ab57806373e1607e146105c057600080fd5b806362acbd9a146105235780636352211e1461053657806367808a341461055657600080fd5b80633ccfd60b1461046257806342842e0e146104775780634ae0402f1461048a5780634b1c53b4146104c157806355f804b3146104d65780635bbb2177146104f657600080fd5b806318160ddd1161028657806318160ddd146103a75780631ce03eed146103ca57806323b872dd146103ea578063285d70d4146103fd57806333bbbf061461041d578063372992e41461044257600080fd5b806301ffc9a7146102ce578063020451381461030357806306fdde0314610325578063081812fc14610347578063095ea7b31461037f5780631053a81514610392575b600080fd5b3480156102da57600080fd5b506102ee6102e9366004613098565b610958565b60405190151581526020015b60405180910390f35b34801561030f57600080fd5b5061032361031e3660046130d1565b6109aa565b005b34801561033157600080fd5b5061033a610a28565b6040516102fa9190613144565b34801561035357600080fd5b50610367610362366004613157565b610aba565b6040516001600160a01b0390911681526020016102fa565b61032361038d366004613170565b610afe565b34801561039e57600080fd5b50610323610b9e565b3480156103b357600080fd5b50600154600054035b6040519081526020016102fa565b3480156103d657600080fd5b506103bc6103e53660046131c5565b610bf0565b6103236103f8366004613208565b610d30565b34801561040957600080fd5b50610323610418366004613254565b610ec2565b34801561042957600080fd5b50600a54600160501b90046001600160a01b0316610367565b34801561044e57600080fd5b5061032361045d366004613157565b610f0b565b34801561046e57600080fd5b50610323610f6b565b610323610485366004613208565b611016565b34801561049657600080fd5b50600a546201000090046001600160401b03166040516001600160401b0390911681526020016102fa565b3480156104cd57600080fd5b50600c546103bc565b3480156104e257600080fd5b506103236104f13660046132b0565b611036565b34801561050257600080fd5b50610516610511366004613335565b6110a5565b6040516102fa91906133a6565b6103236105313660046133e8565b611170565b34801561054257600080fd5b50610367610551366004613157565b6111ee565b34801561056257600080fd5b506103bc61057136600461348c565b6111f9565b34801561058257600080fd5b506103bc6105913660046130d1565b6112c1565b3480156105a257600080fd5b506010546103bc565b3480156105b757600080fd5b5061032361130f565b3480156105cc57600080fd5b506103236105db3660046134d1565b611323565b3480156105ec57600080fd5b506106006105fb3660046130d1565b6115c3565b6040516102fa9190613549565b34801561061957600080fd5b506008546001600160a01b0316610367565b34801561063757600080fd5b50610323610646366004613581565b6116d2565b34801561065757600080fd5b50600b546001600160a01b0316610367565b34801561067557600080fd5b5061033a611ba7565b34801561068a57600080fd5b506103bc6106993660046130d1565b611bb6565b3480156106aa57600080fd5b506103236106b93660046130d1565b611be0565b3480156106ca57600080fd5b506106006106d93660046135f5565b611c36565b3480156106ea57600080fd5b506103236106f9366004613628565b611db1565b34801561070a57600080fd5b5061071e610719366004613157565b611e1d565b6040805184516001600160501b0316815260208086015163ffffffff90811691830191909152858301519282019290925260608086015162ffffff16908201526080808601516001600160401b039081169183019190915260a095860151169481019490945290911660c083015260e0820152610100016102fa565b3480156107a657600080fd5b506103236107b53660046132b0565b611f66565b3480156107c657600080fd5b506103236107d536600461365b565b611f7a565b3480156107e657600080fd5b506103236107f5366004613727565b611fd3565b34801561080657600080fd5b5061033a61201d565b61032361081d366004613795565b61202c565b34801561082e57600080fd5b5061084261083d366004613157565b612070565b6040516102fa91906137e4565b34801561085b57600080fd5b5061033a61086a366004613157565b6120e8565b34801561087b57600080fd5b5061032361088a36600461348c565b6121f2565b34801561089b57600080fd5b506102ee6108aa3660046137f2565b6001600160a01b03918216600090815260076020908152604080832093909416825291909152205460ff1690565b6103236108e636600461380e565b612253565b3480156108f757600080fd5b50600d546103bc565b34801561090c57600080fd5b5061032361091b3660046130d1565b612274565b34801561092c57600080fd5b50600a5460ff166102ee565b34801561094457600080fd5b50610323610953366004613157565b6122ed565b60006301ffc9a760e01b6001600160e01b03198316148061098957506380ac58cd60e01b6001600160e01b03198316145b806109a45750635b5e139f60e01b6001600160e01b03198316145b92915050565b6109b261234d565b600a80547fffff0000000000000000000000000000000000000000ffffffffffffffffffff16600160501b6001600160a01b038416908102919091179091556040519081527faea1573caf7b4fdd079b947d86c1be6c725642c47582f8f9bd2c7d2a30bf0bd9906020015b60405180910390a150565b606060028054610a37906138a1565b80601f0160208091040260200160405190810160405280929190818152602001828054610a63906138a1565b8015610ab05780601f10610a8557610100808354040283529160200191610ab0565b820191906000526020600020905b815481529060010190602001808311610a9357829003601f168201915b5050505050905090565b6000610ac5826123a7565b610ae2576040516333d1c03960e21b815260040160405180910390fd5b506000908152600660205260409020546001600160a01b031690565b6000610b09826111ee565b9050336001600160a01b03821614610b4257610b2581336108aa565b610b42576040516367d9dca160e11b815260040160405180910390fd5b60008281526006602052604080822080546001600160a01b0319166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b610ba661234d565b600a805461ff0019166101001790556040517fc6a6c2b165e62c9d37fc51a18ed76e5be22304bc1d337877c98f31c23e40b0f590610be690600e906138dc565b60405180910390a1565b600a54600090600160501b90046001600160a01b0316610c23576040516353bd4fb360e11b815260040160405180910390fd5b610d26308585600a8054906101000a90046001600160a01b031686610c454690565b610c4e8b611bb6565b604051606097881b6bffffffffffffffffffffffff19908116602083015296881b8716603482015260e09590951b6001600160e01b031916604886015292861b909416604c84015260c01b6001600160c01b031916938201939093526068810191909152608881019190915260a801604051602081830303815290604052805190602001206040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101829052600090605c01604051602081830303815290604052805190602001209050919050565b90505b9392505050565b6000610d3b826123ce565b9050836001600160a01b0316816001600160a01b031614610d6e5760405162a1148160e81b815260040160405180910390fd5b60008281526006602052604090208054338082146001600160a01b03881690911417610dbb57610d9e86336108aa565b610dbb57604051632ce44b5f60e11b815260040160405180910390fd5b6001600160a01b038516610de257604051633a954ecd60e21b815260040160405180910390fd5b8015610ded57600082555b6001600160a01b038681166000908152600560205260408082208054600019019055918716808252919020805460010190554260a01b17600160e11b17600085815260046020526040902055600160e11b8316610e785760018401600081815260046020526040902054610e76576000548114610e765760008181526004602052604090208490555b505b83856001600160a01b0316876001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45b505050505050565b610eca61234d565b600a805460ff19168215159081179091556040519081527fe717a2bfc51e250b028aaac5eb448e76f4df26b9609956782bff49097bb792cf90602001610a1d565b610f1361234d565b600c54811115610f3657604051630590c51360e01b815260040160405180910390fd5b600d8190556040518181527f5307de8ad7d34d5ddfd5171435c143bdc645493980f453eb5d7cdb3e494a1b3590602001610a1d565b610f7361234d565b6040514790600090339083908381818185875af1925050503d8060008114610fb7576040519150601f19603f3d011682016040523d82523d6000602084013e610fbc565b606091505b5050905080610fde57604051631d42c86760e21b815260040160405180910390fd5b6040518281527f5b6b431d4476a211bb7d41c20d1aab9ae2321deee0d20be3d9fc9b1093fa6e3d906020015b60405180910390a15050565b6110318383836040518060200160405280600081525061202c565b505050565b61103e61234d565b600a54610100900460ff1615611067576040516306ccad4160e41b815260040160405180910390fd5b611073600e8383612fe9565b507f23c8c9488efebfd474e85a7956de6f39b17c7ab88502d42a623db2d8e382bbaa828260405161100a929190613961565b6060816000816001600160401b038111156110c2576110c2613685565b60405190808252806020026020018201604052801561111457816020015b6040805160808101825260008082526020808301829052928201819052606082015282526000199092019101816110e05790505b50905060005b8281146111675761114286868381811061113657611136613990565b90506020020135612070565b82828151811061115457611154613990565b602090810291909101015260010161111a565b50949350505050565b61117861242f565b600b546001600160a01b03166111a157604051637e9f68eb60e11b815260040160405180910390fd5b600b546001600160a01b031633146111cc5760405163f46fd68360e01b815260040160405180910390fd5b6111db87878787878787612489565b6111e56001600955565b50505050505050565b60006109a4826123ce565b6000805b6010548110156112a7576010818154811061121a5761121a613990565b60009182526020909120600260039092020101546001600160401b03630100000090910481169084161080159061128a57506010818154811061125f5761125f613990565b60009182526020909120600260039092020101546001600160401b03600160581b9091048116908416105b156112955792915050565b8061129f816139bc565b9150506111fd565b5060405163e82a532960e01b815260040160405180910390fd5b60006001600160a01b0382166112ea576040516323d3ad8160e21b815260040160405180910390fd5b506001600160a01b03166000908152600560205260409020546001600160401b031690565b61131761234d565b61132160006128e3565b565b61132b61234d565b601054871061134d5760405163e82a532960e01b815260040160405180910390fd5b600187106113e557600a546201000090046001600160401b0316601061137460018a6139d7565b8154811061138457611384613990565b9060005260206000209060030201600201600b9054906101000a90046001600160401b03166113b391906139ee565b6001600160401b0316826001600160401b031610156113e557604051636bc1af9360e01b815260040160405180910390fd5b6113ef8282612935565b856010888154811061140357611403613990565b906000526020600020906003020160000160006101000a8154816001600160501b0302191690836001600160501b03160217905550846010888154811061144c5761144c613990565b9060005260206000209060030201600001600a6101000a81548163ffffffff021916908363ffffffff160217905550836010888154811061148f5761148f613990565b90600052602060002090600302016001018190555082601088815481106114b8576114b8613990565b906000526020600020906003020160020160006101000a81548162ffffff021916908362ffffff16021790555081601088815481106114f9576114f9613990565b906000526020600020906003020160020160036101000a8154816001600160401b0302191690836001600160401b03160217905550806010888154811061154257611542613990565b9060005260206000209060030201600201600b6101000a8154816001600160401b0302191690836001600160401b031602179055507fb3268648542a1bb1b2dd12e3b14aeb5a3ab22c592de96bdd3e842154a5b394fa878787878787876040516115b29796959493929190613a19565b60405180910390a150505050505050565b606060008060006115d3856112c1565b90506000816001600160401b038111156115ef576115ef613685565b604051908082528060200260200182016040528015611618578160200160208202803683370190505b50905061164560408051608081018252600080825260208201819052918101829052606081019190915290565b60005b8386146116c6576116588161296b565b9150816040015115611669576116be565b81516001600160a01b03161561167e57815194505b876001600160a01b0316856001600160a01b031614156116be57808387806001019850815181106116b1576116b1613990565b6020026020010181815250505b600101611648565b50909695505050505050565b6116da61234d565b60105460005b818110156117555760108054806116f9576116f9613a69565b60008281526020812060036000199093019283020180546001600160701b03191681556001810191909155600201805472ffffffffffffffffffffffffffffffffffffff1916905590558061174d816139bc565b9150506116e0565b50600a546201000090046001600160401b031660005b83811015611ba05760018110611815578185856117896001856139d7565b81811061179857611798613990565b905060c0020160a00160208101906117b0919061348c565b6117ba91906139ee565b6001600160401b03168585838181106117d5576117d5613990565b905060c0020160800160208101906117ed919061348c565b6001600160401b0316101561181557604051636bc1af9360e01b815260040160405180910390fd5b61187185858381811061182a5761182a613990565b905060c002016080016020810190611842919061348c565b86868481811061185457611854613990565b905060c0020160a001602081019061186c919061348c565b612935565b60106040518060c0016040528087878581811061189057611890613990565b6118a692602060c0909202019081019150613a7f565b6001600160501b031681526020018787858181106118c6576118c6613990565b905060c0020160200160208101906118de9190613a9a565b63ffffffff1681526020018787858181106118fb576118fb613990565b905060c0020160400135815260200187878581811061191c5761191c613990565b905060c0020160600160208101906119349190613ab5565b62ffffff16815260200187878581811061195057611950613990565b905060c002016080016020810190611968919061348c565b6001600160401b0316815260200187878581811061198857611988613990565b905060c0020160a00160208101906119a0919061348c565b6001600160401b039081169091528254600181810185556000948552602094859020845160039093020180549585015163ffffffff16600160501b026001600160701b03199096166001600160501b0390931692909217949094178155604083015193810193909355606082015160029093018054608084015160a0909401518316600160581b0267ffffffffffffffff60581b19949093166301000000026affffffffffffffffffffff1990911662ffffff9095169490941793909317919091161790557fb3268648542a1bb1b2dd12e3b14aeb5a3ab22c592de96bdd3e842154a5b394fa81868682818110611a9957611a99613990565b611aaf92602060c0909202019081019150613a7f565b878785818110611ac157611ac1613990565b905060c002016020016020810190611ad99190613a9a565b888886818110611aeb57611aeb613990565b905060c0020160400135898987818110611b0757611b07613990565b905060c002016060016020810190611b1f9190613ab5565b8a8a88818110611b3157611b31613990565b905060c002016080016020810190611b49919061348c565b8b8b89818110611b5b57611b5b613990565b905060c0020160a0016020810190611b73919061348c565b604051611b869796959493929190613a19565b60405180910390a180611b98816139bc565b91505061176b565b5050505050565b606060038054610a37906138a1565b6001600160a01b038116600090815260056020526040808220546001600160401b03911c166109a4565b611be861234d565b600b80546001600160a01b0319166001600160a01b0383169081179091556040519081527ff477d93c015f2a73c2ccc5ed37078d12123b80fc5d12e0014c60b913bc1a1ec490602001610a1d565b6060818310611c5857604051631960ccad60e11b815260040160405180910390fd5b600080611c6460005490565b905080841115611c72578093505b6000611c7d876112c1565b905084861015611c9c5785850381811015611c96578091505b50611ca0565b5060005b6000816001600160401b03811115611cba57611cba613685565b604051908082528060200260200182016040528015611ce3578160200160208202803683370190505b50905081611cf6579350610d2992505050565b6000611d0188612070565b905060008160400151611d12575080515b885b888114158015611d245750848714155b15611da057611d328161296b565b9250826040015115611d4357611d98565b82516001600160a01b031615611d5857825191505b8a6001600160a01b0316826001600160a01b03161415611d985780848880600101995081518110611d8b57611d8b613990565b6020026020010181815250505b600101611d14565b505050928352509095945050505050565b3360008181526007602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a081019190915260105460009081908410611e995760405162461bcd60e51b815260206004820152600c60248201526b496e76616c6964537461676560a01b60448201526064015b60405180910390fd5b60008481526011602090815260408083203384528252808320548784526012909252909120546010805463ffffffff9093169287908110611edc57611edc613990565b60009182526020918290206040805160c08101825260039390930290910180546001600160501b0381168452600160501b900463ffffffff169383019390935260018301549082015260029091015462ffffff81166060830152630100000081046001600160401b039081166080840152600160581b9091041660a0820152969195509350915050565b611f6e61234d565b611031600f8383612fe9565b611f8261234d565b8163ffffffff16600c5481611f9a6001546000540390565b611fa49190613ad0565b1115611fc35760405163800113cb60e01b815260040160405180910390fd5b611031828463ffffffff166129a7565b600a54611ffb90600160501b90046001600160a01b0316611ff5868686610bf0565b836129c1565b6120175760405162b7fad960e11b815260040160405180910390fd5b50505050565b6060600f8054610a37906138a1565b612037848484610d30565b6001600160a01b0383163b156120175761205384848484612b03565b612017576040516368d2bf6b60e11b815260040160405180910390fd5b60408051608080820183526000808352602080840182905283850182905260608085018390528551938401865282845290830182905293820181905292810183905290915060005483106120c45792915050565b6120cd8361296b565b90508060400151156120df5792915050565b610d2983612bfa565b60606120f3826123a7565b61211057604051630a14c4b560e41b815260040160405180910390fd5b6000600e805461211f906138a1565b80601f016020809104026020016040519081016040528092919081815260200182805461214b906138a1565b80156121985780601f1061216d57610100808354040283529160200191612198565b820191906000526020600020905b81548152906001019060200180831161217b57829003601f168201915b505050505090508051600014156121be5760405180602001604052806000815250610d29565b806121c884612c2f565b600f6040516020016121dc93929190613ae8565b6040516020818303038152906040529392505050565b6121fa61234d565b600a805469ffffffffffffffff00001916620100006001600160401b038416908102919091179091556040519081527f41b9126ccd8cb4505310c40a376055b5ef246bd4c9214de02af31ef4f26b1b5f90602001610a1d565b61225b61242f565b61226a86338787878787612489565b610eba6001600955565b61227c61234d565b6001600160a01b0381166122e15760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401611e90565b6122ea816128e3565b50565b6122f561234d565b600c548111156123185760405163430b83b160e11b815260040160405180910390fd5b600c8190556040518181527fc7bbc2b288fc13314546ea4aa51f6bcf71b7ba4740beeb3d32e9acef57b6668a90602001610a1d565b6008546001600160a01b031633146113215760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401611e90565b60008054821080156109a4575050600090815260046020526040902054600160e01b161590565b60008160005481101561241657600081815260046020526040902054600160e01b8116612414575b80610d295750600019016000818152600460205260409020546123f6565b505b604051636f96cda160e11b815260040160405180910390fd5b600260095414156124825760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401611e90565b6002600955565b600a5460ff166124ac57604051630952c8a960e11b815260040160405180910390fd5b8663ffffffff16600c54816124c46001546000540390565b6124ce9190613ad0565b11156124ed5760405163800113cb60e01b815260040160405180910390fd5b426125266040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a081019190915290565b600a54600160501b90046001600160a01b03161561258d57612580338b8888888080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611fd392505050565b61258986612c7d565b8591505b6000612598836111f9565b9050601081815481106125ad576125ad613990565b60009182526020918290206040805160c081018252600390930290910180546001600160501b03811680855263ffffffff600160501b9092048216958501959095526001820154928401929092526002015462ffffff811660608401526001600160401b036301000000820481166080850152600160581b9091041660a083015290935061263e91908d1690613b84565b6001600160501b031634101561266757604051630717c22560e51b815260040160405180910390fd5b606082015162ffffff16156126c157606082015160008281526012602052604090205462ffffff909116906126a39063ffffffff8e1690613ad0565b11156126c15760405162d0844960e21b815260040160405180910390fd5b600d541561272857600d548b63ffffffff166126ff8c6001600160a01b03166000908152600560205260409081902054901c6001600160401b031690565b6127099190613ad0565b11156127285760405163751304ed60e11b815260040160405180910390fd5b602082015163ffffffff161561279a5760208083015160008381526011835260408082206001600160a01b038f168352909352919091205463ffffffff91821691612775918e9116613bb3565b63ffffffff16111561279a5760405163b4f3729b60e01b815260040160405180910390fd5b6040820151156128415781604001516128238a8a808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152505060405161280892508f915060200160609190911b6bffffffffffffffffffffffff1916815260140190565b60405160208183030381529060405280519060200120612cc2565b14612841576040516309bde33960e01b815260040160405180910390fd5b60008181526011602090815260408083206001600160a01b038e168452909152812080548d929061287990849063ffffffff16613bb3565b92506101000a81548163ffffffff021916908363ffffffff1602179055508a63ffffffff166012600083815260200190815260200160002060008282546128c09190613ad0565b909155506128d690508a63ffffffff8d166129a7565b5050505050505050505050565b600880546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b806001600160401b0316826001600160401b03161061296757604051631750215560e11b815260040160405180910390fd5b5050565b6040805160808101825260008082526020820181905291810182905260608101919091526000828152600460205260409020546109a490612d0f565b612967828260405180602001604052806000815250612d56565b60008060006129d08585612dbc565b909250905060008160048111156129e9576129e9613bd2565b148015612a075750856001600160a01b0316826001600160a01b0316145b15612a1757600192505050610d29565b600080876001600160a01b0316631626ba7e60e01b8888604051602401612a3f929190613be8565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909416939093179092529051612a7d9190613c01565b600060405180830381855afa9150503d8060008114612ab8576040519150601f19603f3d011682016040523d82523d6000602084013e612abd565b606091505b5091509150818015612ad0575080516020145b8015612af757508051630b135d3f60e11b90612af59083016020908101908401613c1d565b145b98975050505050505050565b604051630a85bd0160e11b81526000906001600160a01b0385169063150b7a0290612b38903390899088908890600401613c36565b602060405180830381600087803b158015612b5257600080fd5b505af1925050508015612b82575060408051601f3d908101601f19168201909252612b7f91810190613c73565b60015b612bdd573d808015612bb0576040519150601f19603f3d011682016040523d82523d6000602084013e612bb5565b606091505b508051612bd5576040516368d2bf6b60e11b815260040160405180910390fd5b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050949350505050565b6040805160808101825260008082526020820181905291810182905260608101919091526109a4612c2a836123ce565b612d0f565b606060a06040510180604052602081039150506000815280825b600183039250600a81066030018353600a900480612c6657612c6b565b612c49565b50819003601f19909101908152919050565b600a54612c99906201000090046001600160401b0316426139d7565b816001600160401b031610156122ea576040516313634e8d60e11b815260040160405180910390fd5b600081815b8451811015612d0757612cf382868381518110612ce657612ce6613990565b6020026020010151612e02565b915080612cff816139bc565b915050612cc7565b509392505050565b604080516080810182526001600160a01b038316815260a083901c6001600160401b03166020820152600160e01b831615159181019190915260e89190911c606082015290565b612d608383612e2e565b6001600160a01b0383163b15611031576000548281035b612d8a6000868380600101945086612b03565b612da7576040516368d2bf6b60e11b815260040160405180910390fd5b818110612d77578160005414611ba057600080fd5b600080825160411415612df35760208301516040840151606085015160001a612de787828585612f25565b94509450505050612dfb565b506000905060025b9250929050565b6000818310612e1e576000828152602084905260409020610d29565b5060009182526020526040902090565b60005481612e4f5760405163b562e8dd60e01b815260040160405180910390fd5b6001600160a01b03831660008181526005602090815260408083208054680100000000000000018802019055848352600490915281206001851460e11b4260a01b178317905582840190839083907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8180a4600183015b818114612efe57808360007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef600080a4600101612ec6565b5081612f1c57604051622e076360e81b815260040160405180910390fd5b60005550505050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115612f5c5750600090506003612fe0565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015612fb0573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116612fd957600060019250925050612fe0565b9150600090505b94509492505050565b828054612ff5906138a1565b90600052602060002090601f016020900481019282613017576000855561305d565b82601f106130305782800160ff1982351617855561305d565b8280016001018555821561305d579182015b8281111561305d578235825591602001919060010190613042565b5061306992915061306d565b5090565b5b80821115613069576000815560010161306e565b6001600160e01b0319811681146122ea57600080fd5b6000602082840312156130aa57600080fd5b8135610d2981613082565b80356001600160a01b03811681146130cc57600080fd5b919050565b6000602082840312156130e357600080fd5b610d29826130b5565b60005b838110156131075781810151838201526020016130ef565b838111156120175750506000910152565b600081518084526131308160208601602086016130ec565b601f01601f19169290920160200192915050565b602081526000610d296020830184613118565b60006020828403121561316957600080fd5b5035919050565b6000806040838503121561318357600080fd5b61318c836130b5565b946020939093013593505050565b803563ffffffff811681146130cc57600080fd5b80356001600160401b03811681146130cc57600080fd5b6000806000606084860312156131da57600080fd5b6131e3846130b5565b92506131f16020850161319a565b91506131ff604085016131ae565b90509250925092565b60008060006060848603121561321d57600080fd5b613226846130b5565b9250613234602085016130b5565b9150604084013590509250925092565b803580151581146130cc57600080fd5b60006020828403121561326657600080fd5b610d2982613244565b60008083601f84011261328157600080fd5b5081356001600160401b0381111561329857600080fd5b602083019150836020828501011115612dfb57600080fd5b600080602083850312156132c357600080fd5b82356001600160401b038111156132d957600080fd5b6132e58582860161326f565b90969095509350505050565b60008083601f84011261330357600080fd5b5081356001600160401b0381111561331a57600080fd5b6020830191508360208260051b8501011115612dfb57600080fd5b6000806020838503121561334857600080fd5b82356001600160401b0381111561335e57600080fd5b6132e5858286016132f1565b80516001600160a01b031682526020808201516001600160401b03169083015260408082015115159083015260609081015162ffffff16910152565b6020808252825182820181905260009190848201906040850190845b818110156116c6576133d583855161336a565b92840192608092909201916001016133c2565b600080600080600080600060a0888a03121561340357600080fd5b61340c8861319a565b965061341a602089016130b5565b955060408801356001600160401b038082111561343657600080fd5b6134428b838c016132f1565b909750955085915061345660608b016131ae565b945060808a013591508082111561346c57600080fd5b506134798a828b0161326f565b989b979a50959850939692959293505050565b60006020828403121561349e57600080fd5b610d29826131ae565b80356001600160501b03811681146130cc57600080fd5b803562ffffff811681146130cc57600080fd5b600080600080600080600060e0888a0312156134ec57600080fd5b873596506134fc602089016134a7565b955061350a6040890161319a565b94506060880135935061351f608089016134be565b925061352d60a089016131ae565b915061353b60c089016131ae565b905092959891949750929550565b6020808252825182820181905260009190848201906040850190845b818110156116c657835183529284019291840191600101613565565b6000806020838503121561359457600080fd5b82356001600160401b03808211156135ab57600080fd5b818501915085601f8301126135bf57600080fd5b8135818111156135ce57600080fd5b86602060c0830285010111156135e357600080fd5b60209290920196919550909350505050565b60008060006060848603121561360a57600080fd5b613613846130b5565b95602085013595506040909401359392505050565b6000806040838503121561363b57600080fd5b613644836130b5565b915061365260208401613244565b90509250929050565b6000806040838503121561366e57600080fd5b6136778361319a565b9150613652602084016130b5565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126136ac57600080fd5b81356001600160401b03808211156136c6576136c6613685565b604051601f8301601f19908116603f011681019082821181831017156136ee576136ee613685565b8160405283815286602085880101111561370757600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000806000806080858703121561373d57600080fd5b613746856130b5565b93506137546020860161319a565b9250613762604086016131ae565b915060608501356001600160401b0381111561377d57600080fd5b6137898782880161369b565b91505092959194509250565b600080600080608085870312156137ab57600080fd5b6137b4856130b5565b93506137c2602086016130b5565b92506040850135915060608501356001600160401b0381111561377d57600080fd5b608081016109a4828461336a565b6000806040838503121561380557600080fd5b613677836130b5565b6000806000806000806080878903121561382757600080fd5b6138308761319a565b955060208701356001600160401b038082111561384c57600080fd5b6138588a838b016132f1565b909750955085915061386c60408a016131ae565b9450606089013591508082111561388257600080fd5b5061388f89828a0161326f565b979a9699509497509295939492505050565b600181811c908216806138b557607f821691505b602082108114156138d657634e487b7160e01b600052602260045260246000fd5b50919050565b60006020808352600084546138f0816138a1565b80848701526040600180841660008114613911576001811461392557613953565b60ff19851689840152606089019550613953565b896000528660002060005b8581101561394b5781548b8201860152908301908801613930565b8a0184019650505b509398975050505050505050565b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006000198214156139d0576139d06139a6565b5060010190565b6000828210156139e9576139e96139a6565b500390565b60006001600160401b03808316818516808303821115613a1057613a106139a6565b01949350505050565b9687526001600160501b0395909516602087015263ffffffff939093166040860152606085019190915262ffffff1660808401526001600160401b0390811660a08401521660c082015260e00190565b634e487b7160e01b600052603160045260246000fd5b600060208284031215613a9157600080fd5b610d29826134a7565b600060208284031215613aac57600080fd5b610d298261319a565b600060208284031215613ac757600080fd5b610d29826134be565b60008219821115613ae357613ae36139a6565b500190565b600084516020613afb8285838a016130ec565b855191840191613b0e8184848a016130ec565b8554920191600090613b1f816138a1565b60018281168015613b375760018114613b4857613b74565b60ff19841687528287019450613b74565b896000528560002060005b84811015613b6c57815489820152908301908701613b53565b505082870194505b50929a9950505050505050505050565b60006001600160501b0380831681851681830481118215151615613baa57613baa6139a6565b02949350505050565b600063ffffffff808316818516808303821115613a1057613a106139a6565b634e487b7160e01b600052602160045260246000fd5b828152604060208201526000610d266040830184613118565b60008251613c138184602087016130ec565b9190910192915050565b600060208284031215613c2f57600080fd5b5051919050565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090613c6990830184613118565b9695505050505050565b600060208284031215613c8557600080fd5b8151610d298161308256fea2646970667358221220043e87876511be4b27809096e16ebb29ac0f0779a4daf1d4165c02b7d9bdc23364736f6c63430008090033",
  "devdoc": {
    "details": "ERC721A subclass with MagicEden launchpad features including  - multiple minting stages with time-based auto stage switch  - global and stage wallet-level minting limit  - whitelist using merkle tree  - crossmint support  - anti-botting",
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
      },
      "assertValidCosign(address,uint32,uint64,bytes)": {
        "details": "Validates the the given signature."
      },
      "balanceOf(address)": {
        "details": "Returns the number of tokens in `owner`'s account."
      },
      "crossmint(uint32,address,bytes32[],uint64,bytes)": {
        "details": "Mints token(s) through crossmint. This function is supposed to be called by crossmint. qty - number of tokens to mint to - the address to mint tokens to proof - the merkle proof generated on client side. This applies if using whitelist. timestamp - the current timestamp signature - the signature from cosigner if using cosigner."
      },
      "explicitOwnershipOf(uint256)": {
        "details": "Returns the `TokenOwnership` struct at `tokenId` without reverting. If the `tokenId` is out of bounds: - `addr = address(0)` - `startTimestamp = 0` - `burned = false` - `extraData = 0` If the `tokenId` is burned: - `addr = <Address of owner before token was burned>` - `startTimestamp = <Timestamp when token was burned>` - `burned = true` - `extraData = <Extra data when token was burned>` Otherwise: - `addr = <Address of owner>` - `startTimestamp = <Timestamp of start of ownership>` - `burned = false` - `extraData = <Extra data at start of ownership>`"
      },
      "explicitOwnershipsOf(uint256[])": {
        "details": "Returns an array of `TokenOwnership` structs at `tokenIds` in order. See {ERC721AQueryable-explicitOwnershipOf}"
      },
      "getActiveStageFromTimestamp(uint64)": {
        "details": "Returns the current active stage based on timestamp."
      },
      "getApproved(uint256)": {
        "details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
      },
      "getCosignDigest(address,uint32,uint64)": {
        "details": "Returns data hash for the given minter, qty and timestamp."
      },
      "getCosignNonce(address)": {
        "details": "Returns cosign nonce."
      },
      "getCosigner()": {
        "details": "Returns cosigner address."
      },
      "getCrossmintAddress()": {
        "details": "Returns crossmint address."
      },
      "getGlobalWalletLimit()": {
        "details": "Returns global wallet limit. This is the max number of tokens can be minted by one wallet."
      },
      "getMaxMintableSupply()": {
        "details": "Returns maximum mintable supply."
      },
      "getMintable()": {
        "details": "Gets whether mintable."
      },
      "getNumberStages()": {
        "details": "Returns number of stages."
      },
      "getStageInfo(uint256)": {
        "details": "Returns info for one stage specified by index (starting from 0)."
      },
      "getTimestampExpirySeconds()": {
        "details": "Returns expiry in seconds."
      },
      "getTokenURISuffix()": {
        "details": "Returns token URI suffix."
      },
      "isApprovedForAll(address,address)": {
        "details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}."
      },
      "mint(uint32,bytes32[],uint64,bytes)": {
        "details": "Mints token(s). qty - number of tokens to mint proof - the merkle proof generated on client side. This applies if using whitelist. timestamp - the current timestamp signature - the signature from cosigner if using cosigner."
      },
      "name()": {
        "details": "Returns the token collection name."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerMint(uint32,address)": {
        "details": "Mints token(s) by owner. NOTE: This function bypasses validations thus only available for owner. This is typically used for owner to  pre-mint or mint the remaining of the supply."
      },
      "ownerOf(uint256)": {
        "details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "Equivalent to `safeTransferFrom(from, to, tokenId, '')`."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
      },
      "setApprovalForAll(address,bool)": {
        "details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."
      },
      "setBaseURI(string)": {
        "details": "Sets token base URI."
      },
      "setBaseURIPermanent()": {
        "details": "Sets token base URI permanent. Cannot revert."
      },
      "setCosigner(address)": {
        "details": "Sets cosigner."
      },
      "setCrossmintAddress(address)": {
        "details": "Sets crossmint address if using crossmint. This allows the specified address to call `crossmint`."
      },
      "setGlobalWalletLimit(uint256)": {
        "details": "Sets global wallet limit."
      },
      "setMaxMintableSupply(uint256)": {
        "details": "Sets maximum mintable supply. New supply cannot be larger than the old."
      },
      "setMintable(bool)": {
        "details": "Sets mintable."
      },
      "setStages((uint80,uint32,bytes32,uint24,uint64,uint64)[])": {
        "details": "Sets stages in the format of an array of `MintStageInfo`. Following is an example of launch with two stages. The first stage is exclusive for whitelisted wallets specified by merkle root.    [{      price: 10000000000000000000,      maxStageSupply: 2000,      walletLimit: 1,      merkleRoot: 0x559fadeb887449800b7b320bf1e92d309f329b9641ac238bebdb74e15c0a5218,      startTimeUnixSeconds: 1667768000,      endTimeUnixSeconds: 1667771600,     },     {      price: 20000000000000000000,      maxStageSupply: 3000,      walletLimit: 2,      merkleRoot: 0,      startTimeUnixSeconds: 1667771600,      endTimeUnixSeconds: 1667775200,     } ]"
      },
      "setTimestampExpirySeconds(uint64)": {
        "details": "Sets expiry in seconds. This timestamp specifies how long a signature from cosigner is valid for."
      },
      "setTokenURISuffix(string)": {
        "details": "Sets token URI suffix. e.g. \".json\"."
      },
      "supportsInterface(bytes4)": {
        "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified) to learn more about how these ids are created. This function call must use less than 30000 gas."
      },
      "symbol()": {
        "details": "Returns the token collection symbol."
      },
      "tokenURI(uint256)": {
        "details": "Returns token URI for a given token id."
      },
      "tokensOfOwner(address)": {
        "details": "Returns an array of token IDs owned by `owner`. This function scans the ownership mapping and is O(`totalSupply`) in complexity. It is meant to be called off-chain. See {ERC721AQueryable-tokensOfOwnerIn} for splitting the scan into multiple smaller scans if the collection is large enough to cause an out-of-gas error (10K collections should be fine)."
      },
      "tokensOfOwnerIn(address,uint256,uint256)": {
        "details": "Returns an array of token IDs owned by `owner`, in the range [`start`, `stop`) (i.e. `start <= tokenId < stop`). This function allows for tokens to be queried if the collection grows too big for a single call of {ERC721AQueryable-tokensOfOwner}. Requirements: - `start < stop`"
      },
      "totalMintedByAddress(address)": {
        "details": "Returns number of minted token for a given address."
      },
      "totalSupply()": {
        "details": "Returns the total number of tokens in existence. Burned tokens will reduce the count. To get the total number of tokens minted, please see {_totalMinted}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "Transfers `tokenId` from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateStage(uint256,uint80,uint32,bytes32,uint24,uint64,uint64)": {
        "details": "Updates info for one stage specified by index (starting from 0)."
      },
      "withdraw()": {
        "details": "Withdraws funds by owner."
      }
    },
    "title": "ERC721M",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "ApprovalCallerNotOwnerNorApproved()": [
        {
          "notice": "The caller must own the token or be an approved operator."
        }
      ],
      "ApprovalQueryForNonexistentToken()": [
        {
          "notice": "The token does not exist."
        }
      ],
      "BalanceQueryForZeroAddress()": [
        {
          "notice": "Cannot query the balance for the zero address."
        }
      ],
      "InvalidQueryRange()": [
        {
          "notice": "Invalid query range (`start` >= `stop`)."
        }
      ],
      "MintERC2309QuantityExceedsLimit()": [
        {
          "notice": "The `quantity` minted with ERC2309 exceeds the safety limit."
        }
      ],
      "MintToZeroAddress()": [
        {
          "notice": "Cannot mint to the zero address."
        }
      ],
      "MintZeroQuantity()": [
        {
          "notice": "The quantity of tokens minted must be more than zero."
        }
      ],
      "OwnerQueryForNonexistentToken()": [
        {
          "notice": "The token does not exist."
        }
      ],
      "OwnershipNotInitializedForExtraData()": [
        {
          "notice": "The `extraData` cannot be set on an unintialized ownership slot."
        }
      ],
      "TransferCallerNotOwnerNorApproved()": [
        {
          "notice": "The caller must own the token or be an approved operator."
        }
      ],
      "TransferFromIncorrectOwner()": [
        {
          "notice": "The token must be owned by `from`."
        }
      ],
      "TransferToNonERC721ReceiverImplementer()": [
        {
          "notice": "Cannot safely transfer to a contract that does not implement the ERC721Receiver interface."
        }
      ],
      "TransferToZeroAddress()": [
        {
          "notice": "Cannot transfer to the zero address."
        }
      ],
      "URIQueryForNonexistentToken()": [
        {
          "notice": "The token does not exist."
        }
      ]
    },
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6033,
        "contract": "contracts/Corpos.sol:Corpos",
        "label": "_currentIndex",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 6035,
        "contract": "contracts/Corpos.sol:Corpos",
        "label": "_burnCounter",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 6037,
        "contract": "contracts/Corpos.sol:Corpos",
        "label": "_name",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 6039,
        "contract": "contracts/Corpos.sol:Corpos",
        "label": "_symbol",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 6043,
        "contract": "contracts/Corpos.sol:Corpos",
        "label": "_packedOwnerships",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 6047,
        "contract": "contracts/Corpos.sol:Corpos",
        "label": "_packedAddressData",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 6052,
        "contract": "contracts/Corpos.sol:Corpos",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_struct(TokenApprovalRef)5965_storage)"
      },
      {
        "astId": 6058,
        "contract": "contracts/Corpos.sol:Corpos",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 396,
        "contract": "contracts/Corpos.sol:Corpos",
        "label": "_owner",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 526,
        "contract": "contracts/Corpos.sol:Corpos",
        "label": "_status",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 4354,
        "contract": "contracts/Corpos.sol:Corpos",
        "label": "_mintable",
        "offset": 0,
        "slot": "10",
        "type": "t_bool"
      },
      {
        "astId": 4356,
        "contract": "contracts/Corpos.sol:Corpos",
        "label": "_baseURIPermanent",
        "offset": 1,
        "slot": "10",
        "type": "t_bool"
      },
      {
        "astId": 4358,
        "contract": "contracts/Corpos.sol:Corpos",
        "label": "_timestampExpirySeconds",
        "offset": 2,
        "slot": "10",
        "type": "t_uint64"
      },
      {
        "astId": 4360,
        "contract": "contracts/Corpos.sol:Corpos",
        "label": "_cosigner",
        "offset": 10,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 4362,
        "contract": "contracts/Corpos.sol:Corpos",
        "label": "_crossmintAddress",
        "offset": 0,
        "slot": "11",
        "type": "t_address"
      },
      {
        "astId": 4364,
        "contract": "contracts/Corpos.sol:Corpos",
        "label": "_maxMintableSupply",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 4366,
        "contract": "contracts/Corpos.sol:Corpos",
        "label": "_globalWalletLimit",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 4368,
        "contract": "contracts/Corpos.sol:Corpos",
        "label": "_currentBaseURI",
        "offset": 0,
        "slot": "14",
        "type": "t_string_storage"
      },
      {
        "astId": 4370,
        "contract": "contracts/Corpos.sol:Corpos",
        "label": "_tokenURISuffix",
        "offset": 0,
        "slot": "15",
        "type": "t_string_storage"
      },
      {
        "astId": 4374,
        "contract": "contracts/Corpos.sol:Corpos",
        "label": "_mintStages",
        "offset": 0,
        "slot": "16",
        "type": "t_array(t_struct(MintStageInfo)5630_storage)dyn_storage"
      },
      {
        "astId": 4380,
        "contract": "contracts/Corpos.sol:Corpos",
        "label": "_stageMintedCountsPerWallet",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint32))"
      },
      {
        "astId": 4384,
        "contract": "contracts/Corpos.sol:Corpos",
        "label": "_stageMintedCounts",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_uint256,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(MintStageInfo)5630_storage)dyn_storage": {
        "base": "t_struct(MintStageInfo)5630_storage",
        "encoding": "dynamic_array",
        "label": "struct IERC721M.MintStageInfo[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_address,t_uint32)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint32)",
        "numberOfBytes": "32",
        "value": "t_uint32"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint32))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint32))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint32)"
      },
      "t_mapping(t_uint256,t_struct(TokenApprovalRef)5965_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ERC721A.TokenApprovalRef)",
        "numberOfBytes": "32",
        "value": "t_struct(TokenApprovalRef)5965_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(MintStageInfo)5630_storage": {
        "encoding": "inplace",
        "label": "struct IERC721M.MintStageInfo",
        "members": [
          {
            "astId": 5619,
            "contract": "contracts/Corpos.sol:Corpos",
            "label": "price",
            "offset": 0,
            "slot": "0",
            "type": "t_uint80"
          },
          {
            "astId": 5621,
            "contract": "contracts/Corpos.sol:Corpos",
            "label": "walletLimit",
            "offset": 10,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 5623,
            "contract": "contracts/Corpos.sol:Corpos",
            "label": "merkleRoot",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 5625,
            "contract": "contracts/Corpos.sol:Corpos",
            "label": "maxStageSupply",
            "offset": 0,
            "slot": "2",
            "type": "t_uint24"
          },
          {
            "astId": 5627,
            "contract": "contracts/Corpos.sol:Corpos",
            "label": "startTimeUnixSeconds",
            "offset": 3,
            "slot": "2",
            "type": "t_uint64"
          },
          {
            "astId": 5629,
            "contract": "contracts/Corpos.sol:Corpos",
            "label": "endTimeUnixSeconds",
            "offset": 11,
            "slot": "2",
            "type": "t_uint64"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(TokenApprovalRef)5965_storage": {
        "encoding": "inplace",
        "label": "struct ERC721A.TokenApprovalRef",
        "members": [
          {
            "astId": 5964,
            "contract": "contracts/Corpos.sol:Corpos",
            "label": "value",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint24": {
        "encoding": "inplace",
        "label": "uint24",
        "numberOfBytes": "3"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint80": {
        "encoding": "inplace",
        "label": "uint80",
        "numberOfBytes": "10"
      }
    }
  }
}