{
  "address": "0x5Fa5b1501c859560d4A591dd9C0714F0b7619057",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_blastToken",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AmountInvalid",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BeneficiayrOrOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DurationInvalid",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientTokens",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotEnoughTokens",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotRevocable",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ScheduleRevoked",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StartTimeInvalid",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAddress",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "scheduleId",
          "type": "bytes32"
        }
      ],
      "name": "CreatedVestingSchedule",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "vestingScheduleId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "releaseTimestamp",
          "type": "uint256"
        }
      ],
      "name": "Released",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "vestingScheduleId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "revokeTimestamp",
          "type": "uint256"
        }
      ],
      "name": "Revoked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "blastToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "holder",
          "type": "address"
        }
      ],
      "name": "computeNextVestingScheduleIdForHolder",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "vestingScheduleId",
          "type": "bytes32"
        }
      ],
      "name": "computeReleasableAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "holder",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "computeVestingScheduleIdForAddressAndIndex",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_beneficiary",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_cliffDuration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_duration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_immediateReleaseAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amountTotal",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_revocable",
          "type": "bool"
        }
      ],
      "name": "createVestingSchedule",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "vestingScheduleId",
          "type": "bytes32"
        }
      ],
      "name": "getVestingSchedule",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "beneficiary",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "start",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "cliffStart",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "duration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "immediateVestedAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountTotal",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "released",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "revocable",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "revoked",
              "type": "bool"
            }
          ],
          "internalType": "struct TokenVesting.VestingSchedule",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "holder",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getVestingScheduleByAddressAndIndex",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "beneficiary",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "start",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "cliffStart",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "duration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "immediateVestedAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountTotal",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "released",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "revocable",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "revoked",
              "type": "bool"
            }
          ],
          "internalType": "struct TokenVesting.VestingSchedule",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getWithdrawableAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "vestingScheduleId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "release",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "vestingScheduleId",
          "type": "bytes32"
        }
      ],
      "name": "revoke",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xf54a8506c4e8843fb4ed7f279c1d7f148511ed923ce4952d420945d776a6af00",
  "receipt": {
    "to": null,
    "from": "0x7Ac410F4E36873022b57821D7a8EB3D7513C045a",
    "contractAddress": "0x5Fa5b1501c859560d4A591dd9C0714F0b7619057",
    "transactionIndex": 46,
    "gasUsed": "1159616",
    "logsBloom": "0x
    "blockHash": "0x128d37751beab365d6e354bfdd698771dd169f4f0e4d1f2dd476ea1c0009d613",
    "transactionHash": "0xf54a8506c4e8843fb4ed7f279c1d7f148511ed923ce4952d420945d776a6af00",
    "logs": [
      {
        "transactionIndex": 46,
        "blockNumber": 28570205,
        "transactionHash": "0xf54a8506c4e8843fb4ed7f279c1d7f148511ed923ce4952d420945d776a6af00",
        "address": "0x5Fa5b1501c859560d4A591dd9C0714F0b7619057",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000007ac410f4e36873022b57821d7a8eb3d7513c045a"
        ],
        "data": "0x",
        "logIndex": 247,
        "blockHash": "0x128d37751beab365d6e354bfdd698771dd169f4f0e4d1f2dd476ea1c0009d613"
      },
      {
        "transactionIndex": 46,
        "blockNumber": 28570205,
        "transactionHash": "0xf54a8506c4e8843fb4ed7f279c1d7f148511ed923ce4952d420945d776a6af00",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000007ac410f4e36873022b57821d7a8eb3d7513c045a",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000084240458299400000000000000000000000000000000000000000000000000e35b3bb70e320240000000000000000000000000000000000000000000026464089a9e918cf82fb0000000000000000000000000000000000000000000000000e2d717b2b6086e40000000000000000000000000000000000000000000026464091ec295e521c3b",
        "logIndex": 248,
        "blockHash": "0x128d37751beab365d6e354bfdd698771dd169f4f0e4d1f2dd476ea1c0009d613"
      }
    ],
    "blockNumber": 28570205,
    "cumulativeGasUsed": "9616066",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xbb151104D1d1DD68fa76602dBc215e97486d6a3c"
  ],
  "numDeployments": 1,
  "solcInputHash": "b7caf7116d2ec06d392c187715787bdb",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_blastToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AmountInvalid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BeneficiayrOrOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DurationInvalid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientTokens\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughTokens\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotRevocable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ScheduleRevoked\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StartTimeInvalid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"scheduleId\",\"type\":\"bytes32\"}],\"name\":\"CreatedVestingSchedule\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"vestingScheduleId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"releaseTimestamp\",\"type\":\"uint256\"}],\"name\":\"Released\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"vestingScheduleId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"revokeTimestamp\",\"type\":\"uint256\"}],\"name\":\"Revoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"blastToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"computeNextVestingScheduleIdForHolder\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"vestingScheduleId\",\"type\":\"bytes32\"}],\"name\":\"computeReleasableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"computeVestingScheduleIdForAddressAndIndex\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_cliffDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_immediateReleaseAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountTotal\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_revocable\",\"type\":\"bool\"}],\"name\":\"createVestingSchedule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"vestingScheduleId\",\"type\":\"bytes32\"}],\"name\":\"getVestingSchedule\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cliffStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"immediateVestedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"released\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"revocable\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"revoked\",\"type\":\"bool\"}],\"internalType\":\"struct TokenVesting.VestingSchedule\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getVestingScheduleByAddressAndIndex\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cliffStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"immediateVestedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"released\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"revocable\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"revoked\",\"type\":\"bool\"}],\"internalType\":\"struct TokenVesting.VestingSchedule\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWithdrawableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"vestingScheduleId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"release\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"vestingScheduleId\",\"type\":\"bytes32\"}],\"name\":\"revoke\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"computeNextVestingScheduleIdForHolder(address)\":{\"details\":\"Computes the next vesting schedule identifier for a given holder address.\"},\"computeReleasableAmount(bytes32)\":{\"returns\":{\"_0\":\"the vested amount\"}},\"computeVestingScheduleIdForAddressAndIndex(address,uint256)\":{\"details\":\"Computes the vesting schedule identifier for an address and an index.\"},\"getVestingSchedule(bytes32)\":{\"returns\":{\"_0\":\"the vesting schedule structure information\"}},\"getVestingScheduleByAddressAndIndex(address,uint256)\":{\"returns\":{\"_0\":\"the vesting schedule structure information\"}},\"getWithdrawableAmount()\":{\"details\":\"Returns the amount of tokens that can be withdrawn by the owner.\",\"returns\":{\"_0\":\"the amount of tokens\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"revoke(bytes32)\":{\"params\":{\"vestingScheduleId\":\"the vesting schedule identifier\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"errors\":{\"AmountInvalid()\":[{\"notice\":\"amount must be > 0\"}],\"BeneficiayrOrOwner()\":[{\"notice\":\"only beneficiary and owner can release vested tokens\"}],\"DurationInvalid()\":[{\"notice\":\"duration must be > 0\"}],\"InsufficientTokens()\":[{\"notice\":\"cannot create vesting schedule because not sufficient tokens\"}],\"NotEnoughTokens()\":[{\"notice\":\"cannot release tokens, not enough vested tokens\"}],\"NotRevocable()\":[{\"notice\":\"Vesting is not revocable\"}],\"ScheduleRevoked()\":[{\"notice\":\"Reverts if the vesting schedule has been revoked\"}],\"StartTimeInvalid()\":[{\"notice\":\"When create vesting schedule, in case of start time should be future\"}],\"ZeroAddress()\":[{\"notice\":\"In case the address is zero\"}]},\"kind\":\"user\",\"methods\":{\"blastToken()\":{\"notice\":\"Blast TOKEN\"},\"computeReleasableAmount(bytes32)\":{\"notice\":\"Computes the vested amount of tokens for the given vesting schedule identifier.\"},\"createVestingSchedule(address,uint256,uint256,uint256,uint256,uint256,bool)\":{\"notice\":\"Creates a new vesting schedule for a beneficiary\"},\"getVestingSchedule(bytes32)\":{\"notice\":\"Returns the vesting schedule information for a given identifier.\"},\"getVestingScheduleByAddressAndIndex(address,uint256)\":{\"notice\":\"Returns the vesting schedule information for a given holder and index.\"},\"release(bytes32,uint256)\":{\"notice\":\"Release vested amount of tokens.\"},\"revoke(bytes32)\":{\"notice\":\"Revokes the vesting schedule for given identifier.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Vesting/TokenVesting.sol\":\"TokenVesting\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/Vesting/TokenVesting.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\n/// cannot create vesting schedule because not sufficient tokens\\nerror InsufficientTokens();\\n/// duration must be > 0\\nerror DurationInvalid();\\n/// amount must be > 0\\nerror AmountInvalid();\\n/// only beneficiary and owner can release vested tokens\\nerror BeneficiayrOrOwner();\\n/// cannot release tokens, not enough vested tokens\\nerror NotEnoughTokens();\\n/// Reverts if the vesting schedule has been revoked\\nerror ScheduleRevoked();\\n/// Vesting is not revocable\\nerror NotRevocable();\\n/// In case the address is zero\\nerror ZeroAddress();\\n/// When create vesting schedule, in case of start time should be future\\nerror StartTimeInvalid();\\n\\ncontract TokenVesting is Ownable, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n\\n    event CreatedVestingSchedule(address user, bytes32 scheduleId);\\n\\n    /// <=============== STATE VARIABLES ===============>\\n\\n    // uint public constant DECIMAL_FACTOR = 10 ** 6;\\n\\n    /// Blast TOKEN\\n    IERC20 public immutable blastToken;\\n\\n    struct VestingSchedule {\\n        // beneficiary of tokens after they are released\\n        address beneficiary;\\n        // start time of the vesting period\\n        uint256 start;\\n        // cliffStart time in seconds\\n        uint256 cliffStart;\\n        // duration of the vesting period in seconds\\n        uint256 duration;\\n        // the amount that is immediately vested at grant\\n        uint256 immediateVestedAmount;\\n        // total amount of tokens to be released at the end of the vesting EXCLUDING immediateVestedAmount\\n        uint256 amountTotal;\\n        // amount of tokens released\\n        uint256 released;\\n        // whether or not the vesting is revocable\\n        bool revocable;\\n        // whether or not the vesting has been revoked\\n        bool revoked;\\n    }\\n\\n    bytes32[] private vestingSchedulesIds;\\n    mapping(bytes32 => VestingSchedule) private vestingSchedules;\\n    uint256 private vestingSchedulesTotalAmount;\\n    mapping(address => uint256) private holdersVestingCount;\\n\\n    event Released(\\n        address beneficiary,\\n        bytes32 vestingScheduleId,\\n        uint256 amount,\\n        uint256 releaseTimestamp\\n    );\\n    event Revoked(bytes32 vestingScheduleId, uint256 revokeTimestamp);\\n\\n    constructor(IERC20 _blastToken) {\\n        blastToken = _blastToken;\\n    }\\n\\n    /// <=============== MUTATIVE METHODS ===============>\\n\\n    /// @notice Creates a new vesting schedule for a beneficiary\\n    function createVestingSchedule(\\n        address _beneficiary,\\n        uint256 _start,\\n        uint256 _cliffDuration,\\n        uint256 _duration,\\n        uint256 _immediateReleaseAmount,\\n        uint256 _amountTotal,\\n        bool _revocable\\n    ) public onlyOwner {\\n        if (_beneficiary == address(0)) revert ZeroAddress();\\n        if (getWithdrawableAmount() < (_amountTotal + _immediateReleaseAmount)) revert InsufficientTokens();\\n        if (_duration == 0) revert DurationInvalid();\\n        if (_amountTotal == 0) revert AmountInvalid();\\n        if (_start <= block.timestamp) revert StartTimeInvalid();\\n        if (_cliffDuration > _duration) revert DurationInvalid();\\n\\n        bytes32 vestingScheduleId = computeNextVestingScheduleIdForHolder(\\n            _beneficiary\\n        );\\n        uint256 cliff = _start + _cliffDuration;\\n        vestingSchedules[vestingScheduleId] = VestingSchedule({\\n            beneficiary: _beneficiary,\\n            start: _start,\\n            cliffStart: cliff,\\n            duration: _duration,\\n            immediateVestedAmount: _immediateReleaseAmount,\\n            amountTotal: _amountTotal,\\n            released: 0,\\n            revocable: _revocable,\\n            revoked: false\\n        });\\n        vestingSchedulesTotalAmount = vestingSchedulesTotalAmount + _amountTotal + _immediateReleaseAmount;\\n        vestingSchedulesIds.push(vestingScheduleId);\\n        uint256 currentVestingCount = holdersVestingCount[_beneficiary];\\n        holdersVestingCount[_beneficiary] = currentVestingCount + 1;\\n\\n        emit CreatedVestingSchedule(_beneficiary, vestingScheduleId);\\n    }\\n\\n    /**\\n     * @notice Revokes the vesting schedule for given identifier.\\n     * @param vestingScheduleId the vesting schedule identifier\\n     */\\n    function revoke(bytes32 vestingScheduleId) public onlyOwner {\\n        if (vestingSchedules[vestingScheduleId].revoked)\\n            revert ScheduleRevoked();\\n        VestingSchedule storage vestingSchedule = vestingSchedules[\\n            vestingScheduleId\\n        ];\\n        if (!vestingSchedule.revocable) revert NotRevocable();\\n        uint256 releasableAmount = _computeReleasableAmount(vestingSchedule);\\n        if (releasableAmount > 0) {\\n            release(vestingScheduleId, releasableAmount);\\n        }\\n        uint256 unreleased = vestingSchedule.amountTotal -\\n            vestingSchedule.released;\\n        vestingSchedulesTotalAmount = vestingSchedulesTotalAmount - unreleased;\\n        vestingSchedule.revoked = true;\\n\\n        emit Revoked(vestingScheduleId, block.timestamp);\\n    }\\n\\n    /// @notice Release vested amount of tokens.\\n    function release(bytes32 vestingScheduleId, uint256 amount)\\n        public\\n        nonReentrant\\n    {\\n        if (vestingSchedules[vestingScheduleId].revoked)\\n            revert ScheduleRevoked();\\n        VestingSchedule storage vestingSchedule = vestingSchedules[\\n            vestingScheduleId\\n        ];\\n        bool isBeneficiary = msg.sender == vestingSchedule.beneficiary;\\n        bool isOwner = msg.sender == owner();\\n        if (!isBeneficiary && !isOwner) revert BeneficiayrOrOwner();\\n        uint256 releasableAmount = _computeReleasableAmount(vestingSchedule);\\n        if (releasableAmount < amount) revert NotEnoughTokens();\\n        vestingSchedule.released = vestingSchedule.released + amount;\\n        vestingSchedulesTotalAmount = vestingSchedulesTotalAmount - amount;\\n        blastToken.safeTransfer(vestingSchedule.beneficiary, amount);\\n        emit Released(msg.sender, vestingScheduleId, amount, block.timestamp);\\n    }\\n\\n    /// <=============== VIEWS ===============>\\n\\n    /**\\n     * @dev Returns the amount of tokens that can be withdrawn by the owner.\\n     * @return the amount of tokens\\n     */\\n    function getWithdrawableAmount() public view returns (uint256) {\\n        return\\n            blastToken.balanceOf(address(this)) - vestingSchedulesTotalAmount;\\n    }\\n\\n    /**\\n     * @dev Computes the next vesting schedule identifier for a given holder address.\\n     */\\n    function computeNextVestingScheduleIdForHolder(address holder)\\n        public\\n        view\\n        returns (bytes32)\\n    {\\n        return\\n            computeVestingScheduleIdForAddressAndIndex(\\n                holder,\\n                holdersVestingCount[holder]\\n            );\\n    }\\n\\n    /**\\n     * @dev Computes the vesting schedule identifier for an address and an index.\\n     */\\n    function computeVestingScheduleIdForAddressAndIndex(\\n        address holder,\\n        uint256 index\\n    ) public pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(holder, index));\\n    }\\n\\n    /**\\n     * @notice Computes the vested amount of tokens for the given vesting schedule identifier.\\n     * @return the vested amount\\n     */\\n    function computeReleasableAmount(bytes32 vestingScheduleId)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        if (vestingSchedules[vestingScheduleId].revoked)\\n            revert ScheduleRevoked();\\n        VestingSchedule storage vestingSchedule = vestingSchedules[\\n            vestingScheduleId\\n        ];\\n        return _computeReleasableAmount(vestingSchedule);\\n    }\\n\\n    /**\\n     * @dev Computes the releasable amount of tokens for a vesting schedule.\\n     * @return the amount of releasable tokens\\n     */\\n    function _computeReleasableAmount(VestingSchedule memory vestingSchedule)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 currentTime = block.timestamp;\\n        if (currentTime < vestingSchedule.cliffStart) {\\n            return vestingSchedule.immediateVestedAmount - vestingSchedule.released;\\n        } else if (\\n            currentTime >= vestingSchedule.cliffStart + vestingSchedule.duration\\n        ) {\\n            return\\n                vestingSchedule.amountTotal +\\n                vestingSchedule.immediateVestedAmount -\\n                vestingSchedule.released;\\n        } else {\\n            uint256 timeFromStart = currentTime - vestingSchedule.cliffStart;\\n            uint256 vestedAmount = vestingSchedule.amountTotal * timeFromStart / vestingSchedule.duration;\\n            vestedAmount = vestedAmount + vestingSchedule.immediateVestedAmount - vestingSchedule.released;\\n            return vestedAmount;\\n        }\\n    }\\n\\n    /**\\n     * @notice Returns the vesting schedule information for a given identifier.\\n     * @return the vesting schedule structure information\\n     */\\n    function getVestingSchedule(bytes32 vestingScheduleId)\\n        public\\n        view\\n        returns (VestingSchedule memory)\\n    {\\n        return vestingSchedules[vestingScheduleId];\\n    }\\n\\n    /**\\n     * @notice Returns the vesting schedule information for a given holder and index.\\n     * @return the vesting schedule structure information\\n     */\\n    function getVestingScheduleByAddressAndIndex(address holder, uint256 index)\\n        external\\n        view\\n        returns (VestingSchedule memory)\\n    {\\n        return\\n            getVestingSchedule(\\n                computeVestingScheduleIdForAddressAndIndex(holder, index)\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0xc0f42bcdc3b61d720d682075738fe7665492090721e22dc4a67b7e1bdd7d2db8\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100cf5760003560e01c806390be10cc1161008c578063ea1bb3d511610066578063ea1bb3d5146101b5578063f2fde38b146101c8578063f51321d7146101db578063f7c469f0146101ee57600080fd5b806390be10cc1461017a5780639ef346b414610182578063b75c7dc6146101a257600080fd5b80631b078ab3146100d45780634495e8271461011857806366afd8ef1461012d578063715018a6146101405780638af104da146101485780638da5cb5b14610169575b600080fd5b6100fb7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b61012b610126366004611051565b610201565b005b61012b61013b3660046110b8565b6104dc565b61012b610718565b61015b6101563660046110da565b61072c565b60405190815260200161010f565b6000546001600160a01b03166100fb565b61015b610773565b610195610190366004611104565b610822565b60405161010f919061111d565b61012b6101b0366004611104565b6108b5565b61015b6101c3366004611104565b610a33565b61012b6101d6366004611196565b610b01565b6101956101e93660046110da565b610b7a565b61015b6101fc366004611196565b610b8f565b610209610bb9565b6001600160a01b0387166102305760405163d92e233d60e01b815260040160405180910390fd5b61023a83836111c7565b610242610773565b1015610261576040516378dbf0af60e11b815260040160405180910390fd5b8361027f57604051637c2a912d60e11b815260040160405180910390fd5b8161029d5760405163079d4a4560e11b815260040160405180910390fd5b4286116102bd57604051632aeba70760e21b815260040160405180910390fd5b838511156102de57604051637c2a912d60e11b815260040160405180910390fd5b60006102e988610b8f565b905060006102f787896111c7565b90506040518061012001604052808a6001600160a01b03168152602001898152602001828152602001878152602001868152602001858152602001600081526020018415158152602001600015158152506003600084815260200190815260200160002060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506020820151816001015560408201518160020155606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e08201518160070160006101000a81548160ff0219169083151502179055506101008201518160070160016101000a81548160ff021916908315150217905550905050848460045461041791906111c7565b61042191906111c7565b6004556002805460018181019092557f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace018390556001600160a01b038a166000908152600560205260409020549061047a9082906111c7565b6001600160a01b038b166000818152600560209081526040918290209390935580519182529181018590527f866861c8e9b4426152f128328a1bb760e1fd75b7d542ee92a4af3d4bdc5f5a4c910160405180910390a150505050505050505050565b600260015414156105345760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b6002600155600082815260036020526040902060070154610100900460ff1615610571576040516318aaa38760e31b815260040160405180910390fd5b6000828152600360205260408120805491549091336001600160a01b0391821681149291909116148115826105a4575080155b156105c257604051634c61ddc160e01b815260040160405180910390fd5b604080516101208101825284546001600160a01b03168152600185015460208201526002850154918101919091526003840154606082015260048401546080820152600584015460a0820152600684015460c0820152600784015460ff808216151560e0840152610100918290041615159082015260009061064390610c13565b905084811015610666576040516308aeed0f60e21b815260040160405180910390fd5b84846006015461067691906111c7565b60068501556004546106899086906111df565b60045583546106c5906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116911687610cd4565b60408051338152602081018890529081018690524260608201527f4d42445e683cbab3983ed888401e0f37825acc044273f7c77716cf3b7057e5f49060800160405180910390a150506001805550505050565b610720610bb9565b61072a6000610d2b565b565b6040516bffffffffffffffffffffffff19606084901b1660208201526034810182905260009060540160405160208183030381529060405280519060200120905092915050565b600480546040516370a0823160e01b815230928101929092526000917f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b1580156107db57600080fd5b505afa1580156107ef573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061081391906111f6565b61081d91906111df565b905090565b61082a610fce565b5060009081526003602081815260409283902083516101208101855281546001600160a01b0316815260018201549281019290925260028101549382019390935290820154606082015260048201546080820152600582015460a0820152600682015460c082015260079091015460ff808216151560e0840152610100918290041615159082015290565b6108bd610bb9565b600081815260036020526040902060070154610100900460ff16156108f5576040516318aaa38760e31b815260040160405180910390fd5b6000818152600360205260409020600781015460ff1661092857604051639414820d60e01b815260040160405180910390fd5b604080516101208101825282546001600160a01b03168152600183015460208201526002830154918101919091526003820154606082015260048201546080820152600582015460a0820152600682015460c0820152600782015460ff808216151560e084015261010091829004161515908201526000906109a990610c13565b905080156109bb576109bb83826104dc565b6000826006015483600501546109d191906111df565b9050806004546109e191906111df565b60045560078301805461ff001916610100179055604080518581524260208201527ff53e4c807734a99e87fb386d2952cda1e1aa71600280ecf91f5eaae69677c333910160405180910390a150505050565b600081815260036020526040812060070154610100900460ff1615610a6b576040516318aaa38760e31b815260040160405180910390fd5b60008281526003602081815260409283902083516101208101855281546001600160a01b0316815260018201549281019290925260028101549382019390935290820154606082015260048201546080820152600582015460a0820152600682015460c0820152600782015460ff808216151560e08401526101009182900416151590820152610afa90610c13565b9392505050565b610b09610bb9565b6001600160a01b038116610b6e5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161052b565b610b7781610d2b565b50565b610b82610fce565b610afa610190848461072c565b6001600160a01b038116600090815260056020526040812054610bb390839061072c565b92915050565b6000546001600160a01b0316331461072a5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161052b565b60408101516000904290811015610c38578260c001518360800151610afa91906111df565b82606001518360400151610c4c91906111c7565b8110610c75578260c0015183608001518460a00151610c6b91906111c7565b610afa91906111df565b6000836040015182610c8791906111df565b905060008460600151828660a00151610ca0919061120f565b610caa919061122e565b90508460c00151856080015182610cc191906111c7565b610ccb91906111df565b95945050505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610d26908490610d7b565b505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000610dd0826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610e4d9092919063ffffffff16565b805190915015610d265780806020019051810190610dee9190611250565b610d265760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161052b565b6060610e5c8484600085610e64565b949350505050565b606082471015610ec55760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161052b565b6001600160a01b0385163b610f1c5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161052b565b600080866001600160a01b03168587604051610f38919061129d565b60006040518083038185875af1925050503d8060008114610f75576040519150601f19603f3d011682016040523d82523d6000602084013e610f7a565b606091505b5091509150610f8a828286610f95565b979650505050505050565b60608315610fa4575081610afa565b825115610fb45782518084602001fd5b8160405162461bcd60e51b815260040161052b91906112b9565b60405180610120016040528060006001600160a01b031681526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000151581526020016000151581525090565b80356001600160a01b038116811461103e57600080fd5b919050565b8015158114610b7757600080fd5b600080600080600080600060e0888a03121561106c57600080fd5b61107588611027565b96506020880135955060408801359450606088013593506080880135925060a0880135915060c08801356110a881611043565b8091505092959891949750929550565b600080604083850312156110cb57600080fd5b50508035926020909101359150565b600080604083850312156110ed57600080fd5b6110f683611027565b946020939093013593505050565b60006020828403121561111657600080fd5b5035919050565b60006101208201905060018060a01b0383511682526020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015260c083015160c083015260e0830151151560e08301526101008084015161118e8285018215159052565b505092915050565b6000602082840312156111a857600080fd5b610afa82611027565b634e487b7160e01b600052601160045260246000fd5b600082198211156111da576111da6111b1565b500190565b6000828210156111f1576111f16111b1565b500390565b60006020828403121561120857600080fd5b5051919050565b6000816000190483118215151615611229576112296111b1565b500290565b60008261124b57634e487b7160e01b600052601260045260246000fd5b500490565b60006020828403121561126257600080fd5b8151610afa81611043565b60005b83811015611288578181015183820152602001611270565b83811115611297576000848401525b50505050565b600082516112af81846020870161126d565b9190910192915050565b60208152600082518060208401526112d881604085016020870161126d565b601f01601f1916919091016040019291505056fea2646970667358221220653fe37834d71cd09a3544895712cf61409af035519879be5515eefd22ea72b564736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "computeNextVestingScheduleIdForHolder(address)": {
        "details": "Computes the next vesting schedule identifier for a given holder address."
      },
      "computeReleasableAmount(bytes32)": {
        "returns": {
          "_0": "the vested amount"
        }
      },
      "computeVestingScheduleIdForAddressAndIndex(address,uint256)": {
        "details": "Computes the vesting schedule identifier for an address and an index."
      },
      "getVestingSchedule(bytes32)": {
        "returns": {
          "_0": "the vesting schedule structure information"
        }
      },
      "getVestingScheduleByAddressAndIndex(address,uint256)": {
        "returns": {
          "_0": "the vesting schedule structure information"
        }
      },
      "getWithdrawableAmount()": {
        "details": "Returns the amount of tokens that can be withdrawn by the owner.",
        "returns": {
          "_0": "the amount of tokens"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "revoke(bytes32)": {
        "params": {
          "vestingScheduleId": "the vesting schedule identifier"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "AmountInvalid()": [
        {
          "notice": "amount must be > 0"
        }
      ],
      "BeneficiayrOrOwner()": [
        {
          "notice": "only beneficiary and owner can release vested tokens"
        }
      ],
      "DurationInvalid()": [
        {
          "notice": "duration must be > 0"
        }
      ],
      "InsufficientTokens()": [
        {
          "notice": "cannot create vesting schedule because not sufficient tokens"
        }
      ],
      "NotEnoughTokens()": [
        {
          "notice": "cannot release tokens, not enough vested tokens"
        }
      ],
      "NotRevocable()": [
        {
          "notice": "Vesting is not revocable"
        }
      ],
      "ScheduleRevoked()": [
        {
          "notice": "Reverts if the vesting schedule has been revoked"
        }
      ],
      "StartTimeInvalid()": [
        {
          "notice": "When create vesting schedule, in case of start time should be future"
        }
      ],
      "ZeroAddress()": [
        {
          "notice": "In case the address is zero"
        }
      ]
    },
    "kind": "user",
    "methods": {
      "blastToken()": {
        "notice": "Blast TOKEN"
      },
      "computeReleasableAmount(bytes32)": {
        "notice": "Computes the vested amount of tokens for the given vesting schedule identifier."
      },
      "createVestingSchedule(address,uint256,uint256,uint256,uint256,uint256,bool)": {
        "notice": "Creates a new vesting schedule for a beneficiary"
      },
      "getVestingSchedule(bytes32)": {
        "notice": "Returns the vesting schedule information for a given identifier."
      },
      "getVestingScheduleByAddressAndIndex(address,uint256)": {
        "notice": "Returns the vesting schedule information for a given holder and index."
      },
      "release(bytes32,uint256)": {
        "notice": "Release vested amount of tokens."
      },
      "revoke(bytes32)": {
        "notice": "Revokes the vesting schedule for given identifier."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 446,
        "contract": "contracts/Vesting/TokenVesting.sol:TokenVesting",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 670,
        "contract": "contracts/Vesting/TokenVesting.sol:TokenVesting",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 14593,
        "contract": "contracts/Vesting/TokenVesting.sol:TokenVesting",
        "label": "vestingSchedulesIds",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_bytes32)dyn_storage"
      },
      {
        "astId": 14598,
        "contract": "contracts/Vesting/TokenVesting.sol:TokenVesting",
        "label": "vestingSchedules",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_bytes32,t_struct(VestingSchedule)14590_storage)"
      },
      {
        "astId": 14600,
        "contract": "contracts/Vesting/TokenVesting.sol:TokenVesting",
        "label": "vestingSchedulesTotalAmount",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 14604,
        "contract": "contracts/Vesting/TokenVesting.sol:TokenVesting",
        "label": "holdersVestingCount",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(VestingSchedule)14590_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct TokenVesting.VestingSchedule)",
        "numberOfBytes": "32",
        "value": "t_struct(VestingSchedule)14590_storage"
      },
      "t_struct(VestingSchedule)14590_storage": {
        "encoding": "inplace",
        "label": "struct TokenVesting.VestingSchedule",
        "members": [
          {
            "astId": 14573,
            "contract": "contracts/Vesting/TokenVesting.sol:TokenVesting",
            "label": "beneficiary",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 14575,
            "contract": "contracts/Vesting/TokenVesting.sol:TokenVesting",
            "label": "start",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 14577,
            "contract": "contracts/Vesting/TokenVesting.sol:TokenVesting",
            "label": "cliffStart",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 14579,
            "contract": "contracts/Vesting/TokenVesting.sol:TokenVesting",
            "label": "duration",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 14581,
            "contract": "contracts/Vesting/TokenVesting.sol:TokenVesting",
            "label": "immediateVestedAmount",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 14583,
            "contract": "contracts/Vesting/TokenVesting.sol:TokenVesting",
            "label": "amountTotal",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 14585,
            "contract": "contracts/Vesting/TokenVesting.sol:TokenVesting",
            "label": "released",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 14587,
            "contract": "contracts/Vesting/TokenVesting.sol:TokenVesting",
            "label": "revocable",
            "offset": 0,
            "slot": "7",
            "type": "t_bool"
          },
          {
            "astId": 14589,
            "contract": "contracts/Vesting/TokenVesting.sol:TokenVesting",
            "label": "revoked",
            "offset": 1,
            "slot": "7",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}