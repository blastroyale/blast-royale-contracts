{
  "address": "0x1d1ea9c0EEFeB90c5A43fEe7111b8661B2D8982E",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IBlastEquipmentNFT",
          "name": "_blastEquipmentNFT",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_blastToken",
          "type": "address"
        },
        {
          "internalType": "contract ERC20Burnable",
          "name": "_csToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_treasuryAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_companyAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newLevel",
          "type": "uint256"
        }
      ],
      "name": "LevelUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DECIMAL_FACTOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "blastEquipmentNFT",
      "outputs": [
        {
          "internalType": "contract IBlastEquipmentNFT",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "blastToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bltAttribute",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "pricePerLevel",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "csAttribute",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "pricePerLevel",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "csToken",
      "outputs": [
        {
          "internalType": "contract ERC20Burnable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "durabilityEffectDivider",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "flipIsUsingMatic",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLatestPrice",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_tokenType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getRequiredPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isUsingMatic",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "maxLevelPerRarity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "multiplierPerGrade",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "stop",
          "type": "bool"
        }
      ],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IBlastEquipmentNFT",
          "name": "_blastEquipmentNFT",
          "type": "address"
        }
      ],
      "name": "setBlastEquipmentAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_blastToken",
          "type": "address"
        }
      ],
      "name": "setBlastTokenAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ERC20Burnable",
          "name": "_csToken",
          "type": "address"
        }
      ],
      "name": "setCSTokenAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_company",
          "type": "address"
        }
      ],
      "name": "setCompanyAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newValue",
          "type": "uint256"
        }
      ],
      "name": "setDurabilityEffectDivider",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16[5]",
          "name": "_multiplierPerGrade",
          "type": "uint16[5]"
        }
      ],
      "name": "setMultiplierPerGrade",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        }
      ],
      "name": "setTreasuryAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "upgrade",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "upgradeUsingMatic",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0x9515a66c7ad93da3e78695bf2bfac58aae7e6a23fc1cf025505cb0aae99b9ad9",
  "receipt": {
    "to": null,
    "from": "0x7Ac410F4E36873022b57821D7a8EB3D7513C045a",
    "contractAddress": "0xC0af4A542D3EE266D4fAbadEb1B27D5b7023B692",
    "transactionIndex": 16,
    "gasUsed": "2836193",
    "logsBloom": "0x
    "blockHash": "0x0124e1065d9981833ea7f6cf769d41ad88c3af0608e56447d6c9d1f765cfab06",
    "transactionHash": "0x9515a66c7ad93da3e78695bf2bfac58aae7e6a23fc1cf025505cb0aae99b9ad9",
    "logs": [
      {
        "transactionIndex": 16,
        "blockNumber": 29046752,
        "transactionHash": "0x9515a66c7ad93da3e78695bf2bfac58aae7e6a23fc1cf025505cb0aae99b9ad9",
        "address": "0xC0af4A542D3EE266D4fAbadEb1B27D5b7023B692",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000007ac410f4e36873022b57821d7a8eb3d7513c045a",
          "0x0000000000000000000000007ac410f4e36873022b57821d7a8eb3d7513c045a"
        ],
        "data": "0x",
        "logIndex": 42,
        "blockHash": "0x0124e1065d9981833ea7f6cf769d41ad88c3af0608e56447d6c9d1f765cfab06"
      },
      {
        "transactionIndex": 16,
        "blockNumber": 29046752,
        "transactionHash": "0x9515a66c7ad93da3e78695bf2bfac58aae7e6a23fc1cf025505cb0aae99b9ad9",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000007ac410f4e36873022b57821d7a8eb3d7513c045a",
          "0x000000000000000000000000f903ba9e006193c1527bfbe65fe2123704ea3f99"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000f1d40f5be337c000000000000000000000000000000000000000000000098eda038584d5908d600000000000000000000000000000000000000000000089ae0055d4897d835aa000000000000000000000000000000000000000000000098ed911b17579ad55a00000000000000000000000000000000000000000000089ae0147a898d966926",
        "logIndex": 43,
        "blockHash": "0x0124e1065d9981833ea7f6cf769d41ad88c3af0608e56447d6c9d1f765cfab06"
      }
    ],
    "blockNumber": 29046752,
    "cumulativeGasUsed": "4347387",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x03eA885Ec4cb6100707EB4bE74DD83a7DDf856B1",
    "0xdF1b3D7F8DE55148c42dAb83f8f1b9E0510EfCb2",
    "0x3539f80890beD510F666Dd307A640220c113e599",
    "0x7Ac410F4E36873022b57821D7a8EB3D7513C045a",
    "0x7Ac410F4E36873022b57821D7a8EB3D7513C045a"
  ],
  "numDeployments": 3,
  "solcInputHash": "038ad6350887b7125fa5b305dd90fc15",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IBlastEquipmentNFT\",\"name\":\"_blastEquipmentNFT\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_blastToken\",\"type\":\"address\"},{\"internalType\":\"contract ERC20Burnable\",\"name\":\"_csToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasuryAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_companyAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newLevel\",\"type\":\"uint256\"}],\"name\":\"LevelUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DECIMAL_FACTOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blastEquipmentNFT\",\"outputs\":[{\"internalType\":\"contract IBlastEquipmentNFT\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blastToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bltAttribute\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pricePerLevel\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"csAttribute\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pricePerLevel\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"csToken\",\"outputs\":[{\"internalType\":\"contract ERC20Burnable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"durabilityEffectDivider\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flipIsUsingMatic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestPrice\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_tokenType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getRequiredPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isUsingMatic\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"maxLevelPerRarity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"multiplierPerGrade\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"stop\",\"type\":\"bool\"}],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IBlastEquipmentNFT\",\"name\":\"_blastEquipmentNFT\",\"type\":\"address\"}],\"name\":\"setBlastEquipmentAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_blastToken\",\"type\":\"address\"}],\"name\":\"setBlastTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ERC20Burnable\",\"name\":\"_csToken\",\"type\":\"address\"}],\"name\":\"setCSTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_company\",\"type\":\"address\"}],\"name\":\"setCompanyAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newValue\",\"type\":\"uint256\"}],\"name\":\"setDurabilityEffectDivider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16[5]\",\"name\":\"_multiplierPerGrade\",\"type\":\"uint16[5]\"}],\"name\":\"setMultiplierPerGrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setTreasuryAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"upgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"upgradeUsingMatic\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getLatestPrice()\":{\"notice\":\"Returns the latest price\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Utilities/Upgrader.sol\":\"Upgrader\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5b35d8e68aeaccc685239bd9dd79b9ba01a0357930f8a3307ab85511733d9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x0849d93b16c9940beb286a7864ed02724b248b93e0d80ef6355af5ef15c64773\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x24b04b8aacaaf1a4a0719117b29c9c3647b1f479c5ac2a60f5ff1bb6d839c238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        _spendAllowance(account, _msgSender(), amount);\\n        _burn(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x0d19410453cda55960a818e02bd7c18952a5c8fe7a3036e81f0d599f34487a7b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/Utilities/Upgrader.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"./../interfaces/IBlastEquipmentNFT.sol\\\";\\nimport \\\"./Utility.sol\\\";\\n\\ncontract Upgrader is Utility {\\n    using SafeERC20 for IERC20;\\n\\n    event LevelUpgraded(uint256 tokenId, address owner, uint256 newLevel);\\n\\n    // Calculation related variables\\n    struct Attributes {\\n        uint16[10] pricePerRarity;\\n        uint8[10] pricePerAdjective;\\n        uint256 pricePerLevel; // decimal factor 100000\\n    }\\n\\n    uint256 public durabilityEffectDivider = 48;\\n    uint256[10] public maxLevelPerRarity = [\\n        10, 12, 15, 17, 20,\\n        22, 25, 27, 30, 35\\n    ];\\n    uint16[5] public multiplierPerGrade = [1740, 1520, 1320, 1150, 1000];\\n    Attributes public bltAttribute;\\n    Attributes public csAttribute;\\n\\n    constructor(\\n        IBlastEquipmentNFT _blastEquipmentNFT,\\n        IERC20 _blastToken,\\n        ERC20Burnable _csToken,\\n        address _treasuryAddress,\\n        address _companyAddress\\n    ) Utility(_blastEquipmentNFT, _blastToken, _csToken, _treasuryAddress, _companyAddress) {\\n        uint16[10] memory _bltPricePerRarity = [\\n            uint16(3), 4, 4, 5, 5,\\n            6, 7, 7, 8, 9\\n        ];\\n        uint8[10] memory _bltPricePerAdjective = [0, 0, 0, 1, 1, 2, 2, 3, 4, 4];\\n        uint16[10] memory _csPricePerRarity = [\\n            100, 144, 207, 297, 427,\\n            613, 881, 1266, 1819, 2613\\n        ];\\n        uint8[10] memory _csPricePerAdjective = [0, 0, 0, 1, 1, 2, 2, 3, 4, 4];\\n\\n        bltAttribute = Attributes({\\n            pricePerRarity: _bltPricePerRarity,\\n            pricePerAdjective: _bltPricePerAdjective,\\n            pricePerLevel: 500\\n        });\\n        csAttribute = Attributes({\\n            pricePerRarity: _csPricePerRarity,\\n            pricePerAdjective: _csPricePerAdjective,\\n            pricePerLevel: 2500\\n        });\\n    }\\n\\n    function setDurabilityEffectDivider(uint256 _newValue) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        require(_newValue > 0, Errors.NO_ZERO_ADDRESS);\\n        durabilityEffectDivider = _newValue;\\n    }\\n\\n    function setMultiplierPerGrade(uint16[5] memory _multiplierPerGrade) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        require(_multiplierPerGrade.length == 5, Errors.NO_ZERO_ADDRESS);\\n        for (uint8 i = 0; i < 5; i++) {\\n            multiplierPerGrade[i] = _multiplierPerGrade[i];\\n        }\\n    }\\n\\n    function upgrade(uint256 _tokenId) external nonReentrant whenNotPaused {\\n        require(!isUsingMatic, Errors.USING_MATIC_NOW);\\n        require(_msgSender() == blastEquipmentNFT.ownerOf(_tokenId), Errors.NOT_OWNER);\\n\\n        uint256 bltPrice = getRequiredPrice(0, _tokenId);\\n        uint256 csPrice = getRequiredPrice(1, _tokenId);\\n        (, , , uint8 rarity, ) = blastEquipmentNFT.getStaticAttributes(_tokenId);\\n        (uint256 level, , , , ,) = blastEquipmentNFT.getAttributes(_tokenId);\\n        require(level != 0, Errors.INVALID_PARAM);\\n        require(level != maxLevelPerRarity[rarity], Errors.MAX_LEVEL_REACHED);\\n        require(bltPrice != 0 && csPrice != 0, Errors.INVALID_PARAM);\\n\\n        csToken.burnFrom(_msgSender(), csPrice);\\n        blastToken.safeTransferFrom(\\n            _msgSender(),\\n            treasuryAddress,\\n            bltPrice / 4\\n        );\\n        blastToken.safeTransferFrom(\\n            _msgSender(),\\n            companyAddress,\\n            (bltPrice * 3) / 4\\n        );\\n\\n        blastEquipmentNFT.setLevel(_tokenId, level + 1);\\n\\n        emit LevelUpgraded(_tokenId, _msgSender(), level + 1);\\n    }\\n\\n    function upgradeUsingMatic(uint256 _tokenId) external payable nonReentrant whenNotPaused {\\n        require(isUsingMatic, Errors.NOT_USING_MATIC_NOW);\\n        require(_msgSender() == blastEquipmentNFT.ownerOf(_tokenId), Errors.NOT_OWNER);\\n\\n        uint256 bltPrice = getRequiredPrice(0, _tokenId);\\n        uint256 csPrice = getRequiredPrice(1, _tokenId);\\n        (, , , uint8 rarity, ) = blastEquipmentNFT.getStaticAttributes(_tokenId);\\n        (uint256 level, , , , ,) = blastEquipmentNFT.getAttributes(_tokenId);\\n        require(level != 0, Errors.INVALID_PARAM);\\n        require(level != maxLevelPerRarity[rarity], Errors.MAX_LEVEL_REACHED);\\n        require(bltPrice != 0 && csPrice != 0, Errors.INVALID_PARAM);\\n\\n        csToken.burnFrom(_msgSender(), csPrice);\\n        require(msg.value == bltPrice, Errors.INVALID_AMOUNT);\\n        (bool sent1, ) = payable(treasuryAddress).call{value: bltPrice / 4}(\\\"\\\");\\n        require(sent1, Errors.FAILED_TO_SEND_ETHER_TREASURY);\\n        (bool sent2, ) = payable(companyAddress).call{value: (bltPrice * 3) / 4}(\\\"\\\");\\n        require(sent2, Errors.FAILED_TO_SEND_ETHER_COMPANY);\\n\\n        blastEquipmentNFT.setLevel(_tokenId, level + 1);\\n\\n        emit LevelUpgraded(_tokenId, _msgSender(), level + 1);\\n    }\\n\\n    function getRequiredPrice(uint8 _tokenType, uint256 _tokenId)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        (, uint8 maxDurability, uint8 adjective, uint8 rarity, uint8 grade) = blastEquipmentNFT\\n            .getStaticAttributes(_tokenId);\\n        (uint256 level, , , , ,) = blastEquipmentNFT.getAttributes(_tokenId);\\n\\n        if (_tokenType == 0) {\\n            uint256 price = (bltAttribute.pricePerRarity[rarity] + bltAttribute.pricePerAdjective[adjective]) * (100000 + (level - 1) * bltAttribute.pricePerLevel) * multiplierPerGrade[grade] * 10 ** 10 * maxDurability / durabilityEffectDivider;\\n            if (isUsingMatic) {\\n                int maticPrice = getLatestPrice();\\n                return maticPrice > 0 ? price * uint256(maticPrice) / 10 ** 8 : price;\\n            }\\n            return price;\\n        } else if (_tokenType == 1) {\\n            return (csAttribute.pricePerRarity[rarity] + csAttribute.pricePerAdjective[adjective]) * (100000 + (level - 1) * csAttribute.pricePerLevel) * multiplierPerGrade[grade] / DECIMAL_FACTOR / DECIMAL_FACTOR / 100 * 10 ** 18 * maxDurability / durabilityEffectDivider;\\n        } else {\\n            return 0;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf68ffd665bda817245a1205a6dc6e46d67d44bbe2858821702029d86711469d8\",\"license\":\"MIT\"},\"contracts/Utilities/Utility.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"./../interfaces/IBlastEquipmentNFT.sol\\\";\\nimport { Errors } from \\\"./../libraries/Errors.sol\\\";\\n\\nabstract contract Utility is AccessControl, ReentrancyGuard, Pausable {\\n    using SafeERC20 for IERC20;\\n\\n    AggregatorV3Interface internal priceFeed;\\n    uint256 public constant DECIMAL_FACTOR = 1000;\\n\\n    IBlastEquipmentNFT public blastEquipmentNFT;\\n    IERC20 public blastToken;\\n    ERC20Burnable public csToken;\\n\\n    address internal treasuryAddress;\\n    address internal companyAddress;\\n    bool public isUsingMatic;\\n\\n    constructor(\\n        IBlastEquipmentNFT _blastEquipmentNFT,\\n        IERC20 _blastToken,\\n        ERC20Burnable _csToken,\\n        address _treasuryAddress,\\n        address _companyAddress\\n    ) {\\n        require(\\n            address(_blastEquipmentNFT) != address(0) &&\\n            address(_blastToken) != address(0) &&\\n            address(_csToken) != address(0) &&\\n            _treasuryAddress != address(0) &&\\n            _companyAddress != address(0),\\n            Errors.NO_ZERO_ADDRESS\\n        );\\n\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        blastEquipmentNFT = _blastEquipmentNFT;\\n        blastToken = _blastToken;\\n        csToken = _csToken;\\n        treasuryAddress = _treasuryAddress;\\n        companyAddress = _companyAddress;\\n\\n        priceFeed = AggregatorV3Interface(0xd0D5e3DB44DE05E9F294BB0a3bEEaF030DE24Ada);\\n    }\\n\\n    function setTreasuryAddress(address _treasury)\\n        public\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        require(_treasury != address(0), Errors.NO_ZERO_ADDRESS);\\n        treasuryAddress = _treasury;\\n    }\\n\\n    function setCompanyAddress(address _company)\\n        public\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        require(_company != address(0), Errors.NO_ZERO_ADDRESS);\\n        companyAddress = _company;\\n    }\\n\\n    function setBlastEquipmentAddress(IBlastEquipmentNFT _blastEquipmentNFT)\\n        public\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        require(address(_blastEquipmentNFT) != address(0), Errors.NO_ZERO_ADDRESS);\\n        blastEquipmentNFT = _blastEquipmentNFT;\\n    }\\n\\n    function setBlastTokenAddress(IERC20 _blastToken)\\n        public\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        require(address(_blastToken) != address(0), Errors.NO_ZERO_ADDRESS);\\n        blastToken = _blastToken;\\n    }\\n\\n    function setCSTokenAddress(ERC20Burnable _csToken)\\n        public\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        require(address(_csToken) != address(0), Errors.NO_ZERO_ADDRESS);\\n        csToken = _csToken;\\n    }\\n\\n    function flipIsUsingMatic() public onlyRole(DEFAULT_ADMIN_ROLE) {\\n        isUsingMatic = !isUsingMatic;\\n    }    \\n    \\n    /**\\n     * Returns the latest price\\n     */\\n    function getLatestPrice() public view returns (int) {\\n        (\\n            /*uint80 roundID*/,\\n            int price,\\n            /*uint startedAt*/,\\n            /*uint timeStamp*/,\\n            /*uint80 answeredInRound*/\\n        ) = priceFeed.latestRoundData();\\n        return price;\\n    }\\n\\n    // @notice Pauses/Unpauses the contract\\n    // @dev While paused, addListing, and buy are not allowed\\n    // @param stop whether to pause or unpause the contract.\\n    function pause(bool stop) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (stop) {\\n            _pause();\\n        } else {\\n            _unpause();\\n        }\\n    }\\n}\",\"keccak256\":\"0xe41c76f97f7e881c594f1a97177f577973253ca8865fcf694a07a66850f243a0\",\"license\":\"MIT\"},\"contracts/interfaces/IBlastEquipmentNFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\nstruct StaticAttributes {\\n    uint8 maxLevel;\\n    uint8 maxDurability;\\n    uint8 adjective;\\n    uint8 rarity;\\n    uint8 grade;\\n}\\n\\n/**\\n * @dev required interface of an Equipment NFT.\\n */\\ninterface IBlastEquipmentNFT is IERC721 {\\n    /// @notice Event Attribute Updated\\n    event AttributeUpdated(\\n        uint256 tokenId,\\n        uint256 level,\\n        uint256 durabilityRestored,\\n        uint256 durability,\\n        uint256 lastRepairTime,\\n        uint256 repairCount,\\n        uint256 replicationCount\\n    );\\n\\n    /// @notice Event Revealed TokenURI\\n    event PermanentURI(string _value, uint256 indexed _id);\\n\\n    function safeMintReplicator(address _to, string calldata _uri, bytes32 _hash, string calldata _realUri, StaticAttributes calldata _staticAttribute) external returns (uint);\\n\\n    function revealRealTokenURI(uint _tokenId) external;\\n\\n    function setRealTokenURI(uint _tokenId, string calldata _realUri) external;\\n\\n    function setLevel(uint256 _tokenId, uint256 _newLevel) external;\\n\\n    function setRepairCount(uint256 _tokenId, uint256 _newRepairCount) external;\\n\\n    function setReplicationCount(uint256 _tokenId, uint256 _newReplicationCount)\\n        external;\\n\\n    function scrap(uint256 _tokenId) external;\\n\\n    function getAttributes(uint256 _tokenId) external view returns (uint256, uint256, uint256, uint256, uint256, uint256);\\n\\n    function getStaticAttributes(uint256 _tokenId) external view returns (uint8, uint8, uint8, uint8, uint8);\\n}\\n\",\"keccak256\":\"0xfea10b0d20efacae0c7aa274befefaa4ea6f7b01b85e48d88524af6a215b362d\",\"license\":\"MIT\"},\"contracts/libraries/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/**\\n * @title Errors library\\n * @author JensonCollins\\n * @notice Defines the error messages emitted by the different contracts of the Aave protocol\\n * @dev Error messages prefix glossary:\\n *  - VL = ValidationLogic\\n *  - MATH = Math libraries\\n *  - CT = Common errors between tokens (AToken, VariableDebtToken and StableDebtToken)\\n *  - AT = AToken\\n *  - SDT = StableDebtToken\\n *  - VDT = VariableDebtToken\\n *  - LP = LendingPool\\n *  - LPAPR = LendingPoolAddressesProviderRegistry\\n *  - LPC = LendingPoolConfiguration\\n *  - RL = ReserveLogic\\n *  - LPCM = LendingPoolCollateralManager\\n *  - P = Pausable\\n */\\n\\nlibrary Errors {\\n    //common errors\\n    string public constant NO_ZERO_ADDRESS = \\\"1\\\"; // Address cannot be zero\\n    string public constant NO_ZERO_VALUE = \\\"2\\\"; // Value cannot be zero\\n    string public constant NOT_OWNER = \\\"3\\\"; // Caller is not owner\\n    string public constant NOT_EXIST_TOKEN_ID = \\\"4\\\"; // Token ID does not exist\\n    string public constant INVALID_PARAM = \\\"5\\\"; // Invalid parameter\\n    string public constant INVALID_AMOUNT = \\\"6\\\"; // In case msg.value amount is different as expected\\n    string public constant FAILED_TO_SEND_ETHER_TREASURY = \\\"7\\\"; // Failed to send ether to treasury\\n    string public constant FAILED_TO_SEND_ETHER_COMPANY = \\\"8\\\"; // Failed to send ether to company\\n    string public constant USING_MATIC_NOW = \\\"9\\\"; // Using MATIC now\\n    string public constant NOT_USING_MATIC_NOW = \\\"10\\\"; // Not using MATIC now\\n\\n    // AccessControl\\n    string public constant MISSING_GAME_ROLE = \\\"11\\\"; // Caller does not have the GAME_ROLE role\\n\\n    // BlastEquipmentNFT contract\\n    string public constant MAX_LEVEL_REACHED = \\\"12\\\"; // Max level reached\\n\\n    // Marektplace contract\\n    string public constant TOKEN_NOT_WHITELISTED = \\\"13\\\"; // Caller is not whitelisted\\n    string public constant LISTING_IS_NOT_ACTIVED = \\\"14\\\"; // Listing is not actived\\n    string public constant FAILED_TO_SEND_ETHER_USER = \\\"15\\\"; // Failed to send ether to user\\n\\n    // MarketplaceLootbox contract\\n    string public constant MAX_LIMIT_REACHED = \\\"16\\\"; // Reached max limit\\n    string public constant INVALID_MERKLE_PROOF = \\\"17\\\"; // Invalid merkle proof\\n\\n    // Lootbox contract\\n    string public constant NOT_AVAILABLE_TO_OPEN = \\\"18\\\"; // Lootbox is not available to open\\n\\n    // CS contract\\n    string public constant CS_EXPIRED_DEADLINE = \\\"19\\\"; // Invalid signature\\n    string public constant CS_INVALID_SIGNATURE = \\\"20\\\"; // Invalid signature\\n\\n    // Replicator contract\\n    string public constant NOT_READY_REPLICATE = \\\"21\\\"; // Not ready to replicate\\n    string public constant NOT_READY_MORPH = \\\"22\\\"; // Not ready to morph\\n    string public constant INVALID_HEX_CHARACTER = \\\"23\\\"; // Not ready to morph\\n}\\n\",\"keccak256\":\"0xaeb98ec3fa04644f2d4ee95edc1b2c81ca9ad71f4d2332f856cfb473621182ee\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60306008556101c0604052600a6080818152600c60a052600f60c052601160e052601461010052601661012052601961014052601b61016052601e6101805260236101a052620000539160099190620005e3565b506040805160a0810182526106cc81526105f060208201526105289181019190915261047e60608201526103e86080820152620000959060139060056200062b565b50348015620000a357600080fd5b5060405162002ece38038062002ece833981016040819052620000c69162000779565b600180556002805460ff1916905584848484846001600160a01b03851615801590620000fa57506001600160a01b03841615155b80156200010f57506001600160a01b03831615155b80156200012457506001600160a01b03821615155b80156200013957506001600160a01b03811615155b604051806040016040528060018152602001603160f81b815250906200017d5760405162461bcd60e51b8152600401620001749190620007f9565b60405180910390fd5b506200018b60003362000533565b84600360006101000a8154816001600160a01b0302191690836001600160a01b0316021790555083600460006101000a8154816001600160a01b0302191690836001600160a01b0316021790555082600560006101000a8154816001600160a01b0302191690836001600160a01b0316021790555081600660006101000a8154816001600160a01b0302191690836001600160a01b0316021790555080600760006101000a8154816001600160a01b0302191690836001600160a01b0316021790555073d0d5e3db44de05e9f294bb0a3beeaf030de24ada600260016101000a8154816001600160a01b0302191690836001600160a01b0316021790555050505050506000604051806101400160405280600361ffff1661ffff168152602001600461ffff168152602001600461ffff168152602001600561ffff168152602001600561ffff168152602001600661ffff168152602001600761ffff168152602001600761ffff168152602001600861ffff168152602001600961ffff1681525090506000604051806101400160405280600060ff168152602001600060ff168152602001600060ff168152602001600160ff168152602001600160ff168152602001600260ff168152602001600260ff168152602001600360ff168152602001600460ff168152602001600460ff1681525090506000604051806101400160405280606461ffff168152602001609061ffff16815260200160cf61ffff16815260200161012961ffff1681526020016101ab61ffff16815260200161026561ffff16815260200161037161ffff1681526020016104f261ffff16815260200161071b61ffff168152602001610a3561ffff1681525090506000604051806101400160405280600060ff168152602001600060ff168152602001600060ff168152602001600160ff168152602001600160ff168152602001600260ff168152602001600260ff168152602001600360ff168152602001600460ff168152602001600460ff16815250905060405180606001604052808581526020018481526020016101f4815250601460008201518160000190600a620004ad9291906200062b565b506020820151620004c5906001830190600a620006c3565b506040918201516002909101558051606081018252838152602081018390526109c4918101919091526017620004fe8185600a6200062b565b50602082015162000516906001830190600a620006c3565b506040820151816002015590505050505050505050505062000851565b6200053f828262000543565b5050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff166200053f576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556200059f3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b82600a810192821562000619579160200282015b8281111562000619578251829060ff16905591602001919060010190620005f7565b506200062792915062000749565b5090565b600183019183908215620006195791602002820160005b838211156200068457835183826101000a81548161ffff021916908361ffff160217905550926020019260020160208160010104928301926001030262000642565b8015620006b45782816101000a81549061ffff021916905560020160208160010104928301926001030262000684565b50506200062792915062000749565b600183019183908215620006195791602002820160005b838211156200071a57835183826101000a81548160ff021916908360ff1602179055509260200192600101602081600001049283019260010302620006da565b8015620006b45782816101000a81549060ff02191690556001016020816000010492830192600103026200071a565b5b808211156200062757600081556001016200074a565b6001600160a01b03811681146200077657600080fd5b50565b600080600080600060a086880312156200079257600080fd5b85516200079f8162000760565b6020870151909550620007b28162000760565b6040870151909450620007c58162000760565b6060870151909350620007d88162000760565b6080870151909250620007eb8162000760565b809150509295509295909350565b600060208083528351808285015260005b8181101562000828578581018301518582016040015282016200080a565b818111156200083b576000604083870101525b50601f01601f1916929092016040019392505050565b61266d80620008616000396000f3fe6080604052600436106101d85760003560e01c80635ad6af93116101025780638e15f47311610095578063d547741f11610064578063d547741f14610541578063df8de16314610561578063e04605fd14610582578063eccb4448146105a257600080fd5b80638e15f473146104d757806391d14854146104ec578063a217fddf1461050c578063c1763ee51461052157600080fd5b806367bdae9a116100d157806367bdae9a1461046d57806372c6239a1461048d5780637557a7d2146104ad57806384b8bce4146104c457600080fd5b80635ad6af93146104085780635c975abb1461041f5780635e00e592146104375780636605bfda1461044d57600080fd5b8063248a9ca31161017a57806345977d031161014957806345977d03146103885780634c0f5276146103a85780634f63a772146103c8578063522ffe96146103e857600080fd5b8063248a9ca3146103025780632f2ff15d1461033257806333fdbbe51461035257806336568abe1461036857600080fd5b8063062f8344116101b6578063062f83441461024957806309aca32e1461027c5780631b078ab31461029c5780632116dcc0146102d457600080fd5b806301ffc9a7146101dd578063021946fd1461021257806302329a2914610229575b600080fd5b3480156101e957600080fd5b506101fd6101f836600461212b565b6105c2565b60405190151581526020015b60405180910390f35b34801561021e57600080fd5b506102276105f9565b005b34801561023557600080fd5b50610227610244366004612163565b610626565b34801561025557600080fd5b50610269610264366004612180565b61064b565b60405161ffff9091168152602001610209565b34801561028857600080fd5b50610227610297366004612180565b610679565b3480156102a857600080fd5b506004546102bc906001600160a01b031681565b6040516001600160a01b039091168152602001610209565b3480156102e057600080fd5b506102f46102ef3660046121a8565b6106ca565b604051908152602001610209565b34801561030e57600080fd5b506102f461031d366004612180565b60009081526020819052604090206001015490565b34801561033e57600080fd5b5061022761034d3660046121e9565b610aab565b34801561035e57600080fd5b506102f46103e881565b34801561037457600080fd5b506102276103833660046121e9565b610ad5565b34801561039457600080fd5b506102276103a3366004612180565b610b4f565b3480156103b457600080fd5b506102276103c3366004612219565b611066565b3480156103d457600080fd5b506102276103e3366004612219565b6110d4565b3480156103f457600080fd5b506102f4610403366004612180565b611142565b34801561041457600080fd5b506019546102f49081565b34801561042b57600080fd5b5060025460ff166101fd565b34801561044357600080fd5b506102f460085481565b34801561045957600080fd5b50610227610468366004612219565b611159565b34801561047957600080fd5b50610227610488366004612263565b6111c7565b34801561049957600080fd5b506003546102bc906001600160a01b031681565b3480156104b957600080fd5b506016546102f49081565b6102276104d2366004612180565b611262565b3480156104e357600080fd5b506102f4611899565b3480156104f857600080fd5b506101fd6105073660046121e9565b61192d565b34801561051857600080fd5b506102f4600081565b34801561052d57600080fd5b5061022761053c366004612219565b611956565b34801561054d57600080fd5b5061022761055c3660046121e9565b6119c4565b34801561056d57600080fd5b506007546101fd90600160a01b900460ff1681565b34801561058e57600080fd5b506005546102bc906001600160a01b031681565b3480156105ae57600080fd5b506102276105bd366004612219565b6119e9565b60006001600160e01b03198216637965db0b60e01b14806105f357506301ffc9a760e01b6001600160e01b03198316145b92915050565b600061060481611a57565b506007805460ff60a01b198116600160a01b9182900460ff1615909102179055565b600061063181611a57565b81156106435761063f611a64565b5050565b61063f611abe565b6013816005811061065b57600080fd5b60109182820401919006600202915054906101000a900461ffff1681565b600061068481611a57565b6040805180820190915260018152603160f81b6020820152826106c35760405162461bcd60e51b81526004016106ba9190612317565b60405180910390fd5b5050600855565b60035460405163f692c82960e01b81526004810183905260009182918291829182916001600160a01b03169063f692c8299060240160a06040518083038186803b15801561071757600080fd5b505afa15801561072b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061074f919061234a565b600354604051634378a6e360e01b8152600481018d90529499509297509095509350600092506001600160a01b031690634378a6e39060240160c06040518083038186803b1580156107a057600080fd5b505afa1580156107b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107d891906123bf565b505050505090508760ff16600014156109575760006008548660ff1660138560ff166005811061080a5761080a612409565b601091828204019190066002029054906101000a900461ffff1661ffff1660146002015460018661083b9190612435565b610845919061244c565b61085290620186a061246b565b601560ff8a16600a811061086857610868612409565b602081049091015460ff601f9092166101000a90048116906014908a16600a811061089557610895612409565b601091828204019190066002029054906101000a900461ffff166108b99190612483565b61ffff166108c7919061244c565b6108d1919061244c565b6108e0906402540be40061244c565b6108ea919061244c565b6108f491906124a9565b600754909150600160a01b900460ff161561094a576000610913611899565b905060008113610923578161093c565b6305f5e100610932828461244c565b61093c91906124a9565b9750505050505050506105f3565b95506105f3945050505050565b8760ff1660011415610a9d576008548560ff1660646103e88060138760ff166005811061098657610986612409565b601091828204019190066002029054906101000a900461ffff1661ffff166017600201546001886109b79190612435565b6109c1919061244c565b6109ce90620186a061246b565b601860ff8c16600a81106109e4576109e4612409565b602081049091015460ff601f9092166101000a90048116906017908c16600a8110610a1157610a11612409565b601091828204019190066002029054906101000a900461ffff16610a359190612483565b61ffff16610a43919061244c565b610a4d919061244c565b610a5791906124a9565b610a6191906124a9565b610a6b91906124a9565b610a7d90670de0b6b3a764000061244c565b610a87919061244c565b610a9191906124a9565b955050505050506105f3565b506000979650505050505050565b600082815260208190526040902060010154610ac681611a57565b610ad08383611af7565b505050565b6001600160a01b0381163314610b455760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016106ba565b61063f8282611b7b565b60026001541415610ba25760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016106ba565b6002600155610baf611be0565b6007546040805180820190915260018152603960f81b602082015290600160a01b900460ff1615610bf35760405162461bcd60e51b81526004016106ba9190612317565b506003546040516331a9108f60e11b8152600481018390526001600160a01b0390911690636352211e9060240160206040518083038186803b158015610c3857600080fd5b505afa158015610c4c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c7091906124cb565b6001600160a01b0316336001600160a01b031614604051806040016040528060018152602001603360f81b81525090610cbc5760405162461bcd60e51b81526004016106ba9190612317565b506000610cca6000836106ca565b90506000610cd96001846106ca565b60035460405163f692c82960e01b8152600481018690529192506000916001600160a01b039091169063f692c8299060240160a06040518083038186803b158015610d2357600080fd5b505afa158015610d37573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d5b919061234a565b50600354604051634378a6e360e01b8152600481018a9052919550600094506001600160a01b03169250634378a6e3915060240160c06040518083038186803b158015610da757600080fd5b505afa158015610dbb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ddf91906123bf565b505050505090508060001415604051806040016040528060018152602001603560f81b81525090610e235760405162461bcd60e51b81526004016106ba9190612317565b5060098260ff16600a8110610e3a57610e3a612409565b015481141560405180604001604052806002815260200161189960f11b81525090610e785760405162461bcd60e51b81526004016106ba9190612317565b508315801590610e8757508215155b604051806040016040528060018152602001603560f81b81525090610ebf5760405162461bcd60e51b81526004016106ba9190612317565b506005546001600160a01b03166379cc6790336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260248101869052604401600060405180830381600087803b158015610f1a57600080fd5b505af1158015610f2e573d6000803e3d6000fd5b50505050610f67610f3c3390565b6006546001600160a01b0316610f536004886124a9565b6004546001600160a01b0316929190611c28565b610f8e336007546001600160a01b03166004610f8488600361244c565b610f5391906124a9565b6003546001600160a01b03166370a93b3686610fab84600161246b565b6040516001600160e01b031960e085901b16815260048101929092526024820152604401600060405180830381600087803b158015610fe957600080fd5b505af1158015610ffd573d6000803e3d6000fd5b505050507f38567192e7192f44727cb01ef1cce779467d435edc1f3f105c452844508782358561102a3390565b61103584600161246b565b604080519384526001600160a01b0390921660208401529082015260600160405180910390a1505060018055505050565b600061107181611a57565b6040805180820190915260018152603160f81b60208201526001600160a01b0383166110b05760405162461bcd60e51b81526004016106ba9190612317565b5050600480546001600160a01b0319166001600160a01b0392909216919091179055565b60006110df81611a57565b6040805180820190915260018152603160f81b60208201526001600160a01b03831661111e5760405162461bcd60e51b81526004016106ba9190612317565b5050600780546001600160a01b0319166001600160a01b0392909216919091179055565b600981600a811061115257600080fd5b0154905081565b600061116481611a57565b6040805180820190915260018152603160f81b60208201526001600160a01b0383166111a35760405162461bcd60e51b81526004016106ba9190612317565b5050600680546001600160a01b0319166001600160a01b0392909216919091179055565b60006111d281611a57565b6040805180820190915260018152603160f81b60208201525060005b60058160ff161015610ad057828160ff166005811061120f5761120f612409565b602002015160138260ff166005811061122a5761122a612409565b601091828204019190066002026101000a81548161ffff021916908361ffff160217905550808061125a906124e8565b9150506111ee565b600260015414156112b55760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016106ba565b60026001556112c2611be0565b600754604080518082019091526002815261031360f41b602082015290600160a01b900460ff166113065760405162461bcd60e51b81526004016106ba9190612317565b506003546040516331a9108f60e11b8152600481018390526001600160a01b0390911690636352211e9060240160206040518083038186803b15801561134b57600080fd5b505afa15801561135f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061138391906124cb565b6001600160a01b0316336001600160a01b031614604051806040016040528060018152602001603360f81b815250906113cf5760405162461bcd60e51b81526004016106ba9190612317565b5060006113dd6000836106ca565b905060006113ec6001846106ca565b60035460405163f692c82960e01b8152600481018690529192506000916001600160a01b039091169063f692c8299060240160a06040518083038186803b15801561143657600080fd5b505afa15801561144a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061146e919061234a565b50600354604051634378a6e360e01b8152600481018a9052919550600094506001600160a01b03169250634378a6e3915060240160c06040518083038186803b1580156114ba57600080fd5b505afa1580156114ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114f291906123bf565b505050505090508060001415604051806040016040528060018152602001603560f81b815250906115365760405162461bcd60e51b81526004016106ba9190612317565b5060098260ff16600a811061154d5761154d612409565b015481141560405180604001604052806002815260200161189960f11b8152509061158b5760405162461bcd60e51b81526004016106ba9190612317565b50831580159061159a57508215155b604051806040016040528060018152602001603560f81b815250906115d25760405162461bcd60e51b81526004016106ba9190612317565b506005546001600160a01b03166379cc6790336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260248101869052604401600060405180830381600087803b15801561162d57600080fd5b505af1158015611641573d6000803e3d6000fd5b50505050833414604051806040016040528060018152602001601b60f91b815250906116805760405162461bcd60e51b81526004016106ba9190612317565b506006546000906001600160a01b031661169b6004876124a9565b604051600081818185875af1925050503d80600081146116d7576040519150601f19603f3d011682016040523d82523d6000602084013e6116dc565b606091505b5050905080604051806040016040528060018152602001603760f81b815250906117195760405162461bcd60e51b81526004016106ba9190612317565b506007546000906001600160a01b0316600461173688600361244c565b61174091906124a9565b604051600081818185875af1925050503d806000811461177c576040519150601f19603f3d011682016040523d82523d6000602084013e611781565b606091505b5050905080604051806040016040528060018152602001600760fb1b815250906117be5760405162461bcd60e51b81526004016106ba9190612317565b506003546001600160a01b03166370a93b36886117dc86600161246b565b6040516001600160e01b031960e085901b16815260048101929092526024820152604401600060405180830381600087803b15801561181a57600080fd5b505af115801561182e573d6000803e3d6000fd5b505050507f38567192e7192f44727cb01ef1cce779467d435edc1f3f105c452844508782358761185b3390565b61186686600161246b565b604080519384526001600160a01b0390921660208401529082015260600160405180910390a15050600180555050505050565b600080600260019054906101000a90046001600160a01b03166001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156118ea57600080fd5b505afa1580156118fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119229190612522565b509195945050505050565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b600061196181611a57565b6040805180820190915260018152603160f81b60208201526001600160a01b0383166119a05760405162461bcd60e51b81526004016106ba9190612317565b5050600580546001600160a01b0319166001600160a01b0392909216919091179055565b6000828152602081905260409020600101546119df81611a57565b610ad08383611b7b565b60006119f481611a57565b6040805180820190915260018152603160f81b60208201526001600160a01b038316611a335760405162461bcd60e51b81526004016106ba9190612317565b5050600380546001600160a01b0319166001600160a01b0392909216919091179055565b611a618133611c88565b50565b611a6c611be0565b6002805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611aa13390565b6040516001600160a01b03909116815260200160405180910390a1565b611ac6611cec565b6002805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa33611aa1565b611b01828261192d565b61063f576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055611b373390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b611b85828261192d565b1561063f576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60025460ff1615611c265760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016106ba565b565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052611c82908590611d35565b50505050565b611c92828261192d565b61063f57611caa816001600160a01b03166014611e07565b611cb5836020611e07565b604051602001611cc6929190612572565b60408051601f198184030181529082905262461bcd60e51b82526106ba91600401612317565b60025460ff16611c265760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016106ba565b6000611d8a826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611faa9092919063ffffffff16565b805190915015610ad05780806020019051810190611da891906125e7565b610ad05760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016106ba565b60606000611e1683600261244c565b611e2190600261246b565b67ffffffffffffffff811115611e3957611e39612236565b6040519080825280601f01601f191660200182016040528015611e63576020820181803683370190505b509050600360fc1b81600081518110611e7e57611e7e612409565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611ead57611ead612409565b60200101906001600160f81b031916908160001a9053506000611ed184600261244c565b611edc90600161246b565b90505b6001811115611f54576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110611f1057611f10612409565b1a60f81b828281518110611f2657611f26612409565b60200101906001600160f81b031916908160001a90535060049490941c93611f4d81612604565b9050611edf565b508315611fa35760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016106ba565b9392505050565b6060611fb98484600085611fc1565b949350505050565b6060824710156120225760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016106ba565b6001600160a01b0385163b6120795760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016106ba565b600080866001600160a01b03168587604051612095919061261b565b60006040518083038185875af1925050503d80600081146120d2576040519150601f19603f3d011682016040523d82523d6000602084013e6120d7565b606091505b50915091506120e78282866120f2565b979650505050505050565b60608315612101575081611fa3565b8251156121115782518084602001fd5b8160405162461bcd60e51b81526004016106ba9190612317565b60006020828403121561213d57600080fd5b81356001600160e01b031981168114611fa357600080fd5b8015158114611a6157600080fd5b60006020828403121561217557600080fd5b8135611fa381612155565b60006020828403121561219257600080fd5b5035919050565b60ff81168114611a6157600080fd5b600080604083850312156121bb57600080fd5b82356121c681612199565b946020939093013593505050565b6001600160a01b0381168114611a6157600080fd5b600080604083850312156121fc57600080fd5b82359150602083013561220e816121d4565b809150509250929050565b60006020828403121561222b57600080fd5b8135611fa3816121d4565b634e487b7160e01b600052604160045260246000fd5b803561ffff8116811461225e57600080fd5b919050565b600060a0828403121561227557600080fd5b82601f83011261228457600080fd5b60405160a0810181811067ffffffffffffffff821117156122b557634e487b7160e01b600052604160045260246000fd5b6040528060a08401858111156122ca57600080fd5b845b81811015611922576122dd8161224c565b8352602092830192016122cc565b60005b838110156123065781810151838201526020016122ee565b83811115611c825750506000910152565b60208152600082518060208401526123368160408501602087016122eb565b601f01601f19169190910160400192915050565b600080600080600060a0868803121561236257600080fd5b855161236d81612199565b602087015190955061237e81612199565b604087015190945061238f81612199565b60608701519093506123a081612199565b60808701519092506123b181612199565b809150509295509295909350565b60008060008060008060c087890312156123d857600080fd5b865195506020870151945060408701519350606087015192506080870151915060a087015190509295509295509295565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000828210156124475761244761241f565b500390565b60008160001904831182151516156124665761246661241f565b500290565b6000821982111561247e5761247e61241f565b500190565b600061ffff8083168185168083038211156124a0576124a061241f565b01949350505050565b6000826124c657634e487b7160e01b600052601260045260246000fd5b500490565b6000602082840312156124dd57600080fd5b8151611fa3816121d4565b600060ff821660ff8114156124ff576124ff61241f565b60010192915050565b805169ffffffffffffffffffff8116811461225e57600080fd5b600080600080600060a0868803121561253a57600080fd5b61254386612508565b945060208601519350604086015192506060860151915061256660808701612508565b90509295509295909350565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516125aa8160178501602088016122eb565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516125db8160288401602088016122eb565b01602801949350505050565b6000602082840312156125f957600080fd5b8151611fa381612155565b6000816126135761261361241f565b506000190190565b6000825161262d8184602087016122eb565b919091019291505056fea26469706673582212204b640231e21ac779fe323771c4eded49fa64dbf258c76e5fd5c9ba483577deb464736f6c63430008090033",
  "deployedBytecode": "0x6080604052600436106101d85760003560e01c80635ad6af93116101025780638e15f47311610095578063d547741f11610064578063d547741f14610541578063df8de16314610561578063e04605fd14610582578063eccb4448146105a257600080fd5b80638e15f473146104d757806391d14854146104ec578063a217fddf1461050c578063c1763ee51461052157600080fd5b806367bdae9a116100d157806367bdae9a1461046d57806372c6239a1461048d5780637557a7d2146104ad57806384b8bce4146104c457600080fd5b80635ad6af93146104085780635c975abb1461041f5780635e00e592146104375780636605bfda1461044d57600080fd5b8063248a9ca31161017a57806345977d031161014957806345977d03146103885780634c0f5276146103a85780634f63a772146103c8578063522ffe96146103e857600080fd5b8063248a9ca3146103025780632f2ff15d1461033257806333fdbbe51461035257806336568abe1461036857600080fd5b8063062f8344116101b6578063062f83441461024957806309aca32e1461027c5780631b078ab31461029c5780632116dcc0146102d457600080fd5b806301ffc9a7146101dd578063021946fd1461021257806302329a2914610229575b600080fd5b3480156101e957600080fd5b506101fd6101f836600461212b565b6105c2565b60405190151581526020015b60405180910390f35b34801561021e57600080fd5b506102276105f9565b005b34801561023557600080fd5b50610227610244366004612163565b610626565b34801561025557600080fd5b50610269610264366004612180565b61064b565b60405161ffff9091168152602001610209565b34801561028857600080fd5b50610227610297366004612180565b610679565b3480156102a857600080fd5b506004546102bc906001600160a01b031681565b6040516001600160a01b039091168152602001610209565b3480156102e057600080fd5b506102f46102ef3660046121a8565b6106ca565b604051908152602001610209565b34801561030e57600080fd5b506102f461031d366004612180565b60009081526020819052604090206001015490565b34801561033e57600080fd5b5061022761034d3660046121e9565b610aab565b34801561035e57600080fd5b506102f46103e881565b34801561037457600080fd5b506102276103833660046121e9565b610ad5565b34801561039457600080fd5b506102276103a3366004612180565b610b4f565b3480156103b457600080fd5b506102276103c3366004612219565b611066565b3480156103d457600080fd5b506102276103e3366004612219565b6110d4565b3480156103f457600080fd5b506102f4610403366004612180565b611142565b34801561041457600080fd5b506019546102f49081565b34801561042b57600080fd5b5060025460ff166101fd565b34801561044357600080fd5b506102f460085481565b34801561045957600080fd5b50610227610468366004612219565b611159565b34801561047957600080fd5b50610227610488366004612263565b6111c7565b34801561049957600080fd5b506003546102bc906001600160a01b031681565b3480156104b957600080fd5b506016546102f49081565b6102276104d2366004612180565b611262565b3480156104e357600080fd5b506102f4611899565b3480156104f857600080fd5b506101fd6105073660046121e9565b61192d565b34801561051857600080fd5b506102f4600081565b34801561052d57600080fd5b5061022761053c366004612219565b611956565b34801561054d57600080fd5b5061022761055c3660046121e9565b6119c4565b34801561056d57600080fd5b506007546101fd90600160a01b900460ff1681565b34801561058e57600080fd5b506005546102bc906001600160a01b031681565b3480156105ae57600080fd5b506102276105bd366004612219565b6119e9565b60006001600160e01b03198216637965db0b60e01b14806105f357506301ffc9a760e01b6001600160e01b03198316145b92915050565b600061060481611a57565b506007805460ff60a01b198116600160a01b9182900460ff1615909102179055565b600061063181611a57565b81156106435761063f611a64565b5050565b61063f611abe565b6013816005811061065b57600080fd5b60109182820401919006600202915054906101000a900461ffff1681565b600061068481611a57565b6040805180820190915260018152603160f81b6020820152826106c35760405162461bcd60e51b81526004016106ba9190612317565b60405180910390fd5b5050600855565b60035460405163f692c82960e01b81526004810183905260009182918291829182916001600160a01b03169063f692c8299060240160a06040518083038186803b15801561071757600080fd5b505afa15801561072b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061074f919061234a565b600354604051634378a6e360e01b8152600481018d90529499509297509095509350600092506001600160a01b031690634378a6e39060240160c06040518083038186803b1580156107a057600080fd5b505afa1580156107b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107d891906123bf565b505050505090508760ff16600014156109575760006008548660ff1660138560ff166005811061080a5761080a612409565b601091828204019190066002029054906101000a900461ffff1661ffff1660146002015460018661083b9190612435565b610845919061244c565b61085290620186a061246b565b601560ff8a16600a811061086857610868612409565b602081049091015460ff601f9092166101000a90048116906014908a16600a811061089557610895612409565b601091828204019190066002029054906101000a900461ffff166108b99190612483565b61ffff166108c7919061244c565b6108d1919061244c565b6108e0906402540be40061244c565b6108ea919061244c565b6108f491906124a9565b600754909150600160a01b900460ff161561094a576000610913611899565b905060008113610923578161093c565b6305f5e100610932828461244c565b61093c91906124a9565b9750505050505050506105f3565b95506105f3945050505050565b8760ff1660011415610a9d576008548560ff1660646103e88060138760ff166005811061098657610986612409565b601091828204019190066002029054906101000a900461ffff1661ffff166017600201546001886109b79190612435565b6109c1919061244c565b6109ce90620186a061246b565b601860ff8c16600a81106109e4576109e4612409565b602081049091015460ff601f9092166101000a90048116906017908c16600a8110610a1157610a11612409565b601091828204019190066002029054906101000a900461ffff16610a359190612483565b61ffff16610a43919061244c565b610a4d919061244c565b610a5791906124a9565b610a6191906124a9565b610a6b91906124a9565b610a7d90670de0b6b3a764000061244c565b610a87919061244c565b610a9191906124a9565b955050505050506105f3565b506000979650505050505050565b600082815260208190526040902060010154610ac681611a57565b610ad08383611af7565b505050565b6001600160a01b0381163314610b455760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016106ba565b61063f8282611b7b565b60026001541415610ba25760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016106ba565b6002600155610baf611be0565b6007546040805180820190915260018152603960f81b602082015290600160a01b900460ff1615610bf35760405162461bcd60e51b81526004016106ba9190612317565b506003546040516331a9108f60e11b8152600481018390526001600160a01b0390911690636352211e9060240160206040518083038186803b158015610c3857600080fd5b505afa158015610c4c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c7091906124cb565b6001600160a01b0316336001600160a01b031614604051806040016040528060018152602001603360f81b81525090610cbc5760405162461bcd60e51b81526004016106ba9190612317565b506000610cca6000836106ca565b90506000610cd96001846106ca565b60035460405163f692c82960e01b8152600481018690529192506000916001600160a01b039091169063f692c8299060240160a06040518083038186803b158015610d2357600080fd5b505afa158015610d37573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d5b919061234a565b50600354604051634378a6e360e01b8152600481018a9052919550600094506001600160a01b03169250634378a6e3915060240160c06040518083038186803b158015610da757600080fd5b505afa158015610dbb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ddf91906123bf565b505050505090508060001415604051806040016040528060018152602001603560f81b81525090610e235760405162461bcd60e51b81526004016106ba9190612317565b5060098260ff16600a8110610e3a57610e3a612409565b015481141560405180604001604052806002815260200161189960f11b81525090610e785760405162461bcd60e51b81526004016106ba9190612317565b508315801590610e8757508215155b604051806040016040528060018152602001603560f81b81525090610ebf5760405162461bcd60e51b81526004016106ba9190612317565b506005546001600160a01b03166379cc6790336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260248101869052604401600060405180830381600087803b158015610f1a57600080fd5b505af1158015610f2e573d6000803e3d6000fd5b50505050610f67610f3c3390565b6006546001600160a01b0316610f536004886124a9565b6004546001600160a01b0316929190611c28565b610f8e336007546001600160a01b03166004610f8488600361244c565b610f5391906124a9565b6003546001600160a01b03166370a93b3686610fab84600161246b565b6040516001600160e01b031960e085901b16815260048101929092526024820152604401600060405180830381600087803b158015610fe957600080fd5b505af1158015610ffd573d6000803e3d6000fd5b505050507f38567192e7192f44727cb01ef1cce779467d435edc1f3f105c452844508782358561102a3390565b61103584600161246b565b604080519384526001600160a01b0390921660208401529082015260600160405180910390a1505060018055505050565b600061107181611a57565b6040805180820190915260018152603160f81b60208201526001600160a01b0383166110b05760405162461bcd60e51b81526004016106ba9190612317565b5050600480546001600160a01b0319166001600160a01b0392909216919091179055565b60006110df81611a57565b6040805180820190915260018152603160f81b60208201526001600160a01b03831661111e5760405162461bcd60e51b81526004016106ba9190612317565b5050600780546001600160a01b0319166001600160a01b0392909216919091179055565b600981600a811061115257600080fd5b0154905081565b600061116481611a57565b6040805180820190915260018152603160f81b60208201526001600160a01b0383166111a35760405162461bcd60e51b81526004016106ba9190612317565b5050600680546001600160a01b0319166001600160a01b0392909216919091179055565b60006111d281611a57565b6040805180820190915260018152603160f81b60208201525060005b60058160ff161015610ad057828160ff166005811061120f5761120f612409565b602002015160138260ff166005811061122a5761122a612409565b601091828204019190066002026101000a81548161ffff021916908361ffff160217905550808061125a906124e8565b9150506111ee565b600260015414156112b55760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016106ba565b60026001556112c2611be0565b600754604080518082019091526002815261031360f41b602082015290600160a01b900460ff166113065760405162461bcd60e51b81526004016106ba9190612317565b506003546040516331a9108f60e11b8152600481018390526001600160a01b0390911690636352211e9060240160206040518083038186803b15801561134b57600080fd5b505afa15801561135f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061138391906124cb565b6001600160a01b0316336001600160a01b031614604051806040016040528060018152602001603360f81b815250906113cf5760405162461bcd60e51b81526004016106ba9190612317565b5060006113dd6000836106ca565b905060006113ec6001846106ca565b60035460405163f692c82960e01b8152600481018690529192506000916001600160a01b039091169063f692c8299060240160a06040518083038186803b15801561143657600080fd5b505afa15801561144a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061146e919061234a565b50600354604051634378a6e360e01b8152600481018a9052919550600094506001600160a01b03169250634378a6e3915060240160c06040518083038186803b1580156114ba57600080fd5b505afa1580156114ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114f291906123bf565b505050505090508060001415604051806040016040528060018152602001603560f81b815250906115365760405162461bcd60e51b81526004016106ba9190612317565b5060098260ff16600a811061154d5761154d612409565b015481141560405180604001604052806002815260200161189960f11b8152509061158b5760405162461bcd60e51b81526004016106ba9190612317565b50831580159061159a57508215155b604051806040016040528060018152602001603560f81b815250906115d25760405162461bcd60e51b81526004016106ba9190612317565b506005546001600160a01b03166379cc6790336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260248101869052604401600060405180830381600087803b15801561162d57600080fd5b505af1158015611641573d6000803e3d6000fd5b50505050833414604051806040016040528060018152602001601b60f91b815250906116805760405162461bcd60e51b81526004016106ba9190612317565b506006546000906001600160a01b031661169b6004876124a9565b604051600081818185875af1925050503d80600081146116d7576040519150601f19603f3d011682016040523d82523d6000602084013e6116dc565b606091505b5050905080604051806040016040528060018152602001603760f81b815250906117195760405162461bcd60e51b81526004016106ba9190612317565b506007546000906001600160a01b0316600461173688600361244c565b61174091906124a9565b604051600081818185875af1925050503d806000811461177c576040519150601f19603f3d011682016040523d82523d6000602084013e611781565b606091505b5050905080604051806040016040528060018152602001600760fb1b815250906117be5760405162461bcd60e51b81526004016106ba9190612317565b506003546001600160a01b03166370a93b36886117dc86600161246b565b6040516001600160e01b031960e085901b16815260048101929092526024820152604401600060405180830381600087803b15801561181a57600080fd5b505af115801561182e573d6000803e3d6000fd5b505050507f38567192e7192f44727cb01ef1cce779467d435edc1f3f105c452844508782358761185b3390565b61186686600161246b565b604080519384526001600160a01b0390921660208401529082015260600160405180910390a15050600180555050505050565b600080600260019054906101000a90046001600160a01b03166001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156118ea57600080fd5b505afa1580156118fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119229190612522565b509195945050505050565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b600061196181611a57565b6040805180820190915260018152603160f81b60208201526001600160a01b0383166119a05760405162461bcd60e51b81526004016106ba9190612317565b5050600580546001600160a01b0319166001600160a01b0392909216919091179055565b6000828152602081905260409020600101546119df81611a57565b610ad08383611b7b565b60006119f481611a57565b6040805180820190915260018152603160f81b60208201526001600160a01b038316611a335760405162461bcd60e51b81526004016106ba9190612317565b5050600380546001600160a01b0319166001600160a01b0392909216919091179055565b611a618133611c88565b50565b611a6c611be0565b6002805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611aa13390565b6040516001600160a01b03909116815260200160405180910390a1565b611ac6611cec565b6002805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa33611aa1565b611b01828261192d565b61063f576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055611b373390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b611b85828261192d565b1561063f576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60025460ff1615611c265760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016106ba565b565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052611c82908590611d35565b50505050565b611c92828261192d565b61063f57611caa816001600160a01b03166014611e07565b611cb5836020611e07565b604051602001611cc6929190612572565b60408051601f198184030181529082905262461bcd60e51b82526106ba91600401612317565b60025460ff16611c265760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016106ba565b6000611d8a826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611faa9092919063ffffffff16565b805190915015610ad05780806020019051810190611da891906125e7565b610ad05760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016106ba565b60606000611e1683600261244c565b611e2190600261246b565b67ffffffffffffffff811115611e3957611e39612236565b6040519080825280601f01601f191660200182016040528015611e63576020820181803683370190505b509050600360fc1b81600081518110611e7e57611e7e612409565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611ead57611ead612409565b60200101906001600160f81b031916908160001a9053506000611ed184600261244c565b611edc90600161246b565b90505b6001811115611f54576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110611f1057611f10612409565b1a60f81b828281518110611f2657611f26612409565b60200101906001600160f81b031916908160001a90535060049490941c93611f4d81612604565b9050611edf565b508315611fa35760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016106ba565b9392505050565b6060611fb98484600085611fc1565b949350505050565b6060824710156120225760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016106ba565b6001600160a01b0385163b6120795760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016106ba565b600080866001600160a01b03168587604051612095919061261b565b60006040518083038185875af1925050503d80600081146120d2576040519150601f19603f3d011682016040523d82523d6000602084013e6120d7565b606091505b50915091506120e78282866120f2565b979650505050505050565b60608315612101575081611fa3565b8251156121115782518084602001fd5b8160405162461bcd60e51b81526004016106ba9190612317565b60006020828403121561213d57600080fd5b81356001600160e01b031981168114611fa357600080fd5b8015158114611a6157600080fd5b60006020828403121561217557600080fd5b8135611fa381612155565b60006020828403121561219257600080fd5b5035919050565b60ff81168114611a6157600080fd5b600080604083850312156121bb57600080fd5b82356121c681612199565b946020939093013593505050565b6001600160a01b0381168114611a6157600080fd5b600080604083850312156121fc57600080fd5b82359150602083013561220e816121d4565b809150509250929050565b60006020828403121561222b57600080fd5b8135611fa3816121d4565b634e487b7160e01b600052604160045260246000fd5b803561ffff8116811461225e57600080fd5b919050565b600060a0828403121561227557600080fd5b82601f83011261228457600080fd5b60405160a0810181811067ffffffffffffffff821117156122b557634e487b7160e01b600052604160045260246000fd5b6040528060a08401858111156122ca57600080fd5b845b81811015611922576122dd8161224c565b8352602092830192016122cc565b60005b838110156123065781810151838201526020016122ee565b83811115611c825750506000910152565b60208152600082518060208401526123368160408501602087016122eb565b601f01601f19169190910160400192915050565b600080600080600060a0868803121561236257600080fd5b855161236d81612199565b602087015190955061237e81612199565b604087015190945061238f81612199565b60608701519093506123a081612199565b60808701519092506123b181612199565b809150509295509295909350565b60008060008060008060c087890312156123d857600080fd5b865195506020870151945060408701519350606087015192506080870151915060a087015190509295509295509295565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000828210156124475761244761241f565b500390565b60008160001904831182151516156124665761246661241f565b500290565b6000821982111561247e5761247e61241f565b500190565b600061ffff8083168185168083038211156124a0576124a061241f565b01949350505050565b6000826124c657634e487b7160e01b600052601260045260246000fd5b500490565b6000602082840312156124dd57600080fd5b8151611fa3816121d4565b600060ff821660ff8114156124ff576124ff61241f565b60010192915050565b805169ffffffffffffffffffff8116811461225e57600080fd5b600080600080600060a0868803121561253a57600080fd5b61254386612508565b945060208601519350604086015192506060860151915061256660808701612508565b90509295509295909350565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516125aa8160178501602088016122eb565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516125db8160288401602088016122eb565b01602801949350505050565b6000602082840312156125f957600080fd5b8151611fa381612155565b6000816126135761261361241f565b506000190190565b6000825161262d8184602087016122eb565b919091019291505056fea26469706673582212204b640231e21ac779fe323771c4eded49fa64dbf258c76e5fd5c9ba483577deb464736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getLatestPrice()": {
        "notice": "Returns the latest price"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 70,
        "contract": "contracts/Utilities/Upgrader.sol:Upgrader",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)65_storage)"
      },
      {
        "astId": 557,
        "contract": "contracts/Utilities/Upgrader.sol:Upgrader",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 456,
        "contract": "contracts/Utilities/Upgrader.sol:Upgrader",
        "label": "_paused",
        "offset": 0,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 7294,
        "contract": "contracts/Utilities/Upgrader.sol:Upgrader",
        "label": "priceFeed",
        "offset": 1,
        "slot": "2",
        "type": "t_contract(AggregatorV3Interface)45"
      },
      {
        "astId": 7300,
        "contract": "contracts/Utilities/Upgrader.sol:Upgrader",
        "label": "blastEquipmentNFT",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IBlastEquipmentNFT)7716"
      },
      {
        "astId": 7303,
        "contract": "contracts/Utilities/Upgrader.sol:Upgrader",
        "label": "blastToken",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IERC20)1250"
      },
      {
        "astId": 7306,
        "contract": "contracts/Utilities/Upgrader.sol:Upgrader",
        "label": "csToken",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(ERC20Burnable)1294"
      },
      {
        "astId": 7308,
        "contract": "contracts/Utilities/Upgrader.sol:Upgrader",
        "label": "treasuryAddress",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 7310,
        "contract": "contracts/Utilities/Upgrader.sol:Upgrader",
        "label": "companyAddress",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 7312,
        "contract": "contracts/Utilities/Upgrader.sol:Upgrader",
        "label": "isUsingMatic",
        "offset": 20,
        "slot": "7",
        "type": "t_bool"
      },
      {
        "astId": 6614,
        "contract": "contracts/Utilities/Upgrader.sol:Upgrader",
        "label": "durabilityEffectDivider",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 6629,
        "contract": "contracts/Utilities/Upgrader.sol:Upgrader",
        "label": "maxLevelPerRarity",
        "offset": 0,
        "slot": "9",
        "type": "t_array(t_uint256)10_storage"
      },
      {
        "astId": 6639,
        "contract": "contracts/Utilities/Upgrader.sol:Upgrader",
        "label": "multiplierPerGrade",
        "offset": 0,
        "slot": "19",
        "type": "t_array(t_uint16)5_storage"
      },
      {
        "astId": 6642,
        "contract": "contracts/Utilities/Upgrader.sol:Upgrader",
        "label": "bltAttribute",
        "offset": 0,
        "slot": "20",
        "type": "t_struct(Attributes)6611_storage"
      },
      {
        "astId": 6645,
        "contract": "contracts/Utilities/Upgrader.sol:Upgrader",
        "label": "csAttribute",
        "offset": 0,
        "slot": "23",
        "type": "t_struct(Attributes)6611_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint16)10_storage": {
        "base": "t_uint16",
        "encoding": "inplace",
        "label": "uint16[10]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint16)5_storage": {
        "base": "t_uint16",
        "encoding": "inplace",
        "label": "uint16[5]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)10_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[10]",
        "numberOfBytes": "320"
      },
      "t_array(t_uint8)10_storage": {
        "base": "t_uint8",
        "encoding": "inplace",
        "label": "uint8[10]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_contract(ERC20Burnable)1294": {
        "encoding": "inplace",
        "label": "contract ERC20Burnable",
        "numberOfBytes": "20"
      },
      "t_contract(IBlastEquipmentNFT)7716": {
        "encoding": "inplace",
        "label": "contract IBlastEquipmentNFT",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)1250": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)65_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)65_storage"
      },
      "t_struct(Attributes)6611_storage": {
        "encoding": "inplace",
        "label": "struct Upgrader.Attributes",
        "members": [
          {
            "astId": 6604,
            "contract": "contracts/Utilities/Upgrader.sol:Upgrader",
            "label": "pricePerRarity",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_uint16)10_storage"
          },
          {
            "astId": 6608,
            "contract": "contracts/Utilities/Upgrader.sol:Upgrader",
            "label": "pricePerAdjective",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint8)10_storage"
          },
          {
            "astId": 6610,
            "contract": "contracts/Utilities/Upgrader.sol:Upgrader",
            "label": "pricePerLevel",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(RoleData)65_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 62,
            "contract": "contracts/Utilities/Upgrader.sol:Upgrader",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 64,
            "contract": "contracts/Utilities/Upgrader.sol:Upgrader",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}