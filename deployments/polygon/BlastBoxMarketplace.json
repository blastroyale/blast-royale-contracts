{
  "address": "0x945622DbD62F5710E6e86F8D0D6a06Fd304dF381",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IERC721",
          "name": "erc721Address",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "listingId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        }
      ],
      "name": "BlastboxDelisted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "listingId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "payTokenAddress",
          "type": "address"
        }
      ],
      "name": "BlastboxListed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "listingId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee1",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee2",
          "type": "uint256"
        }
      ],
      "name": "BlastboxSold",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee1",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "treasury1",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee2",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "treasury2",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "changedBy",
          "type": "address"
        }
      ],
      "name": "FeesChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "whitelists",
          "type": "address[]"
        }
      ],
      "name": "WhitelistAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "whitelists",
          "type": "address[]"
        }
      ],
      "name": "WhitelistRemoved",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DECIMAL_FACTOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "activeListingCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20",
          "name": "payTokenAddress",
          "type": "address"
        }
      ],
      "name": "addListing",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "listingId",
          "type": "uint256"
        }
      ],
      "name": "buy",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "erc721Contract",
      "outputs": [
        {
          "internalType": "contract IERC721",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fee1",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fee2",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "flipIsUsingMatic",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isUsingMatic",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "listingCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "listings",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isActive",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "stop",
          "type": "bool"
        }
      ],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "listingId",
          "type": "uint256"
        }
      ],
      "name": "removeListing",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_whitelist",
          "type": "address[]"
        }
      ],
      "name": "removeWhitelistTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_fee1",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_treasury1",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_fee2",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_treasury2",
          "type": "address"
        }
      ],
      "name": "setFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_whitelist",
          "type": "address[]"
        }
      ],
      "name": "setWhitelistTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury1",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury2",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "whitelistedTokens",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xf7690c4f87623d8c2504ddcdd2f415abd4f2216a5aa6ca4fab53cb75f13cc175",
  "receipt": {
    "to": null,
    "from": "0x602B24eB33c3Ce10C9b3C67D2a6B0D51329f4f34",
    "contractAddress": "0x945622DbD62F5710E6e86F8D0D6a06Fd304dF381",
    "transactionIndex": 59,
    "gasUsed": "1636451",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000800000000200000000000000008000000000000000000000008000000000000000000000000000000080000000000000000000000000800001000000000000000100000000000000000000020000000000000000000810000000000000000080000000000000400000000000000000000000000000000000000000000000000000000000080000200000000000000000000000000000000000000000000000000000000000004000000000000000400001000000000000000000000000000000110000000020000000000000000040000000000000000000000100000000000000000000100000",
    "blockHash": "0x668b4ed1b16aa642a1e0b144b89b04881de6f9a39cae5042498f96b3e556704b",
    "transactionHash": "0xf7690c4f87623d8c2504ddcdd2f415abd4f2216a5aa6ca4fab53cb75f13cc175",
    "logs": [
      {
        "transactionIndex": 59,
        "blockNumber": 40301225,
        "transactionHash": "0xf7690c4f87623d8c2504ddcdd2f415abd4f2216a5aa6ca4fab53cb75f13cc175",
        "address": "0x945622DbD62F5710E6e86F8D0D6a06Fd304dF381",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000602b24eb33c3ce10c9b3c67d2a6b0d51329f4f34"
        ],
        "data": "0x",
        "logIndex": 251,
        "blockHash": "0x668b4ed1b16aa642a1e0b144b89b04881de6f9a39cae5042498f96b3e556704b"
      },
      {
        "transactionIndex": 59,
        "blockNumber": 40301225,
        "transactionHash": "0xf7690c4f87623d8c2504ddcdd2f415abd4f2216a5aa6ca4fab53cb75f13cc175",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000602b24eb33c3ce10c9b3c67d2a6b0d51329f4f34",
          "0x000000000000000000000000f0245f6251bef9447a08766b9da2b07b28ad80b0"
        ],
        "data": "0x000000000000000000000000000000000000000000000000011a4cb4c4785f9a00000000000000000000000000000000000000000000001f13d347022594e40a00000000000000000000000000000000000000000000024011d40064965d5d5c00000000000000000000000000000000000000000000001f12b8fa4d611c847000000000000000000000000000000000000000000000024012ee4d195ad5bcf6",
        "logIndex": 252,
        "blockHash": "0x668b4ed1b16aa642a1e0b144b89b04881de6f9a39cae5042498f96b3e556704b"
      }
    ],
    "blockNumber": 40301225,
    "cumulativeGasUsed": "12952821",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x9f6fBb9736F1cEc0376215F1d2a99fA8670dEC0F"
  ],
  "numDeployments": 2,
  "solcInputHash": "9e5f73645830c8ab51d95c9d49e8c66d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"erc721Address\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"listingId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"}],\"name\":\"BlastboxDelisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"listingId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"payTokenAddress\",\"type\":\"address\"}],\"name\":\"BlastboxListed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"listingId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee2\",\"type\":\"uint256\"}],\"name\":\"BlastboxSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"treasury1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee2\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"treasury2\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"changedBy\",\"type\":\"address\"}],\"name\":\"FeesChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"whitelists\",\"type\":\"address[]\"}],\"name\":\"WhitelistAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"whitelists\",\"type\":\"address[]\"}],\"name\":\"WhitelistRemoved\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DECIMAL_FACTOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activeListingCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"payTokenAddress\",\"type\":\"address\"}],\"name\":\"addListing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"listingId\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"erc721Contract\",\"outputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flipIsUsingMatic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isUsingMatic\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listingCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"listings\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"stop\",\"type\":\"bool\"}],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"listingId\",\"type\":\"uint256\"}],\"name\":\"removeListing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_whitelist\",\"type\":\"address[]\"}],\"name\":\"removeWhitelistTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee1\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_treasury1\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fee2\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_treasury2\",\"type\":\"address\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_whitelist\",\"type\":\"address[]\"}],\"name\":\"setWhitelistTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelistedTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Based on OpenZeppelin Contracts.\",\"kind\":\"dev\",\"methods\":{\"addListing(uint256,uint256,address)\":{\"details\":\"Creates a new entry for a Listing object and transfers the Token to the contract\",\"params\":{\"price\":\"Price in NFTs.\",\"tokenId\":\"NFT TokenId.\"}},\"buy(uint256)\":{\"details\":\"Trabsfers both the ERC20 token (price) and the NFT.\",\"params\":{\"listingId\":\"NFT Listing Id.\"}},\"constructor\":{\"details\":\"Setup the two contracts it will interact with : ERC721 and ERC20\",\"params\":{\"erc721Address\":\"Address of the NFT Contract.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"removeListing(uint256)\":{\"details\":\"Marks Listing as not active object and transfers the Token back\",\"params\":{\"listingId\":\"NFT Listing Id.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setFee(uint256,address,uint256,address)\":{\"params\":{\"_fee1\":\"new Fee1.\",\"_fee2\":\"new Fee2.\",\"_treasury1\":\"New treasury1 address.\",\"_treasury2\":\"New treasury2 address.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"Blast Royale Token - $BLT\",\"version\":1},\"userdoc\":{\"events\":{\"BlastboxDelisted(uint256,uint256,address)\":{\"notice\":\"Event Delisted\"},\"BlastboxListed(uint256,uint256,address,uint256,address)\":{\"notice\":\"Event Listed\"},\"BlastboxSold(uint256,uint256,address,address,uint256,uint256,uint256)\":{\"notice\":\"EventBlastbox Sold\"},\"FeesChanged(uint256,address,uint256,address,address)\":{\"notice\":\"Event Fee changed\"}},\"kind\":\"user\",\"methods\":{\"addListing(uint256,uint256,address)\":{\"notice\":\"add a Listing to the Marketplace\"},\"buy(uint256)\":{\"notice\":\"Buys a listed NFT\"},\"constructor\":{\"notice\":\"Token constructor\"},\"removeListing(uint256)\":{\"notice\":\"Remove a Listing from the Marketplace\"},\"setFee(uint256,address,uint256,address)\":{\"notice\":\"Sets a new Fee\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BlastBoxMarketplace.sol\":\"BlastBoxMarketplace\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xe68ed7fb8766ed1e888291f881e36b616037f852b37d96877045319ad298ba87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/BlastBoxMarketplace.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport {Errors} from \\\"./libraries/Errors.sol\\\";\\n\\nstruct Listing {\\n    address owner;\\n    bool isActive;\\n    uint256 tokenId;\\n    uint256 price;\\n    IERC20 tokenAddress;\\n}\\n\\n/// @title Blast Royale Token - $BLT\\n/// @dev Based on OpenZeppelin Contracts.\\ncontract BlastBoxMarketplace is ReentrancyGuard, Ownable, Pausable {\\n    using SafeERC20 for IERC20;\\n\\n    uint256 public constant DECIMAL_FACTOR = 100_00;\\n\\n    uint256 public listingCount;\\n    uint256 public activeListingCount;\\n    uint256 public fee1;\\n    address public treasury1;\\n    uint256 public fee2;\\n    address public treasury2;\\n    bool public isUsingMatic;\\n\\n    mapping(address => bool) public whitelistedTokens;\\n    mapping(uint256 => Listing) public listings;\\n    IERC721 public erc721Contract;\\n\\n    /// @notice Event Listed\\n    event BlastboxListed(\\n        uint256 listingId,\\n        uint256 tokenId,\\n        address seller,\\n        uint256 price,\\n        address payTokenAddress\\n    );\\n\\n    /// @notice Event Delisted\\n    event BlastboxDelisted(uint256 listingId, uint256 tokenId, address seller);\\n\\n    /// @notice EventBlastbox Sold\\n    event BlastboxSold(\\n        uint256 listingId,\\n        uint256 tokenId,\\n        address seller,\\n        address buyer,\\n        uint256 price,\\n        uint256 fee1,\\n        uint256 fee2\\n    );\\n\\n    /// @notice Event Fee changed\\n    event FeesChanged(\\n        uint256 fee1,\\n        address treasury1,\\n        uint256 fee2,\\n        address treasury2,\\n        address changedBy\\n    );\\n\\n    event WhitelistAdded(address[] whitelists);\\n\\n    event WhitelistRemoved(address[] whitelists);\\n\\n    /// @notice Token constructor\\n    /// @dev Setup the two contracts it will interact with : ERC721 and ERC20\\n    /// @param erc721Address Address of the NFT Contract.\\n    constructor(IERC721 erc721Address) {\\n        require(address(erc721Address) != address(0), Errors.NO_ZERO_ADDRESS);\\n        erc721Contract = erc721Address;\\n    }\\n\\n    /// @notice add a Listing to the Marketplace\\n    /// @dev Creates a new entry for a Listing object and transfers the Token to the contract\\n    /// @param tokenId NFT TokenId.\\n    /// @param price Price in NFTs.\\n    function addListing(\\n        uint256 tokenId,\\n        uint256 price,\\n        IERC20 payTokenAddress\\n    ) public nonReentrant whenNotPaused {\\n        require(price != 0, Errors.NO_ZERO_VALUE);\\n        if (address(payTokenAddress) != address(0)) {\\n            require(\\n                whitelistedTokens[address(payTokenAddress)],\\n                Errors.TOKEN_NOT_WHITELISTED\\n            );\\n        }\\n\\n        uint256 listingId = listingCount;\\n        listings[listingId] = Listing({\\n            owner: _msgSender(),\\n            isActive: true,\\n            tokenId: tokenId,\\n            price: price,\\n            tokenAddress: payTokenAddress\\n        });\\n        listingCount = listingCount + 1;\\n        activeListingCount = activeListingCount + 1;\\n        erc721Contract.transferFrom(_msgSender(), address(this), tokenId);\\n\\n        emit BlastboxListed(\\n            listingId,\\n            tokenId,\\n            _msgSender(),\\n            price,\\n            address(payTokenAddress)\\n        );\\n    }\\n\\n    /// @notice Remove a Listing from the Marketplace\\n    /// @dev Marks Listing as not active object and transfers the Token back\\n    /// @param listingId NFT Listing Id.\\n    function removeListing(uint256 listingId) public nonReentrant {\\n        Listing storage listing = listings[listingId];\\n        require(\\n            listing.owner == _msgSender() || owner() == _msgSender(),\\n            Errors.NOT_OWNER\\n        );\\n        require(listing.isActive, Errors.LISTING_IS_NOT_ACTIVED);\\n        listing.isActive = false;\\n        erc721Contract.transferFrom(\\n            address(this),\\n            listing.owner,\\n            listing.tokenId\\n        );\\n        activeListingCount = activeListingCount - 1;\\n        emit BlastboxDelisted(listingId, listing.tokenId, listing.owner);\\n    }\\n\\n    /// @notice Buys a listed NFT\\n    /// @dev Trabsfers both the ERC20 token (price) and the NFT.\\n    /// @param listingId NFT Listing Id.\\n    function buy(uint256 listingId) public payable nonReentrant whenNotPaused {\\n        require(listings[listingId].isActive, Errors.LISTING_IS_NOT_ACTIVED);\\n\\n        listings[listingId].isActive = false;\\n        IERC20 payTokenAddress = listings[listingId].tokenAddress;\\n        uint256 listedPrice = listings[listingId].price;\\n        uint256 buyingFee1 = ((fee1 * listedPrice) / DECIMAL_FACTOR);\\n        uint256 buyingFee2 = ((fee2 * listedPrice) / DECIMAL_FACTOR);\\n\\n        if (isUsingMatic) {\\n            require(msg.value == listedPrice, Errors.INVALID_AMOUNT);\\n            if (buyingFee1 > 0) {\\n                (bool sent1, ) = payable(treasury1).call{value: buyingFee1}(\\\"\\\");\\n                require(sent1, Errors.FAILED_TO_SEND_ETHER_TREASURY);\\n            }\\n            if (buyingFee2 > 0) {\\n                (bool sent2, ) = payable(treasury2).call{value: buyingFee2}(\\\"\\\");\\n                require(sent2, Errors.FAILED_TO_SEND_ETHER_COMPANY);\\n            }\\n            (bool sent, ) = payable(listings[listingId].owner).call{\\n                value: listedPrice - buyingFee1 - buyingFee2\\n            }(\\\"\\\");\\n            require(sent, Errors.FAILED_TO_SEND_ETHER_USER);\\n        } else {\\n            require(msg.value == 0, Errors.INVALID_AMOUNT);\\n            if (buyingFee1 > 0) {\\n                payTokenAddress.safeTransferFrom(\\n                    _msgSender(),\\n                    treasury1,\\n                    buyingFee1\\n                );\\n            }\\n            if (buyingFee2 > 0) {\\n                payTokenAddress.safeTransferFrom(\\n                    _msgSender(),\\n                    treasury2,\\n                    buyingFee2\\n                );\\n            }\\n            payTokenAddress.safeTransferFrom(\\n                _msgSender(),\\n                listings[listingId].owner,\\n                listedPrice - buyingFee1 - buyingFee2\\n            );\\n        }\\n        erc721Contract.transferFrom(\\n            address(this),\\n            _msgSender(),\\n            listings[listingId].tokenId\\n        );\\n        activeListingCount = activeListingCount - 1;\\n\\n        emit BlastboxSold(\\n            listingId,\\n            listings[listingId].tokenId,\\n            listings[listingId].owner,\\n            _msgSender(),\\n            listedPrice,\\n            buyingFee1,\\n            buyingFee2\\n        );\\n    }\\n\\n    /// @notice Sets a new Fee\\n    /// @param _fee1 new Fee1.\\n    /// @param _treasury1 New treasury1 address.\\n    /// @param _fee2 new Fee2.\\n    /// @param _treasury2 New treasury2 address.\\n    function setFee(\\n        uint256 _fee1,\\n        address _treasury1,\\n        uint256 _fee2,\\n        address _treasury2\\n    ) public onlyOwner {\\n        require(_fee1 + _fee2 < DECIMAL_FACTOR, Errors.INVALID_PARAM);\\n        require(_treasury1 != address(0), Errors.NO_ZERO_ADDRESS);\\n        require(_treasury2 != address(0), Errors.NO_ZERO_ADDRESS);\\n\\n        fee1 = _fee1;\\n        treasury1 = _treasury1;\\n        fee2 = _fee2;\\n        treasury2 = _treasury2;\\n\\n        emit FeesChanged(fee1, treasury1, fee2, treasury2, _msgSender());\\n    }\\n\\n    function setWhitelistTokens(\\n        address[] calldata _whitelist\\n    ) external onlyOwner {\\n        for (uint256 i = 0; i < _whitelist.length; i++) {\\n            require(_whitelist[i] != address(0), Errors.NO_ZERO_ADDRESS);\\n            whitelistedTokens[_whitelist[i]] = true;\\n        }\\n\\n        emit WhitelistAdded(_whitelist);\\n    }\\n\\n    function removeWhitelistTokens(\\n        address[] calldata _whitelist\\n    ) external onlyOwner {\\n        for (uint256 i = 0; i < _whitelist.length; i++) {\\n            require(_whitelist[i] != address(0), Errors.NO_ZERO_ADDRESS);\\n            whitelistedTokens[_whitelist[i]] = false;\\n        }\\n\\n        emit WhitelistRemoved(_whitelist);\\n    }\\n\\n    function flipIsUsingMatic() external onlyOwner {\\n        isUsingMatic = !isUsingMatic;\\n    }\\n\\n    // @notice Pauses/Unpauses the contract\\n    // @dev While paused, addListing, and buy are not allowed\\n    // @param stop whether to pause or unpause the contract.\\n    function pause(bool stop) external onlyOwner {\\n        if (stop) {\\n            _pause();\\n        } else {\\n            _unpause();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x98e841d035ec7063c695be28408a1534e456f59e59f5cbece8a7a1d14a5531e5\",\"license\":\"MIT\"},\"contracts/libraries/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/**\\n * @title Errors library\\n * @author JensonCollins\\n * @notice Defines the error messages emitted by the different contracts of the Aave protocol\\n * @dev Error messages prefix glossary:\\n *  - VL = ValidationLogic\\n *  - MATH = Math libraries\\n *  - CT = Common errors between tokens (AToken, VariableDebtToken and StableDebtToken)\\n *  - AT = AToken\\n *  - SDT = StableDebtToken\\n *  - VDT = VariableDebtToken\\n *  - LP = LendingPool\\n *  - LPAPR = LendingPoolAddressesProviderRegistry\\n *  - LPC = LendingPoolConfiguration\\n *  - RL = ReserveLogic\\n *  - LPCM = LendingPoolCollateralManager\\n *  - P = Pausable\\n */\\n\\nlibrary Errors {\\n    //common errors\\n    string public constant NO_ZERO_ADDRESS = \\\"1\\\"; // Address cannot be zero\\n    string public constant NO_ZERO_VALUE = \\\"2\\\"; // Value cannot be zero\\n    string public constant NOT_OWNER = \\\"3\\\"; // Caller is not owner\\n    string public constant NOT_EXIST_TOKEN_ID = \\\"4\\\"; // Token ID does not exist\\n    string public constant INVALID_PARAM = \\\"5\\\"; // Invalid parameter\\n    string public constant INVALID_AMOUNT = \\\"6\\\"; // In case msg.value amount is different as expected\\n    string public constant FAILED_TO_SEND_ETHER_TREASURY = \\\"7\\\"; // Failed to send ether to treasury\\n    string public constant FAILED_TO_SEND_ETHER_COMPANY = \\\"8\\\"; // Failed to send ether to company\\n    string public constant USING_MATIC_NOW = \\\"9\\\"; // Using MATIC now\\n    string public constant NOT_USING_MATIC_NOW = \\\"10\\\"; // Not using MATIC now\\n\\n    // AccessControl\\n    string public constant MISSING_GAME_ROLE = \\\"11\\\"; // Caller does not have the GAME_ROLE role\\n\\n    // BlastEquipmentNFT contract\\n    string public constant MAX_LEVEL_REACHED = \\\"12\\\"; // Max level reached\\n    string public constant MAX_REPLICATION_COUNT_REACHED = \\\"24\\\"; // Max replication counter reached\\n\\n    // Marektplace contract\\n    string public constant TOKEN_NOT_WHITELISTED = \\\"13\\\"; // Caller is not whitelisted\\n    string public constant LISTING_IS_NOT_ACTIVED = \\\"14\\\"; // Listing is not actived\\n    string public constant FAILED_TO_SEND_ETHER_USER = \\\"15\\\"; // Failed to send ether to user\\n\\n    // MarketplaceLootbox contract\\n    string public constant MAX_LIMIT_REACHED = \\\"16\\\"; // Reached max limit\\n    string public constant INVALID_MERKLE_PROOF = \\\"17\\\"; // Invalid merkle proof\\n\\n    // Lootbox contract\\n    string public constant NOT_AVAILABLE_TO_OPEN = \\\"18\\\"; // Lootbox is not available to open\\n\\n    // CS contract\\n    string public constant CS_EXPIRED_DEADLINE = \\\"19\\\"; // Invalid signature\\n    string public constant CS_INVALID_SIGNATURE = \\\"20\\\"; // Invalid signature\\n\\n    // Replicator contract\\n    string public constant NOT_READY_REPLICATE = \\\"21\\\"; // Not ready to replicate\\n    string public constant NOT_READY_MORPH = \\\"22\\\"; // Not ready to morph\\n    string public constant INVALID_HEX_CHARACTER = \\\"23\\\"; // Not ready to morph\\n\\n    // Vesting contract\\n    string public constant INSUFFICIENT_TOKENS = \\\"25\\\"; // Insufficient tokens\\n    string public constant DURATION_INVALID = \\\"26\\\"; // Duration is invalid\\n    string public constant BENEFICIARY_OR_OWNER = \\\"27\\\"; // Beneficiary or owner\\n    string public constant NOT_ENOUGH_TOKENS = \\\"28\\\"; // Not enough tokens\\n    string public constant SCHEDULE_REVOKED = \\\"29\\\"; // Schedule revoked\\n    string public constant NOT_REVOCABLE = \\\"30\\\"; // Not revocable\\n    string public constant START_TIME_INVALID = \\\"31\\\"; // Start time is invalid\\n}\\n\",\"keccak256\":\"0xe9b740b8cdd0c3b4405b3ab6c8bc21f5cc54c7605ca725c01ee08c13d651e7a0\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162001cf538038062001cf5833981016040819052620000349162000114565b60016000556200004433620000c2565b6001805460ff60a01b1916815560408051808201909152908152603160f81b60208201526001600160a01b0382166200009b5760405162461bcd60e51b815260040162000092919062000146565b60405180910390fd5b50600a80546001600160a01b0319166001600160a01b03929092169190911790556200019e565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000602082840312156200012757600080fd5b81516001600160a01b03811681146200013f57600080fd5b9392505050565b600060208083528351808285015260005b81811015620001755785810183015185820160400152820162000157565b8181111562000188576000604083870101525b50601f01601f1916929092016040019392505050565b611b4780620001ae6000396000f3fe6080604052600436106101405760003560e01c80638da5cb5b116100b6578063d96a094a1161006f578063d96a094a14610353578063daf9c21014610366578063de74e57b14610396578063df8de16314610422578063e5d1d26014610443578063f2fde38b1461046357600080fd5b80638da5cb5b146102a9578063a9b07c26146102c7578063b25706f3146102dd578063c6098256146102fd578063cf49e50a14610313578063d7c97fb41461033357600080fd5b806333fdbbe51161010857806333fdbbe5146101f957806339f73a481461021d5780634681a7c614610233578063479ad4c3146102495780635c975abb14610269578063715018a61461029457600080fd5b8063021946fd1461014557806302329a291461015c578063129f55021461017c57806326c0eb17146101b9578063278b4077146101d9575b600080fd5b34801561015157600080fd5b5061015a610483565b005b34801561016857600080fd5b5061015a61017736600461175a565b6104d7565b34801561018857600080fd5b5060055461019c906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156101c557600080fd5b5061015a6101d436600461178c565b61051a565b3480156101e557600080fd5b5061015a6101f43660046117c5565b610791565b34801561020557600080fd5b5061020f61271081565b6040519081526020016101b0565b34801561022957600080fd5b5061020f60065481565b34801561023f57600080fd5b5061020f60035481565b34801561025557600080fd5b5061015a61026436600461180f565b610924565b34801561027557600080fd5b50600154600160a01b900460ff165b60405190151581526020016101b0565b3480156102a057600080fd5b5061015a610add565b3480156102b557600080fd5b506001546001600160a01b031661019c565b3480156102d357600080fd5b5061020f60025481565b3480156102e957600080fd5b5061015a6102f8366004611828565b610b13565b34801561030957600080fd5b5061020f60045481565b34801561031f57600080fd5b5061015a61032e366004611828565b610c5a565b34801561033f57600080fd5b50600a5461019c906001600160a01b031681565b61015a61036136600461180f565b610d95565b34801561037257600080fd5b5061028461038136600461189d565b60086020526000908152604090205460ff1681565b3480156103a257600080fd5b506103ee6103b136600461180f565b60096020526000908152604090208054600182015460028301546003909301546001600160a01b0380841694600160a01b90940460ff1693911685565b604080516001600160a01b03968716815294151560208601528401929092526060830152909116608082015260a0016101b0565b34801561042e57600080fd5b5060075461028490600160a01b900460ff1681565b34801561044f57600080fd5b5060075461019c906001600160a01b031681565b34801561046f57600080fd5b5061015a61047e36600461189d565b6112a4565b6001546001600160a01b031633146104b65760405162461bcd60e51b81526004016104ad906118ba565b60405180910390fd5b6007805460ff60a01b198116600160a01b9182900460ff1615909102179055565b6001546001600160a01b031633146105015760405162461bcd60e51b81526004016104ad906118ba565b80156105125761050f61133c565b50565b61050f6113be565b6002600054141561053d5760405162461bcd60e51b81526004016104ad906118ef565b6002600055600154600160a01b900460ff161561056c5760405162461bcd60e51b81526004016104ad90611926565b6040805180820190915260018152601960f91b6020820152826105a25760405162461bcd60e51b81526004016104ad919061197c565b506001600160a01b0381161561060a576001600160a01b0381166000908152600860209081526040918290205482518084019093526002835261313360f01b9183019190915260ff166106085760405162461bcd60e51b81526004016104ad919061197c565b505b600280546040805160a081018252338152600160208083018281528385018a8152606085018a81526001600160a01b038a81166080880190815260008a81526009909652979094209551865493511515600160a01b026001600160a81b03199094169085161792909217855551848401555183870155925160039092018054929093166001600160a01b031990921691909117909155915490916106ae91906119c5565b6002556003546106bf9060016119c5565b600355600a546001600160a01b03166323b872dd3330876040518463ffffffff1660e01b81526004016106f4939291906119dd565b600060405180830381600087803b15801561070e57600080fd5b505af1158015610722573d6000803e3d6000fd5b505050507fe709d4eb5f439ecabffc7f84983e01e0f0b22b8b1d3895acbee4ad2ef787a4d881856107503390565b6040805193845260208401929092526001600160a01b03908116838301526060830187905285166080830152519081900360a00190a1505060016000555050565b6001546001600160a01b031633146107bb5760405162461bcd60e51b81526004016104ad906118ba565b6127106107c883866119c5565b10604051806040016040528060018152602001603560f81b815250906108015760405162461bcd60e51b81526004016104ad919061197c565b506040805180820190915260018152603160f81b60208201526001600160a01b0384166108415760405162461bcd60e51b81526004016104ad919061197c565b506040805180820190915260018152603160f81b60208201526001600160a01b0382166108815760405162461bcd60e51b81526004016104ad919061197c565b506004849055600580546001600160a01b038086166001600160a01b031992831681179093556006859055600780549185169190921681179091557f411e041470d4dfedf5a73fbf6f67504194747ee8253ff0c2761da0c9e4e53b5791869185906108e93390565b604080519586526001600160a01b0394851660208701528501929092528216606084015216608082015260a00160405180910390a150505050565b600260005414156109475760405162461bcd60e51b81526004016104ad906118ef565b6002600090815581815260096020526040902080546001600160a01b031633148061097c57506001546001600160a01b031633145b604051806040016040528060018152602001603360f81b815250906109b45760405162461bcd60e51b81526004016104ad919061197c565b5080546040805180820190915260028152610c4d60f21b602082015290600160a01b900460ff166109f85760405162461bcd60e51b81526004016104ad919061197c565b50805460ff60a01b1981168255600a5460018301546040516323b872dd60e01b81526001600160a01b03928316936323b872dd93610a409330939190921691906004016119dd565b600060405180830381600087803b158015610a5a57600080fd5b505af1158015610a6e573d6000803e3d6000fd5b505050506001600354610a819190611a01565b600355600181015481546040805185815260208101939093526001600160a01b0390911682820152517fafd90b70b374efefd945a26fdc3ef073fc9275071e0e6d996cc3e3f487a8db659181900360600190a150506001600055565b6001546001600160a01b03163314610b075760405162461bcd60e51b81526004016104ad906118ba565b610b116000611442565b565b6001546001600160a01b03163314610b3d5760405162461bcd60e51b81526004016104ad906118ba565b60005b81811015610c1c576000838383818110610b5c57610b5c611a18565b9050602002016020810190610b71919061189d565b6001600160a01b03161415604051806040016040528060018152602001603160f81b81525090610bb45760405162461bcd60e51b81526004016104ad919061197c565b50600060086000858585818110610bcd57610bcd611a18565b9050602002016020810190610be2919061189d565b6001600160a01b031681526020810191909152604001600020805460ff191691151591909117905580610c1481611a2e565b915050610b40565b507f1d474f57a5c483b47a8bf6006e39086f96dd040a00cb348e22f80a4ca2c6f2228282604051610c4e929190611a49565b60405180910390a15050565b6001546001600160a01b03163314610c845760405162461bcd60e51b81526004016104ad906118ba565b60005b81811015610d63576000838383818110610ca357610ca3611a18565b9050602002016020810190610cb8919061189d565b6001600160a01b03161415604051806040016040528060018152602001603160f81b81525090610cfb5760405162461bcd60e51b81526004016104ad919061197c565b50600160086000858585818110610d1457610d14611a18565b9050602002016020810190610d29919061189d565b6001600160a01b031681526020810191909152604001600020805460ff191691151591909117905580610d5b81611a2e565b915050610c87565b507ff74f148a4f930a0f67a2c33ba932a14e3e91b4e6468f21e545932fd8251115388282604051610c4e929190611a49565b60026000541415610db85760405162461bcd60e51b81526004016104ad906118ef565b6002600055600154600160a01b900460ff1615610de75760405162461bcd60e51b81526004016104ad90611926565b60008181526009602090815260409182902054825180840190935260028352610c4d60f21b91830191909152600160a01b900460ff16610e3a5760405162461bcd60e51b81526004016104ad919061197c565b506000818152600960205260408120805460ff60a01b1916815560038101546002909101546004546001600160a01b0390921692909161271090610e7f908490611a97565b610e899190611ab6565b9050600061271083600654610e9e9190611a97565b610ea89190611ab6565b600754909150600160a01b900460ff16156110d9576040805180820190915260018152601b60f91b6020820152348414610ef55760405162461bcd60e51b81526004016104ad919061197c565b508115610f8e576005546040516000916001600160a01b03169084908381818185875af1925050503d8060008114610f49576040519150601f19603f3d011682016040523d82523d6000602084013e610f4e565b606091505b5050905080604051806040016040528060018152602001603760f81b81525090610f8b5760405162461bcd60e51b81526004016104ad919061197c565b50505b8015611026576007546040516000916001600160a01b03169083908381818185875af1925050503d8060008114610fe1576040519150601f19603f3d011682016040523d82523d6000602084013e610fe6565b606091505b5050905080604051806040016040528060018152602001600760fb1b815250906110235760405162461bcd60e51b81526004016104ad919061197c565b50505b6000858152600960205260408120546001600160a01b0316826110498587611a01565b6110539190611a01565b604051600081818185875af1925050503d806000811461108f576040519150601f19603f3d011682016040523d82523d6000602084013e611094565b606091505b505090508060405180604001604052806002815260200161313560f01b815250906110d25760405162461bcd60e51b81526004016104ad919061197c565b5050611196565b6040805180820190915260018152601b60f91b602082015234156111105760405162461bcd60e51b81526004016104ad919061197c565b50811561113257611132336005546001600160a01b0387811692911685611494565b801561115357611153336007546001600160a01b0387811692911684611494565b611196336000878152600960205260409020546001600160a01b03168361117a8688611a01565b6111849190611a01565b6001600160a01b038816929190611494565b600a54600086815260096020526040908190206001015490516323b872dd60e01b81526001600160a01b03909216916323b872dd916111db91309133916004016119dd565b600060405180830381600087803b1580156111f557600080fd5b505af1158015611209573d6000803e3d6000fd5b50505050600160035461121c9190611a01565b600355600085815260096020908152604091829020600181015490548351898152928301919091526001600160a01b0316818301523360608201526080810185905260a0810184905260c0810183905290517f9e6678fc0a6fb31767e7229b7826f1f48bb38337ae496d7f9e0836d433b07e7c9181900360e00190a150506001600055505050565b6001546001600160a01b031633146112ce5760405162461bcd60e51b81526004016104ad906118ba565b6001600160a01b0381166113335760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016104ad565b61050f81611442565b600154600160a01b900460ff16156113665760405162461bcd60e51b81526004016104ad90611926565b6001805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586113a13390565b6040516001600160a01b03909116815260200160405180910390a1565b600154600160a01b900460ff1661140e5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016104ad565b6001805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa336113a1565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6114ec846323b872dd60e01b8585856040516024016114b5939291906119dd565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526114f2565b50505050565b6000611547826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166115c99092919063ffffffff16565b8051909150156115c457808060200190518101906115659190611ad8565b6115c45760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016104ad565b505050565b60606115d884846000856115e2565b90505b9392505050565b6060824710156116435760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016104ad565b6001600160a01b0385163b61169a5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016104ad565b600080866001600160a01b031685876040516116b69190611af5565b60006040518083038185875af1925050503d80600081146116f3576040519150601f19603f3d011682016040523d82523d6000602084013e6116f8565b606091505b5091509150611708828286611713565b979650505050505050565b606083156117225750816115db565b8251156117325782518084602001fd5b8160405162461bcd60e51b81526004016104ad919061197c565b801515811461050f57600080fd5b60006020828403121561176c57600080fd5b81356115db8161174c565b6001600160a01b038116811461050f57600080fd5b6000806000606084860312156117a157600080fd5b833592506020840135915060408401356117ba81611777565b809150509250925092565b600080600080608085870312156117db57600080fd5b8435935060208501356117ed81611777565b925060408501359150606085013561180481611777565b939692955090935050565b60006020828403121561182157600080fd5b5035919050565b6000806020838503121561183b57600080fd5b823567ffffffffffffffff8082111561185357600080fd5b818501915085601f83011261186757600080fd5b81358181111561187657600080fd5b8660208260051b850101111561188b57600080fd5b60209290920196919550909350505050565b6000602082840312156118af57600080fd5b81356115db81611777565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b60005b8381101561196b578181015183820152602001611953565b838111156114ec5750506000910152565b602081526000825180602084015261199b816040850160208701611950565b601f01601f19169190910160400192915050565b634e487b7160e01b600052601160045260246000fd5b600082198211156119d8576119d86119af565b500190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b600082821015611a1357611a136119af565b500390565b634e487b7160e01b600052603260045260246000fd5b6000600019821415611a4257611a426119af565b5060010190565b60208082528181018390526000908460408401835b86811015611a8c578235611a7181611777565b6001600160a01b031682529183019190830190600101611a5e565b509695505050505050565b6000816000190483118215151615611ab157611ab16119af565b500290565b600082611ad357634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215611aea57600080fd5b81516115db8161174c565b60008251611b07818460208701611950565b919091019291505056fea264697066735822122030def5dacb30798f0c197ef56fb3c3690b5623d65ccc866598bb7471401b340a64736f6c63430008090033",
  "deployedBytecode": "0x6080604052600436106101405760003560e01c80638da5cb5b116100b6578063d96a094a1161006f578063d96a094a14610353578063daf9c21014610366578063de74e57b14610396578063df8de16314610422578063e5d1d26014610443578063f2fde38b1461046357600080fd5b80638da5cb5b146102a9578063a9b07c26146102c7578063b25706f3146102dd578063c6098256146102fd578063cf49e50a14610313578063d7c97fb41461033357600080fd5b806333fdbbe51161010857806333fdbbe5146101f957806339f73a481461021d5780634681a7c614610233578063479ad4c3146102495780635c975abb14610269578063715018a61461029457600080fd5b8063021946fd1461014557806302329a291461015c578063129f55021461017c57806326c0eb17146101b9578063278b4077146101d9575b600080fd5b34801561015157600080fd5b5061015a610483565b005b34801561016857600080fd5b5061015a61017736600461175a565b6104d7565b34801561018857600080fd5b5060055461019c906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156101c557600080fd5b5061015a6101d436600461178c565b61051a565b3480156101e557600080fd5b5061015a6101f43660046117c5565b610791565b34801561020557600080fd5b5061020f61271081565b6040519081526020016101b0565b34801561022957600080fd5b5061020f60065481565b34801561023f57600080fd5b5061020f60035481565b34801561025557600080fd5b5061015a61026436600461180f565b610924565b34801561027557600080fd5b50600154600160a01b900460ff165b60405190151581526020016101b0565b3480156102a057600080fd5b5061015a610add565b3480156102b557600080fd5b506001546001600160a01b031661019c565b3480156102d357600080fd5b5061020f60025481565b3480156102e957600080fd5b5061015a6102f8366004611828565b610b13565b34801561030957600080fd5b5061020f60045481565b34801561031f57600080fd5b5061015a61032e366004611828565b610c5a565b34801561033f57600080fd5b50600a5461019c906001600160a01b031681565b61015a61036136600461180f565b610d95565b34801561037257600080fd5b5061028461038136600461189d565b60086020526000908152604090205460ff1681565b3480156103a257600080fd5b506103ee6103b136600461180f565b60096020526000908152604090208054600182015460028301546003909301546001600160a01b0380841694600160a01b90940460ff1693911685565b604080516001600160a01b03968716815294151560208601528401929092526060830152909116608082015260a0016101b0565b34801561042e57600080fd5b5060075461028490600160a01b900460ff1681565b34801561044f57600080fd5b5060075461019c906001600160a01b031681565b34801561046f57600080fd5b5061015a61047e36600461189d565b6112a4565b6001546001600160a01b031633146104b65760405162461bcd60e51b81526004016104ad906118ba565b60405180910390fd5b6007805460ff60a01b198116600160a01b9182900460ff1615909102179055565b6001546001600160a01b031633146105015760405162461bcd60e51b81526004016104ad906118ba565b80156105125761050f61133c565b50565b61050f6113be565b6002600054141561053d5760405162461bcd60e51b81526004016104ad906118ef565b6002600055600154600160a01b900460ff161561056c5760405162461bcd60e51b81526004016104ad90611926565b6040805180820190915260018152601960f91b6020820152826105a25760405162461bcd60e51b81526004016104ad919061197c565b506001600160a01b0381161561060a576001600160a01b0381166000908152600860209081526040918290205482518084019093526002835261313360f01b9183019190915260ff166106085760405162461bcd60e51b81526004016104ad919061197c565b505b600280546040805160a081018252338152600160208083018281528385018a8152606085018a81526001600160a01b038a81166080880190815260008a81526009909652979094209551865493511515600160a01b026001600160a81b03199094169085161792909217855551848401555183870155925160039092018054929093166001600160a01b031990921691909117909155915490916106ae91906119c5565b6002556003546106bf9060016119c5565b600355600a546001600160a01b03166323b872dd3330876040518463ffffffff1660e01b81526004016106f4939291906119dd565b600060405180830381600087803b15801561070e57600080fd5b505af1158015610722573d6000803e3d6000fd5b505050507fe709d4eb5f439ecabffc7f84983e01e0f0b22b8b1d3895acbee4ad2ef787a4d881856107503390565b6040805193845260208401929092526001600160a01b03908116838301526060830187905285166080830152519081900360a00190a1505060016000555050565b6001546001600160a01b031633146107bb5760405162461bcd60e51b81526004016104ad906118ba565b6127106107c883866119c5565b10604051806040016040528060018152602001603560f81b815250906108015760405162461bcd60e51b81526004016104ad919061197c565b506040805180820190915260018152603160f81b60208201526001600160a01b0384166108415760405162461bcd60e51b81526004016104ad919061197c565b506040805180820190915260018152603160f81b60208201526001600160a01b0382166108815760405162461bcd60e51b81526004016104ad919061197c565b506004849055600580546001600160a01b038086166001600160a01b031992831681179093556006859055600780549185169190921681179091557f411e041470d4dfedf5a73fbf6f67504194747ee8253ff0c2761da0c9e4e53b5791869185906108e93390565b604080519586526001600160a01b0394851660208701528501929092528216606084015216608082015260a00160405180910390a150505050565b600260005414156109475760405162461bcd60e51b81526004016104ad906118ef565b6002600090815581815260096020526040902080546001600160a01b031633148061097c57506001546001600160a01b031633145b604051806040016040528060018152602001603360f81b815250906109b45760405162461bcd60e51b81526004016104ad919061197c565b5080546040805180820190915260028152610c4d60f21b602082015290600160a01b900460ff166109f85760405162461bcd60e51b81526004016104ad919061197c565b50805460ff60a01b1981168255600a5460018301546040516323b872dd60e01b81526001600160a01b03928316936323b872dd93610a409330939190921691906004016119dd565b600060405180830381600087803b158015610a5a57600080fd5b505af1158015610a6e573d6000803e3d6000fd5b505050506001600354610a819190611a01565b600355600181015481546040805185815260208101939093526001600160a01b0390911682820152517fafd90b70b374efefd945a26fdc3ef073fc9275071e0e6d996cc3e3f487a8db659181900360600190a150506001600055565b6001546001600160a01b03163314610b075760405162461bcd60e51b81526004016104ad906118ba565b610b116000611442565b565b6001546001600160a01b03163314610b3d5760405162461bcd60e51b81526004016104ad906118ba565b60005b81811015610c1c576000838383818110610b5c57610b5c611a18565b9050602002016020810190610b71919061189d565b6001600160a01b03161415604051806040016040528060018152602001603160f81b81525090610bb45760405162461bcd60e51b81526004016104ad919061197c565b50600060086000858585818110610bcd57610bcd611a18565b9050602002016020810190610be2919061189d565b6001600160a01b031681526020810191909152604001600020805460ff191691151591909117905580610c1481611a2e565b915050610b40565b507f1d474f57a5c483b47a8bf6006e39086f96dd040a00cb348e22f80a4ca2c6f2228282604051610c4e929190611a49565b60405180910390a15050565b6001546001600160a01b03163314610c845760405162461bcd60e51b81526004016104ad906118ba565b60005b81811015610d63576000838383818110610ca357610ca3611a18565b9050602002016020810190610cb8919061189d565b6001600160a01b03161415604051806040016040528060018152602001603160f81b81525090610cfb5760405162461bcd60e51b81526004016104ad919061197c565b50600160086000858585818110610d1457610d14611a18565b9050602002016020810190610d29919061189d565b6001600160a01b031681526020810191909152604001600020805460ff191691151591909117905580610d5b81611a2e565b915050610c87565b507ff74f148a4f930a0f67a2c33ba932a14e3e91b4e6468f21e545932fd8251115388282604051610c4e929190611a49565b60026000541415610db85760405162461bcd60e51b81526004016104ad906118ef565b6002600055600154600160a01b900460ff1615610de75760405162461bcd60e51b81526004016104ad90611926565b60008181526009602090815260409182902054825180840190935260028352610c4d60f21b91830191909152600160a01b900460ff16610e3a5760405162461bcd60e51b81526004016104ad919061197c565b506000818152600960205260408120805460ff60a01b1916815560038101546002909101546004546001600160a01b0390921692909161271090610e7f908490611a97565b610e899190611ab6565b9050600061271083600654610e9e9190611a97565b610ea89190611ab6565b600754909150600160a01b900460ff16156110d9576040805180820190915260018152601b60f91b6020820152348414610ef55760405162461bcd60e51b81526004016104ad919061197c565b508115610f8e576005546040516000916001600160a01b03169084908381818185875af1925050503d8060008114610f49576040519150601f19603f3d011682016040523d82523d6000602084013e610f4e565b606091505b5050905080604051806040016040528060018152602001603760f81b81525090610f8b5760405162461bcd60e51b81526004016104ad919061197c565b50505b8015611026576007546040516000916001600160a01b03169083908381818185875af1925050503d8060008114610fe1576040519150601f19603f3d011682016040523d82523d6000602084013e610fe6565b606091505b5050905080604051806040016040528060018152602001600760fb1b815250906110235760405162461bcd60e51b81526004016104ad919061197c565b50505b6000858152600960205260408120546001600160a01b0316826110498587611a01565b6110539190611a01565b604051600081818185875af1925050503d806000811461108f576040519150601f19603f3d011682016040523d82523d6000602084013e611094565b606091505b505090508060405180604001604052806002815260200161313560f01b815250906110d25760405162461bcd60e51b81526004016104ad919061197c565b5050611196565b6040805180820190915260018152601b60f91b602082015234156111105760405162461bcd60e51b81526004016104ad919061197c565b50811561113257611132336005546001600160a01b0387811692911685611494565b801561115357611153336007546001600160a01b0387811692911684611494565b611196336000878152600960205260409020546001600160a01b03168361117a8688611a01565b6111849190611a01565b6001600160a01b038816929190611494565b600a54600086815260096020526040908190206001015490516323b872dd60e01b81526001600160a01b03909216916323b872dd916111db91309133916004016119dd565b600060405180830381600087803b1580156111f557600080fd5b505af1158015611209573d6000803e3d6000fd5b50505050600160035461121c9190611a01565b600355600085815260096020908152604091829020600181015490548351898152928301919091526001600160a01b0316818301523360608201526080810185905260a0810184905260c0810183905290517f9e6678fc0a6fb31767e7229b7826f1f48bb38337ae496d7f9e0836d433b07e7c9181900360e00190a150506001600055505050565b6001546001600160a01b031633146112ce5760405162461bcd60e51b81526004016104ad906118ba565b6001600160a01b0381166113335760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016104ad565b61050f81611442565b600154600160a01b900460ff16156113665760405162461bcd60e51b81526004016104ad90611926565b6001805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586113a13390565b6040516001600160a01b03909116815260200160405180910390a1565b600154600160a01b900460ff1661140e5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016104ad565b6001805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa336113a1565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6114ec846323b872dd60e01b8585856040516024016114b5939291906119dd565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526114f2565b50505050565b6000611547826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166115c99092919063ffffffff16565b8051909150156115c457808060200190518101906115659190611ad8565b6115c45760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016104ad565b505050565b60606115d884846000856115e2565b90505b9392505050565b6060824710156116435760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016104ad565b6001600160a01b0385163b61169a5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016104ad565b600080866001600160a01b031685876040516116b69190611af5565b60006040518083038185875af1925050503d80600081146116f3576040519150601f19603f3d011682016040523d82523d6000602084013e6116f8565b606091505b5091509150611708828286611713565b979650505050505050565b606083156117225750816115db565b8251156117325782518084602001fd5b8160405162461bcd60e51b81526004016104ad919061197c565b801515811461050f57600080fd5b60006020828403121561176c57600080fd5b81356115db8161174c565b6001600160a01b038116811461050f57600080fd5b6000806000606084860312156117a157600080fd5b833592506020840135915060408401356117ba81611777565b809150509250925092565b600080600080608085870312156117db57600080fd5b8435935060208501356117ed81611777565b925060408501359150606085013561180481611777565b939692955090935050565b60006020828403121561182157600080fd5b5035919050565b6000806020838503121561183b57600080fd5b823567ffffffffffffffff8082111561185357600080fd5b818501915085601f83011261186757600080fd5b81358181111561187657600080fd5b8660208260051b850101111561188b57600080fd5b60209290920196919550909350505050565b6000602082840312156118af57600080fd5b81356115db81611777565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b60005b8381101561196b578181015183820152602001611953565b838111156114ec5750506000910152565b602081526000825180602084015261199b816040850160208701611950565b601f01601f19169190910160400192915050565b634e487b7160e01b600052601160045260246000fd5b600082198211156119d8576119d86119af565b500190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b600082821015611a1357611a136119af565b500390565b634e487b7160e01b600052603260045260246000fd5b6000600019821415611a4257611a426119af565b5060010190565b60208082528181018390526000908460408401835b86811015611a8c578235611a7181611777565b6001600160a01b031682529183019190830190600101611a5e565b509695505050505050565b6000816000190483118215151615611ab157611ab16119af565b500290565b600082611ad357634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215611aea57600080fd5b81516115db8161174c565b60008251611b07818460208701611950565b919091019291505056fea264697066735822122030def5dacb30798f0c197ef56fb3c3690b5623d65ccc866598bb7471401b340a64736f6c63430008090033",
  "devdoc": {
    "details": "Based on OpenZeppelin Contracts.",
    "kind": "dev",
    "methods": {
      "addListing(uint256,uint256,address)": {
        "details": "Creates a new entry for a Listing object and transfers the Token to the contract",
        "params": {
          "price": "Price in NFTs.",
          "tokenId": "NFT TokenId."
        }
      },
      "buy(uint256)": {
        "details": "Trabsfers both the ERC20 token (price) and the NFT.",
        "params": {
          "listingId": "NFT Listing Id."
        }
      },
      "constructor": {
        "details": "Setup the two contracts it will interact with : ERC721 and ERC20",
        "params": {
          "erc721Address": "Address of the NFT Contract."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "removeListing(uint256)": {
        "details": "Marks Listing as not active object and transfers the Token back",
        "params": {
          "listingId": "NFT Listing Id."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setFee(uint256,address,uint256,address)": {
        "params": {
          "_fee1": "new Fee1.",
          "_fee2": "new Fee2.",
          "_treasury1": "New treasury1 address.",
          "_treasury2": "New treasury2 address."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "Blast Royale Token - $BLT",
    "version": 1
  },
  "userdoc": {
    "events": {
      "BlastboxDelisted(uint256,uint256,address)": {
        "notice": "Event Delisted"
      },
      "BlastboxListed(uint256,uint256,address,uint256,address)": {
        "notice": "Event Listed"
      },
      "BlastboxSold(uint256,uint256,address,address,uint256,uint256,uint256)": {
        "notice": "EventBlastbox Sold"
      },
      "FeesChanged(uint256,address,uint256,address,address)": {
        "notice": "Event Fee changed"
      }
    },
    "kind": "user",
    "methods": {
      "addListing(uint256,uint256,address)": {
        "notice": "add a Listing to the Marketplace"
      },
      "buy(uint256)": {
        "notice": "Buys a listed NFT"
      },
      "constructor": {
        "notice": "Token constructor"
      },
      "removeListing(uint256)": {
        "notice": "Remove a Listing from the Marketplace"
      },
      "setFee(uint256,address,uint256,address)": {
        "notice": "Sets a new Fee"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 649,
        "contract": "contracts/BlastBoxMarketplace.sol:BlastBoxMarketplace",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 435,
        "contract": "contracts/BlastBoxMarketplace.sol:BlastBoxMarketplace",
        "label": "_owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 564,
        "contract": "contracts/BlastBoxMarketplace.sol:BlastBoxMarketplace",
        "label": "_paused",
        "offset": 20,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 6793,
        "contract": "contracts/BlastBoxMarketplace.sol:BlastBoxMarketplace",
        "label": "listingCount",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 6795,
        "contract": "contracts/BlastBoxMarketplace.sol:BlastBoxMarketplace",
        "label": "activeListingCount",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 6797,
        "contract": "contracts/BlastBoxMarketplace.sol:BlastBoxMarketplace",
        "label": "fee1",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 6799,
        "contract": "contracts/BlastBoxMarketplace.sol:BlastBoxMarketplace",
        "label": "treasury1",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 6801,
        "contract": "contracts/BlastBoxMarketplace.sol:BlastBoxMarketplace",
        "label": "fee2",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 6803,
        "contract": "contracts/BlastBoxMarketplace.sol:BlastBoxMarketplace",
        "label": "treasury2",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 6805,
        "contract": "contracts/BlastBoxMarketplace.sol:BlastBoxMarketplace",
        "label": "isUsingMatic",
        "offset": 20,
        "slot": "7",
        "type": "t_bool"
      },
      {
        "astId": 6809,
        "contract": "contracts/BlastBoxMarketplace.sol:BlastBoxMarketplace",
        "label": "whitelistedTokens",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 6814,
        "contract": "contracts/BlastBoxMarketplace.sol:BlastBoxMarketplace",
        "label": "listings",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_struct(Listing)6777_storage)"
      },
      {
        "astId": 6817,
        "contract": "contracts/BlastBoxMarketplace.sol:BlastBoxMarketplace",
        "label": "erc721Contract",
        "offset": 0,
        "slot": "10",
        "type": "t_contract(IERC721)2657"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)1344": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IERC721)2657": {
        "encoding": "inplace",
        "label": "contract IERC721",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_struct(Listing)6777_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Listing)",
        "numberOfBytes": "32",
        "value": "t_struct(Listing)6777_storage"
      },
      "t_struct(Listing)6777_storage": {
        "encoding": "inplace",
        "label": "struct Listing",
        "members": [
          {
            "astId": 6767,
            "contract": "contracts/BlastBoxMarketplace.sol:BlastBoxMarketplace",
            "label": "owner",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 6769,
            "contract": "contracts/BlastBoxMarketplace.sol:BlastBoxMarketplace",
            "label": "isActive",
            "offset": 20,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 6771,
            "contract": "contracts/BlastBoxMarketplace.sol:BlastBoxMarketplace",
            "label": "tokenId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 6773,
            "contract": "contracts/BlastBoxMarketplace.sol:BlastBoxMarketplace",
            "label": "price",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 6776,
            "contract": "contracts/BlastBoxMarketplace.sol:BlastBoxMarketplace",
            "label": "tokenAddress",
            "offset": 0,
            "slot": "3",
            "type": "t_contract(IERC20)1344"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}